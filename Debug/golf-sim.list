
golf-sim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004838  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080048f4  080048f4  000148f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004964  08004964  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004964  08004964  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004964  08004964  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004964  08004964  00014964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800496c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  08004978  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08004978  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006c3b  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001678  00000000  00000000  00026cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  00028330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000556  00000000  00000000  00028a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001978b  00000000  00000000  00028f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a1b0  00000000  00000000  00042719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098ee5  00000000  00000000  0004c8c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001948  00000000  00000000  000e57b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e70f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080048dc 	.word	0x080048dc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080048dc 	.word	0x080048dc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_i2f>:
 80003f0:	b570      	push	{r4, r5, r6, lr}
 80003f2:	2800      	cmp	r0, #0
 80003f4:	d013      	beq.n	800041e <__aeabi_i2f+0x2e>
 80003f6:	17c3      	asrs	r3, r0, #31
 80003f8:	18c5      	adds	r5, r0, r3
 80003fa:	405d      	eors	r5, r3
 80003fc:	0fc4      	lsrs	r4, r0, #31
 80003fe:	0028      	movs	r0, r5
 8000400:	f001 fa78 	bl	80018f4 <__clzsi2>
 8000404:	239e      	movs	r3, #158	; 0x9e
 8000406:	0001      	movs	r1, r0
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	2b96      	cmp	r3, #150	; 0x96
 800040c:	dc0f      	bgt.n	800042e <__aeabi_i2f+0x3e>
 800040e:	2808      	cmp	r0, #8
 8000410:	d031      	beq.n	8000476 <__aeabi_i2f+0x86>
 8000412:	3908      	subs	r1, #8
 8000414:	408d      	lsls	r5, r1
 8000416:	026d      	lsls	r5, r5, #9
 8000418:	0a6d      	lsrs	r5, r5, #9
 800041a:	b2d8      	uxtb	r0, r3
 800041c:	e002      	b.n	8000424 <__aeabi_i2f+0x34>
 800041e:	2400      	movs	r4, #0
 8000420:	2000      	movs	r0, #0
 8000422:	2500      	movs	r5, #0
 8000424:	05c0      	lsls	r0, r0, #23
 8000426:	4328      	orrs	r0, r5
 8000428:	07e4      	lsls	r4, r4, #31
 800042a:	4320      	orrs	r0, r4
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	2b99      	cmp	r3, #153	; 0x99
 8000430:	dd0c      	ble.n	800044c <__aeabi_i2f+0x5c>
 8000432:	2205      	movs	r2, #5
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	0028      	movs	r0, r5
 8000438:	40d0      	lsrs	r0, r2
 800043a:	0002      	movs	r2, r0
 800043c:	0008      	movs	r0, r1
 800043e:	301b      	adds	r0, #27
 8000440:	4085      	lsls	r5, r0
 8000442:	0028      	movs	r0, r5
 8000444:	1e45      	subs	r5, r0, #1
 8000446:	41a8      	sbcs	r0, r5
 8000448:	4302      	orrs	r2, r0
 800044a:	0015      	movs	r5, r2
 800044c:	2905      	cmp	r1, #5
 800044e:	dc16      	bgt.n	800047e <__aeabi_i2f+0x8e>
 8000450:	002a      	movs	r2, r5
 8000452:	480f      	ldr	r0, [pc, #60]	; (8000490 <__aeabi_i2f+0xa0>)
 8000454:	4002      	ands	r2, r0
 8000456:	076e      	lsls	r6, r5, #29
 8000458:	d009      	beq.n	800046e <__aeabi_i2f+0x7e>
 800045a:	260f      	movs	r6, #15
 800045c:	4035      	ands	r5, r6
 800045e:	2d04      	cmp	r5, #4
 8000460:	d005      	beq.n	800046e <__aeabi_i2f+0x7e>
 8000462:	3204      	adds	r2, #4
 8000464:	0155      	lsls	r5, r2, #5
 8000466:	d502      	bpl.n	800046e <__aeabi_i2f+0x7e>
 8000468:	239f      	movs	r3, #159	; 0x9f
 800046a:	4002      	ands	r2, r0
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	0192      	lsls	r2, r2, #6
 8000470:	0a55      	lsrs	r5, r2, #9
 8000472:	b2d8      	uxtb	r0, r3
 8000474:	e7d6      	b.n	8000424 <__aeabi_i2f+0x34>
 8000476:	026d      	lsls	r5, r5, #9
 8000478:	2096      	movs	r0, #150	; 0x96
 800047a:	0a6d      	lsrs	r5, r5, #9
 800047c:	e7d2      	b.n	8000424 <__aeabi_i2f+0x34>
 800047e:	1f4a      	subs	r2, r1, #5
 8000480:	4095      	lsls	r5, r2
 8000482:	002a      	movs	r2, r5
 8000484:	4802      	ldr	r0, [pc, #8]	; (8000490 <__aeabi_i2f+0xa0>)
 8000486:	4002      	ands	r2, r0
 8000488:	076e      	lsls	r6, r5, #29
 800048a:	d0f0      	beq.n	800046e <__aeabi_i2f+0x7e>
 800048c:	e7e5      	b.n	800045a <__aeabi_i2f+0x6a>
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	fbffffff 	.word	0xfbffffff

08000494 <__aeabi_ddiv>:
 8000494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000496:	4657      	mov	r7, sl
 8000498:	464e      	mov	r6, r9
 800049a:	4645      	mov	r5, r8
 800049c:	46de      	mov	lr, fp
 800049e:	b5e0      	push	{r5, r6, r7, lr}
 80004a0:	030c      	lsls	r4, r1, #12
 80004a2:	001f      	movs	r7, r3
 80004a4:	004b      	lsls	r3, r1, #1
 80004a6:	4681      	mov	r9, r0
 80004a8:	4692      	mov	sl, r2
 80004aa:	0005      	movs	r5, r0
 80004ac:	b085      	sub	sp, #20
 80004ae:	0b24      	lsrs	r4, r4, #12
 80004b0:	0d5b      	lsrs	r3, r3, #21
 80004b2:	0fce      	lsrs	r6, r1, #31
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d100      	bne.n	80004ba <__aeabi_ddiv+0x26>
 80004b8:	e152      	b.n	8000760 <__aeabi_ddiv+0x2cc>
 80004ba:	4ad2      	ldr	r2, [pc, #840]	; (8000804 <__aeabi_ddiv+0x370>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d100      	bne.n	80004c2 <__aeabi_ddiv+0x2e>
 80004c0:	e16e      	b.n	80007a0 <__aeabi_ddiv+0x30c>
 80004c2:	0f42      	lsrs	r2, r0, #29
 80004c4:	00e4      	lsls	r4, r4, #3
 80004c6:	4314      	orrs	r4, r2
 80004c8:	2280      	movs	r2, #128	; 0x80
 80004ca:	0412      	lsls	r2, r2, #16
 80004cc:	4322      	orrs	r2, r4
 80004ce:	4690      	mov	r8, r2
 80004d0:	4acd      	ldr	r2, [pc, #820]	; (8000808 <__aeabi_ddiv+0x374>)
 80004d2:	00c5      	lsls	r5, r0, #3
 80004d4:	4693      	mov	fp, r2
 80004d6:	449b      	add	fp, r3
 80004d8:	2300      	movs	r3, #0
 80004da:	4699      	mov	r9, r3
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	033c      	lsls	r4, r7, #12
 80004e0:	007b      	lsls	r3, r7, #1
 80004e2:	4650      	mov	r0, sl
 80004e4:	0b24      	lsrs	r4, r4, #12
 80004e6:	0d5b      	lsrs	r3, r3, #21
 80004e8:	0fff      	lsrs	r7, r7, #31
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d100      	bne.n	80004f0 <__aeabi_ddiv+0x5c>
 80004ee:	e11a      	b.n	8000726 <__aeabi_ddiv+0x292>
 80004f0:	4ac4      	ldr	r2, [pc, #784]	; (8000804 <__aeabi_ddiv+0x370>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d100      	bne.n	80004f8 <__aeabi_ddiv+0x64>
 80004f6:	e15e      	b.n	80007b6 <__aeabi_ddiv+0x322>
 80004f8:	0f42      	lsrs	r2, r0, #29
 80004fa:	00e4      	lsls	r4, r4, #3
 80004fc:	4322      	orrs	r2, r4
 80004fe:	2480      	movs	r4, #128	; 0x80
 8000500:	0424      	lsls	r4, r4, #16
 8000502:	4314      	orrs	r4, r2
 8000504:	4ac0      	ldr	r2, [pc, #768]	; (8000808 <__aeabi_ddiv+0x374>)
 8000506:	00c1      	lsls	r1, r0, #3
 8000508:	4694      	mov	ip, r2
 800050a:	465a      	mov	r2, fp
 800050c:	4463      	add	r3, ip
 800050e:	1ad3      	subs	r3, r2, r3
 8000510:	469b      	mov	fp, r3
 8000512:	2000      	movs	r0, #0
 8000514:	0033      	movs	r3, r6
 8000516:	407b      	eors	r3, r7
 8000518:	469a      	mov	sl, r3
 800051a:	464b      	mov	r3, r9
 800051c:	2b0f      	cmp	r3, #15
 800051e:	d827      	bhi.n	8000570 <__aeabi_ddiv+0xdc>
 8000520:	4aba      	ldr	r2, [pc, #744]	; (800080c <__aeabi_ddiv+0x378>)
 8000522:	009b      	lsls	r3, r3, #2
 8000524:	58d3      	ldr	r3, [r2, r3]
 8000526:	469f      	mov	pc, r3
 8000528:	46b2      	mov	sl, r6
 800052a:	9b00      	ldr	r3, [sp, #0]
 800052c:	2b02      	cmp	r3, #2
 800052e:	d016      	beq.n	800055e <__aeabi_ddiv+0xca>
 8000530:	2b03      	cmp	r3, #3
 8000532:	d100      	bne.n	8000536 <__aeabi_ddiv+0xa2>
 8000534:	e287      	b.n	8000a46 <__aeabi_ddiv+0x5b2>
 8000536:	2b01      	cmp	r3, #1
 8000538:	d000      	beq.n	800053c <__aeabi_ddiv+0xa8>
 800053a:	e0d5      	b.n	80006e8 <__aeabi_ddiv+0x254>
 800053c:	2300      	movs	r3, #0
 800053e:	2200      	movs	r2, #0
 8000540:	2500      	movs	r5, #0
 8000542:	051b      	lsls	r3, r3, #20
 8000544:	4313      	orrs	r3, r2
 8000546:	4652      	mov	r2, sl
 8000548:	07d2      	lsls	r2, r2, #31
 800054a:	4313      	orrs	r3, r2
 800054c:	0028      	movs	r0, r5
 800054e:	0019      	movs	r1, r3
 8000550:	b005      	add	sp, #20
 8000552:	bcf0      	pop	{r4, r5, r6, r7}
 8000554:	46bb      	mov	fp, r7
 8000556:	46b2      	mov	sl, r6
 8000558:	46a9      	mov	r9, r5
 800055a:	46a0      	mov	r8, r4
 800055c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800055e:	2200      	movs	r2, #0
 8000560:	2500      	movs	r5, #0
 8000562:	4ba8      	ldr	r3, [pc, #672]	; (8000804 <__aeabi_ddiv+0x370>)
 8000564:	e7ed      	b.n	8000542 <__aeabi_ddiv+0xae>
 8000566:	46ba      	mov	sl, r7
 8000568:	46a0      	mov	r8, r4
 800056a:	000d      	movs	r5, r1
 800056c:	9000      	str	r0, [sp, #0]
 800056e:	e7dc      	b.n	800052a <__aeabi_ddiv+0x96>
 8000570:	4544      	cmp	r4, r8
 8000572:	d200      	bcs.n	8000576 <__aeabi_ddiv+0xe2>
 8000574:	e1c4      	b.n	8000900 <__aeabi_ddiv+0x46c>
 8000576:	d100      	bne.n	800057a <__aeabi_ddiv+0xe6>
 8000578:	e1bf      	b.n	80008fa <__aeabi_ddiv+0x466>
 800057a:	2301      	movs	r3, #1
 800057c:	425b      	negs	r3, r3
 800057e:	469c      	mov	ip, r3
 8000580:	002e      	movs	r6, r5
 8000582:	4640      	mov	r0, r8
 8000584:	2500      	movs	r5, #0
 8000586:	44e3      	add	fp, ip
 8000588:	0223      	lsls	r3, r4, #8
 800058a:	0e0c      	lsrs	r4, r1, #24
 800058c:	431c      	orrs	r4, r3
 800058e:	0c1b      	lsrs	r3, r3, #16
 8000590:	4699      	mov	r9, r3
 8000592:	0423      	lsls	r3, r4, #16
 8000594:	020a      	lsls	r2, r1, #8
 8000596:	0c1f      	lsrs	r7, r3, #16
 8000598:	4649      	mov	r1, r9
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	9701      	str	r7, [sp, #4]
 800059e:	f7ff fe37 	bl	8000210 <__aeabi_uidivmod>
 80005a2:	0002      	movs	r2, r0
 80005a4:	437a      	muls	r2, r7
 80005a6:	040b      	lsls	r3, r1, #16
 80005a8:	0c31      	lsrs	r1, r6, #16
 80005aa:	4680      	mov	r8, r0
 80005ac:	4319      	orrs	r1, r3
 80005ae:	428a      	cmp	r2, r1
 80005b0:	d907      	bls.n	80005c2 <__aeabi_ddiv+0x12e>
 80005b2:	2301      	movs	r3, #1
 80005b4:	425b      	negs	r3, r3
 80005b6:	469c      	mov	ip, r3
 80005b8:	1909      	adds	r1, r1, r4
 80005ba:	44e0      	add	r8, ip
 80005bc:	428c      	cmp	r4, r1
 80005be:	d800      	bhi.n	80005c2 <__aeabi_ddiv+0x12e>
 80005c0:	e201      	b.n	80009c6 <__aeabi_ddiv+0x532>
 80005c2:	1a88      	subs	r0, r1, r2
 80005c4:	4649      	mov	r1, r9
 80005c6:	f7ff fe23 	bl	8000210 <__aeabi_uidivmod>
 80005ca:	9a01      	ldr	r2, [sp, #4]
 80005cc:	0436      	lsls	r6, r6, #16
 80005ce:	4342      	muls	r2, r0
 80005d0:	0409      	lsls	r1, r1, #16
 80005d2:	0c36      	lsrs	r6, r6, #16
 80005d4:	0003      	movs	r3, r0
 80005d6:	430e      	orrs	r6, r1
 80005d8:	42b2      	cmp	r2, r6
 80005da:	d904      	bls.n	80005e6 <__aeabi_ddiv+0x152>
 80005dc:	1936      	adds	r6, r6, r4
 80005de:	3b01      	subs	r3, #1
 80005e0:	42b4      	cmp	r4, r6
 80005e2:	d800      	bhi.n	80005e6 <__aeabi_ddiv+0x152>
 80005e4:	e1e9      	b.n	80009ba <__aeabi_ddiv+0x526>
 80005e6:	1ab0      	subs	r0, r6, r2
 80005e8:	4642      	mov	r2, r8
 80005ea:	9e00      	ldr	r6, [sp, #0]
 80005ec:	0412      	lsls	r2, r2, #16
 80005ee:	431a      	orrs	r2, r3
 80005f0:	0c33      	lsrs	r3, r6, #16
 80005f2:	001f      	movs	r7, r3
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	4690      	mov	r8, r2
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	0413      	lsls	r3, r2, #16
 80005fc:	0432      	lsls	r2, r6, #16
 80005fe:	0c16      	lsrs	r6, r2, #16
 8000600:	0032      	movs	r2, r6
 8000602:	0c1b      	lsrs	r3, r3, #16
 8000604:	435a      	muls	r2, r3
 8000606:	9603      	str	r6, [sp, #12]
 8000608:	437b      	muls	r3, r7
 800060a:	434e      	muls	r6, r1
 800060c:	4379      	muls	r1, r7
 800060e:	0c17      	lsrs	r7, r2, #16
 8000610:	46bc      	mov	ip, r7
 8000612:	199b      	adds	r3, r3, r6
 8000614:	4463      	add	r3, ip
 8000616:	429e      	cmp	r6, r3
 8000618:	d903      	bls.n	8000622 <__aeabi_ddiv+0x18e>
 800061a:	2680      	movs	r6, #128	; 0x80
 800061c:	0276      	lsls	r6, r6, #9
 800061e:	46b4      	mov	ip, r6
 8000620:	4461      	add	r1, ip
 8000622:	0c1e      	lsrs	r6, r3, #16
 8000624:	1871      	adds	r1, r6, r1
 8000626:	0416      	lsls	r6, r2, #16
 8000628:	041b      	lsls	r3, r3, #16
 800062a:	0c36      	lsrs	r6, r6, #16
 800062c:	199e      	adds	r6, r3, r6
 800062e:	4288      	cmp	r0, r1
 8000630:	d302      	bcc.n	8000638 <__aeabi_ddiv+0x1a4>
 8000632:	d112      	bne.n	800065a <__aeabi_ddiv+0x1c6>
 8000634:	42b5      	cmp	r5, r6
 8000636:	d210      	bcs.n	800065a <__aeabi_ddiv+0x1c6>
 8000638:	4643      	mov	r3, r8
 800063a:	1e5a      	subs	r2, r3, #1
 800063c:	9b00      	ldr	r3, [sp, #0]
 800063e:	469c      	mov	ip, r3
 8000640:	4465      	add	r5, ip
 8000642:	001f      	movs	r7, r3
 8000644:	429d      	cmp	r5, r3
 8000646:	419b      	sbcs	r3, r3
 8000648:	425b      	negs	r3, r3
 800064a:	191b      	adds	r3, r3, r4
 800064c:	18c0      	adds	r0, r0, r3
 800064e:	4284      	cmp	r4, r0
 8000650:	d200      	bcs.n	8000654 <__aeabi_ddiv+0x1c0>
 8000652:	e19e      	b.n	8000992 <__aeabi_ddiv+0x4fe>
 8000654:	d100      	bne.n	8000658 <__aeabi_ddiv+0x1c4>
 8000656:	e199      	b.n	800098c <__aeabi_ddiv+0x4f8>
 8000658:	4690      	mov	r8, r2
 800065a:	1bae      	subs	r6, r5, r6
 800065c:	42b5      	cmp	r5, r6
 800065e:	41ad      	sbcs	r5, r5
 8000660:	1a40      	subs	r0, r0, r1
 8000662:	426d      	negs	r5, r5
 8000664:	1b40      	subs	r0, r0, r5
 8000666:	4284      	cmp	r4, r0
 8000668:	d100      	bne.n	800066c <__aeabi_ddiv+0x1d8>
 800066a:	e1d2      	b.n	8000a12 <__aeabi_ddiv+0x57e>
 800066c:	4649      	mov	r1, r9
 800066e:	f7ff fdcf 	bl	8000210 <__aeabi_uidivmod>
 8000672:	9a01      	ldr	r2, [sp, #4]
 8000674:	040b      	lsls	r3, r1, #16
 8000676:	4342      	muls	r2, r0
 8000678:	0c31      	lsrs	r1, r6, #16
 800067a:	0005      	movs	r5, r0
 800067c:	4319      	orrs	r1, r3
 800067e:	428a      	cmp	r2, r1
 8000680:	d900      	bls.n	8000684 <__aeabi_ddiv+0x1f0>
 8000682:	e16c      	b.n	800095e <__aeabi_ddiv+0x4ca>
 8000684:	1a88      	subs	r0, r1, r2
 8000686:	4649      	mov	r1, r9
 8000688:	f7ff fdc2 	bl	8000210 <__aeabi_uidivmod>
 800068c:	9a01      	ldr	r2, [sp, #4]
 800068e:	0436      	lsls	r6, r6, #16
 8000690:	4342      	muls	r2, r0
 8000692:	0409      	lsls	r1, r1, #16
 8000694:	0c36      	lsrs	r6, r6, #16
 8000696:	0003      	movs	r3, r0
 8000698:	430e      	orrs	r6, r1
 800069a:	42b2      	cmp	r2, r6
 800069c:	d900      	bls.n	80006a0 <__aeabi_ddiv+0x20c>
 800069e:	e153      	b.n	8000948 <__aeabi_ddiv+0x4b4>
 80006a0:	9803      	ldr	r0, [sp, #12]
 80006a2:	1ab6      	subs	r6, r6, r2
 80006a4:	0002      	movs	r2, r0
 80006a6:	042d      	lsls	r5, r5, #16
 80006a8:	431d      	orrs	r5, r3
 80006aa:	9f02      	ldr	r7, [sp, #8]
 80006ac:	042b      	lsls	r3, r5, #16
 80006ae:	0c1b      	lsrs	r3, r3, #16
 80006b0:	435a      	muls	r2, r3
 80006b2:	437b      	muls	r3, r7
 80006b4:	469c      	mov	ip, r3
 80006b6:	0c29      	lsrs	r1, r5, #16
 80006b8:	4348      	muls	r0, r1
 80006ba:	0c13      	lsrs	r3, r2, #16
 80006bc:	4484      	add	ip, r0
 80006be:	4463      	add	r3, ip
 80006c0:	4379      	muls	r1, r7
 80006c2:	4298      	cmp	r0, r3
 80006c4:	d903      	bls.n	80006ce <__aeabi_ddiv+0x23a>
 80006c6:	2080      	movs	r0, #128	; 0x80
 80006c8:	0240      	lsls	r0, r0, #9
 80006ca:	4684      	mov	ip, r0
 80006cc:	4461      	add	r1, ip
 80006ce:	0c18      	lsrs	r0, r3, #16
 80006d0:	0412      	lsls	r2, r2, #16
 80006d2:	041b      	lsls	r3, r3, #16
 80006d4:	0c12      	lsrs	r2, r2, #16
 80006d6:	1840      	adds	r0, r0, r1
 80006d8:	189b      	adds	r3, r3, r2
 80006da:	4286      	cmp	r6, r0
 80006dc:	d200      	bcs.n	80006e0 <__aeabi_ddiv+0x24c>
 80006de:	e100      	b.n	80008e2 <__aeabi_ddiv+0x44e>
 80006e0:	d100      	bne.n	80006e4 <__aeabi_ddiv+0x250>
 80006e2:	e0fb      	b.n	80008dc <__aeabi_ddiv+0x448>
 80006e4:	2301      	movs	r3, #1
 80006e6:	431d      	orrs	r5, r3
 80006e8:	4b49      	ldr	r3, [pc, #292]	; (8000810 <__aeabi_ddiv+0x37c>)
 80006ea:	445b      	add	r3, fp
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	dc00      	bgt.n	80006f2 <__aeabi_ddiv+0x25e>
 80006f0:	e0aa      	b.n	8000848 <__aeabi_ddiv+0x3b4>
 80006f2:	076a      	lsls	r2, r5, #29
 80006f4:	d000      	beq.n	80006f8 <__aeabi_ddiv+0x264>
 80006f6:	e13d      	b.n	8000974 <__aeabi_ddiv+0x4e0>
 80006f8:	08e9      	lsrs	r1, r5, #3
 80006fa:	4642      	mov	r2, r8
 80006fc:	01d2      	lsls	r2, r2, #7
 80006fe:	d506      	bpl.n	800070e <__aeabi_ddiv+0x27a>
 8000700:	4642      	mov	r2, r8
 8000702:	4b44      	ldr	r3, [pc, #272]	; (8000814 <__aeabi_ddiv+0x380>)
 8000704:	401a      	ands	r2, r3
 8000706:	2380      	movs	r3, #128	; 0x80
 8000708:	4690      	mov	r8, r2
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	445b      	add	r3, fp
 800070e:	4a42      	ldr	r2, [pc, #264]	; (8000818 <__aeabi_ddiv+0x384>)
 8000710:	4293      	cmp	r3, r2
 8000712:	dd00      	ble.n	8000716 <__aeabi_ddiv+0x282>
 8000714:	e723      	b.n	800055e <__aeabi_ddiv+0xca>
 8000716:	4642      	mov	r2, r8
 8000718:	055b      	lsls	r3, r3, #21
 800071a:	0755      	lsls	r5, r2, #29
 800071c:	0252      	lsls	r2, r2, #9
 800071e:	430d      	orrs	r5, r1
 8000720:	0b12      	lsrs	r2, r2, #12
 8000722:	0d5b      	lsrs	r3, r3, #21
 8000724:	e70d      	b.n	8000542 <__aeabi_ddiv+0xae>
 8000726:	4651      	mov	r1, sl
 8000728:	4321      	orrs	r1, r4
 800072a:	d100      	bne.n	800072e <__aeabi_ddiv+0x29a>
 800072c:	e07c      	b.n	8000828 <__aeabi_ddiv+0x394>
 800072e:	2c00      	cmp	r4, #0
 8000730:	d100      	bne.n	8000734 <__aeabi_ddiv+0x2a0>
 8000732:	e0fb      	b.n	800092c <__aeabi_ddiv+0x498>
 8000734:	0020      	movs	r0, r4
 8000736:	f001 f8dd 	bl	80018f4 <__clzsi2>
 800073a:	0002      	movs	r2, r0
 800073c:	3a0b      	subs	r2, #11
 800073e:	231d      	movs	r3, #29
 8000740:	1a9b      	subs	r3, r3, r2
 8000742:	4652      	mov	r2, sl
 8000744:	0001      	movs	r1, r0
 8000746:	40da      	lsrs	r2, r3
 8000748:	4653      	mov	r3, sl
 800074a:	3908      	subs	r1, #8
 800074c:	408b      	lsls	r3, r1
 800074e:	408c      	lsls	r4, r1
 8000750:	0019      	movs	r1, r3
 8000752:	4314      	orrs	r4, r2
 8000754:	4b31      	ldr	r3, [pc, #196]	; (800081c <__aeabi_ddiv+0x388>)
 8000756:	4458      	add	r0, fp
 8000758:	469b      	mov	fp, r3
 800075a:	4483      	add	fp, r0
 800075c:	2000      	movs	r0, #0
 800075e:	e6d9      	b.n	8000514 <__aeabi_ddiv+0x80>
 8000760:	0003      	movs	r3, r0
 8000762:	4323      	orrs	r3, r4
 8000764:	4698      	mov	r8, r3
 8000766:	d044      	beq.n	80007f2 <__aeabi_ddiv+0x35e>
 8000768:	2c00      	cmp	r4, #0
 800076a:	d100      	bne.n	800076e <__aeabi_ddiv+0x2da>
 800076c:	e0cf      	b.n	800090e <__aeabi_ddiv+0x47a>
 800076e:	0020      	movs	r0, r4
 8000770:	f001 f8c0 	bl	80018f4 <__clzsi2>
 8000774:	0001      	movs	r1, r0
 8000776:	0002      	movs	r2, r0
 8000778:	390b      	subs	r1, #11
 800077a:	231d      	movs	r3, #29
 800077c:	1a5b      	subs	r3, r3, r1
 800077e:	4649      	mov	r1, r9
 8000780:	0010      	movs	r0, r2
 8000782:	40d9      	lsrs	r1, r3
 8000784:	3808      	subs	r0, #8
 8000786:	4084      	lsls	r4, r0
 8000788:	000b      	movs	r3, r1
 800078a:	464d      	mov	r5, r9
 800078c:	4323      	orrs	r3, r4
 800078e:	4698      	mov	r8, r3
 8000790:	4085      	lsls	r5, r0
 8000792:	4b23      	ldr	r3, [pc, #140]	; (8000820 <__aeabi_ddiv+0x38c>)
 8000794:	1a9b      	subs	r3, r3, r2
 8000796:	469b      	mov	fp, r3
 8000798:	2300      	movs	r3, #0
 800079a:	4699      	mov	r9, r3
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e69e      	b.n	80004de <__aeabi_ddiv+0x4a>
 80007a0:	0002      	movs	r2, r0
 80007a2:	4322      	orrs	r2, r4
 80007a4:	4690      	mov	r8, r2
 80007a6:	d11d      	bne.n	80007e4 <__aeabi_ddiv+0x350>
 80007a8:	2208      	movs	r2, #8
 80007aa:	469b      	mov	fp, r3
 80007ac:	2302      	movs	r3, #2
 80007ae:	2500      	movs	r5, #0
 80007b0:	4691      	mov	r9, r2
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	e693      	b.n	80004de <__aeabi_ddiv+0x4a>
 80007b6:	4651      	mov	r1, sl
 80007b8:	4321      	orrs	r1, r4
 80007ba:	d109      	bne.n	80007d0 <__aeabi_ddiv+0x33c>
 80007bc:	2302      	movs	r3, #2
 80007be:	464a      	mov	r2, r9
 80007c0:	431a      	orrs	r2, r3
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <__aeabi_ddiv+0x390>)
 80007c4:	4691      	mov	r9, r2
 80007c6:	469c      	mov	ip, r3
 80007c8:	2400      	movs	r4, #0
 80007ca:	2002      	movs	r0, #2
 80007cc:	44e3      	add	fp, ip
 80007ce:	e6a1      	b.n	8000514 <__aeabi_ddiv+0x80>
 80007d0:	2303      	movs	r3, #3
 80007d2:	464a      	mov	r2, r9
 80007d4:	431a      	orrs	r2, r3
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <__aeabi_ddiv+0x390>)
 80007d8:	4691      	mov	r9, r2
 80007da:	469c      	mov	ip, r3
 80007dc:	4651      	mov	r1, sl
 80007de:	2003      	movs	r0, #3
 80007e0:	44e3      	add	fp, ip
 80007e2:	e697      	b.n	8000514 <__aeabi_ddiv+0x80>
 80007e4:	220c      	movs	r2, #12
 80007e6:	469b      	mov	fp, r3
 80007e8:	2303      	movs	r3, #3
 80007ea:	46a0      	mov	r8, r4
 80007ec:	4691      	mov	r9, r2
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	e675      	b.n	80004de <__aeabi_ddiv+0x4a>
 80007f2:	2304      	movs	r3, #4
 80007f4:	4699      	mov	r9, r3
 80007f6:	2300      	movs	r3, #0
 80007f8:	469b      	mov	fp, r3
 80007fa:	3301      	adds	r3, #1
 80007fc:	2500      	movs	r5, #0
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	e66d      	b.n	80004de <__aeabi_ddiv+0x4a>
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	000007ff 	.word	0x000007ff
 8000808:	fffffc01 	.word	0xfffffc01
 800080c:	080048f4 	.word	0x080048f4
 8000810:	000003ff 	.word	0x000003ff
 8000814:	feffffff 	.word	0xfeffffff
 8000818:	000007fe 	.word	0x000007fe
 800081c:	000003f3 	.word	0x000003f3
 8000820:	fffffc0d 	.word	0xfffffc0d
 8000824:	fffff801 	.word	0xfffff801
 8000828:	464a      	mov	r2, r9
 800082a:	2301      	movs	r3, #1
 800082c:	431a      	orrs	r2, r3
 800082e:	4691      	mov	r9, r2
 8000830:	2400      	movs	r4, #0
 8000832:	2001      	movs	r0, #1
 8000834:	e66e      	b.n	8000514 <__aeabi_ddiv+0x80>
 8000836:	2300      	movs	r3, #0
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	469a      	mov	sl, r3
 800083c:	2500      	movs	r5, #0
 800083e:	4b88      	ldr	r3, [pc, #544]	; (8000a60 <__aeabi_ddiv+0x5cc>)
 8000840:	0312      	lsls	r2, r2, #12
 8000842:	e67e      	b.n	8000542 <__aeabi_ddiv+0xae>
 8000844:	2501      	movs	r5, #1
 8000846:	426d      	negs	r5, r5
 8000848:	2201      	movs	r2, #1
 800084a:	1ad2      	subs	r2, r2, r3
 800084c:	2a38      	cmp	r2, #56	; 0x38
 800084e:	dd00      	ble.n	8000852 <__aeabi_ddiv+0x3be>
 8000850:	e674      	b.n	800053c <__aeabi_ddiv+0xa8>
 8000852:	2a1f      	cmp	r2, #31
 8000854:	dc00      	bgt.n	8000858 <__aeabi_ddiv+0x3c4>
 8000856:	e0bd      	b.n	80009d4 <__aeabi_ddiv+0x540>
 8000858:	211f      	movs	r1, #31
 800085a:	4249      	negs	r1, r1
 800085c:	1acb      	subs	r3, r1, r3
 800085e:	4641      	mov	r1, r8
 8000860:	40d9      	lsrs	r1, r3
 8000862:	000b      	movs	r3, r1
 8000864:	2a20      	cmp	r2, #32
 8000866:	d004      	beq.n	8000872 <__aeabi_ddiv+0x3de>
 8000868:	4641      	mov	r1, r8
 800086a:	4a7e      	ldr	r2, [pc, #504]	; (8000a64 <__aeabi_ddiv+0x5d0>)
 800086c:	445a      	add	r2, fp
 800086e:	4091      	lsls	r1, r2
 8000870:	430d      	orrs	r5, r1
 8000872:	0029      	movs	r1, r5
 8000874:	1e4a      	subs	r2, r1, #1
 8000876:	4191      	sbcs	r1, r2
 8000878:	4319      	orrs	r1, r3
 800087a:	2307      	movs	r3, #7
 800087c:	001d      	movs	r5, r3
 800087e:	2200      	movs	r2, #0
 8000880:	400d      	ands	r5, r1
 8000882:	420b      	tst	r3, r1
 8000884:	d100      	bne.n	8000888 <__aeabi_ddiv+0x3f4>
 8000886:	e0d0      	b.n	8000a2a <__aeabi_ddiv+0x596>
 8000888:	220f      	movs	r2, #15
 800088a:	2300      	movs	r3, #0
 800088c:	400a      	ands	r2, r1
 800088e:	2a04      	cmp	r2, #4
 8000890:	d100      	bne.n	8000894 <__aeabi_ddiv+0x400>
 8000892:	e0c7      	b.n	8000a24 <__aeabi_ddiv+0x590>
 8000894:	1d0a      	adds	r2, r1, #4
 8000896:	428a      	cmp	r2, r1
 8000898:	4189      	sbcs	r1, r1
 800089a:	4249      	negs	r1, r1
 800089c:	185b      	adds	r3, r3, r1
 800089e:	0011      	movs	r1, r2
 80008a0:	021a      	lsls	r2, r3, #8
 80008a2:	d400      	bmi.n	80008a6 <__aeabi_ddiv+0x412>
 80008a4:	e0be      	b.n	8000a24 <__aeabi_ddiv+0x590>
 80008a6:	2301      	movs	r3, #1
 80008a8:	2200      	movs	r2, #0
 80008aa:	2500      	movs	r5, #0
 80008ac:	e649      	b.n	8000542 <__aeabi_ddiv+0xae>
 80008ae:	2280      	movs	r2, #128	; 0x80
 80008b0:	4643      	mov	r3, r8
 80008b2:	0312      	lsls	r2, r2, #12
 80008b4:	4213      	tst	r3, r2
 80008b6:	d008      	beq.n	80008ca <__aeabi_ddiv+0x436>
 80008b8:	4214      	tst	r4, r2
 80008ba:	d106      	bne.n	80008ca <__aeabi_ddiv+0x436>
 80008bc:	4322      	orrs	r2, r4
 80008be:	0312      	lsls	r2, r2, #12
 80008c0:	46ba      	mov	sl, r7
 80008c2:	000d      	movs	r5, r1
 80008c4:	4b66      	ldr	r3, [pc, #408]	; (8000a60 <__aeabi_ddiv+0x5cc>)
 80008c6:	0b12      	lsrs	r2, r2, #12
 80008c8:	e63b      	b.n	8000542 <__aeabi_ddiv+0xae>
 80008ca:	2280      	movs	r2, #128	; 0x80
 80008cc:	4643      	mov	r3, r8
 80008ce:	0312      	lsls	r2, r2, #12
 80008d0:	431a      	orrs	r2, r3
 80008d2:	0312      	lsls	r2, r2, #12
 80008d4:	46b2      	mov	sl, r6
 80008d6:	4b62      	ldr	r3, [pc, #392]	; (8000a60 <__aeabi_ddiv+0x5cc>)
 80008d8:	0b12      	lsrs	r2, r2, #12
 80008da:	e632      	b.n	8000542 <__aeabi_ddiv+0xae>
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d100      	bne.n	80008e2 <__aeabi_ddiv+0x44e>
 80008e0:	e702      	b.n	80006e8 <__aeabi_ddiv+0x254>
 80008e2:	19a6      	adds	r6, r4, r6
 80008e4:	1e6a      	subs	r2, r5, #1
 80008e6:	42a6      	cmp	r6, r4
 80008e8:	d200      	bcs.n	80008ec <__aeabi_ddiv+0x458>
 80008ea:	e089      	b.n	8000a00 <__aeabi_ddiv+0x56c>
 80008ec:	4286      	cmp	r6, r0
 80008ee:	d200      	bcs.n	80008f2 <__aeabi_ddiv+0x45e>
 80008f0:	e09f      	b.n	8000a32 <__aeabi_ddiv+0x59e>
 80008f2:	d100      	bne.n	80008f6 <__aeabi_ddiv+0x462>
 80008f4:	e0af      	b.n	8000a56 <__aeabi_ddiv+0x5c2>
 80008f6:	0015      	movs	r5, r2
 80008f8:	e6f4      	b.n	80006e4 <__aeabi_ddiv+0x250>
 80008fa:	42a9      	cmp	r1, r5
 80008fc:	d900      	bls.n	8000900 <__aeabi_ddiv+0x46c>
 80008fe:	e63c      	b.n	800057a <__aeabi_ddiv+0xe6>
 8000900:	4643      	mov	r3, r8
 8000902:	07de      	lsls	r6, r3, #31
 8000904:	0858      	lsrs	r0, r3, #1
 8000906:	086b      	lsrs	r3, r5, #1
 8000908:	431e      	orrs	r6, r3
 800090a:	07ed      	lsls	r5, r5, #31
 800090c:	e63c      	b.n	8000588 <__aeabi_ddiv+0xf4>
 800090e:	f000 fff1 	bl	80018f4 <__clzsi2>
 8000912:	0001      	movs	r1, r0
 8000914:	0002      	movs	r2, r0
 8000916:	3115      	adds	r1, #21
 8000918:	3220      	adds	r2, #32
 800091a:	291c      	cmp	r1, #28
 800091c:	dc00      	bgt.n	8000920 <__aeabi_ddiv+0x48c>
 800091e:	e72c      	b.n	800077a <__aeabi_ddiv+0x2e6>
 8000920:	464b      	mov	r3, r9
 8000922:	3808      	subs	r0, #8
 8000924:	4083      	lsls	r3, r0
 8000926:	2500      	movs	r5, #0
 8000928:	4698      	mov	r8, r3
 800092a:	e732      	b.n	8000792 <__aeabi_ddiv+0x2fe>
 800092c:	f000 ffe2 	bl	80018f4 <__clzsi2>
 8000930:	0003      	movs	r3, r0
 8000932:	001a      	movs	r2, r3
 8000934:	3215      	adds	r2, #21
 8000936:	3020      	adds	r0, #32
 8000938:	2a1c      	cmp	r2, #28
 800093a:	dc00      	bgt.n	800093e <__aeabi_ddiv+0x4aa>
 800093c:	e6ff      	b.n	800073e <__aeabi_ddiv+0x2aa>
 800093e:	4654      	mov	r4, sl
 8000940:	3b08      	subs	r3, #8
 8000942:	2100      	movs	r1, #0
 8000944:	409c      	lsls	r4, r3
 8000946:	e705      	b.n	8000754 <__aeabi_ddiv+0x2c0>
 8000948:	1936      	adds	r6, r6, r4
 800094a:	3b01      	subs	r3, #1
 800094c:	42b4      	cmp	r4, r6
 800094e:	d900      	bls.n	8000952 <__aeabi_ddiv+0x4be>
 8000950:	e6a6      	b.n	80006a0 <__aeabi_ddiv+0x20c>
 8000952:	42b2      	cmp	r2, r6
 8000954:	d800      	bhi.n	8000958 <__aeabi_ddiv+0x4c4>
 8000956:	e6a3      	b.n	80006a0 <__aeabi_ddiv+0x20c>
 8000958:	1e83      	subs	r3, r0, #2
 800095a:	1936      	adds	r6, r6, r4
 800095c:	e6a0      	b.n	80006a0 <__aeabi_ddiv+0x20c>
 800095e:	1909      	adds	r1, r1, r4
 8000960:	3d01      	subs	r5, #1
 8000962:	428c      	cmp	r4, r1
 8000964:	d900      	bls.n	8000968 <__aeabi_ddiv+0x4d4>
 8000966:	e68d      	b.n	8000684 <__aeabi_ddiv+0x1f0>
 8000968:	428a      	cmp	r2, r1
 800096a:	d800      	bhi.n	800096e <__aeabi_ddiv+0x4da>
 800096c:	e68a      	b.n	8000684 <__aeabi_ddiv+0x1f0>
 800096e:	1e85      	subs	r5, r0, #2
 8000970:	1909      	adds	r1, r1, r4
 8000972:	e687      	b.n	8000684 <__aeabi_ddiv+0x1f0>
 8000974:	220f      	movs	r2, #15
 8000976:	402a      	ands	r2, r5
 8000978:	2a04      	cmp	r2, #4
 800097a:	d100      	bne.n	800097e <__aeabi_ddiv+0x4ea>
 800097c:	e6bc      	b.n	80006f8 <__aeabi_ddiv+0x264>
 800097e:	1d29      	adds	r1, r5, #4
 8000980:	42a9      	cmp	r1, r5
 8000982:	41ad      	sbcs	r5, r5
 8000984:	426d      	negs	r5, r5
 8000986:	08c9      	lsrs	r1, r1, #3
 8000988:	44a8      	add	r8, r5
 800098a:	e6b6      	b.n	80006fa <__aeabi_ddiv+0x266>
 800098c:	42af      	cmp	r7, r5
 800098e:	d900      	bls.n	8000992 <__aeabi_ddiv+0x4fe>
 8000990:	e662      	b.n	8000658 <__aeabi_ddiv+0x1c4>
 8000992:	4281      	cmp	r1, r0
 8000994:	d804      	bhi.n	80009a0 <__aeabi_ddiv+0x50c>
 8000996:	d000      	beq.n	800099a <__aeabi_ddiv+0x506>
 8000998:	e65e      	b.n	8000658 <__aeabi_ddiv+0x1c4>
 800099a:	42ae      	cmp	r6, r5
 800099c:	d800      	bhi.n	80009a0 <__aeabi_ddiv+0x50c>
 800099e:	e65b      	b.n	8000658 <__aeabi_ddiv+0x1c4>
 80009a0:	2302      	movs	r3, #2
 80009a2:	425b      	negs	r3, r3
 80009a4:	469c      	mov	ip, r3
 80009a6:	9b00      	ldr	r3, [sp, #0]
 80009a8:	44e0      	add	r8, ip
 80009aa:	469c      	mov	ip, r3
 80009ac:	4465      	add	r5, ip
 80009ae:	429d      	cmp	r5, r3
 80009b0:	419b      	sbcs	r3, r3
 80009b2:	425b      	negs	r3, r3
 80009b4:	191b      	adds	r3, r3, r4
 80009b6:	18c0      	adds	r0, r0, r3
 80009b8:	e64f      	b.n	800065a <__aeabi_ddiv+0x1c6>
 80009ba:	42b2      	cmp	r2, r6
 80009bc:	d800      	bhi.n	80009c0 <__aeabi_ddiv+0x52c>
 80009be:	e612      	b.n	80005e6 <__aeabi_ddiv+0x152>
 80009c0:	1e83      	subs	r3, r0, #2
 80009c2:	1936      	adds	r6, r6, r4
 80009c4:	e60f      	b.n	80005e6 <__aeabi_ddiv+0x152>
 80009c6:	428a      	cmp	r2, r1
 80009c8:	d800      	bhi.n	80009cc <__aeabi_ddiv+0x538>
 80009ca:	e5fa      	b.n	80005c2 <__aeabi_ddiv+0x12e>
 80009cc:	1e83      	subs	r3, r0, #2
 80009ce:	4698      	mov	r8, r3
 80009d0:	1909      	adds	r1, r1, r4
 80009d2:	e5f6      	b.n	80005c2 <__aeabi_ddiv+0x12e>
 80009d4:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <__aeabi_ddiv+0x5d4>)
 80009d6:	0028      	movs	r0, r5
 80009d8:	445b      	add	r3, fp
 80009da:	4641      	mov	r1, r8
 80009dc:	409d      	lsls	r5, r3
 80009de:	4099      	lsls	r1, r3
 80009e0:	40d0      	lsrs	r0, r2
 80009e2:	1e6b      	subs	r3, r5, #1
 80009e4:	419d      	sbcs	r5, r3
 80009e6:	4643      	mov	r3, r8
 80009e8:	4301      	orrs	r1, r0
 80009ea:	4329      	orrs	r1, r5
 80009ec:	40d3      	lsrs	r3, r2
 80009ee:	074a      	lsls	r2, r1, #29
 80009f0:	d100      	bne.n	80009f4 <__aeabi_ddiv+0x560>
 80009f2:	e755      	b.n	80008a0 <__aeabi_ddiv+0x40c>
 80009f4:	220f      	movs	r2, #15
 80009f6:	400a      	ands	r2, r1
 80009f8:	2a04      	cmp	r2, #4
 80009fa:	d000      	beq.n	80009fe <__aeabi_ddiv+0x56a>
 80009fc:	e74a      	b.n	8000894 <__aeabi_ddiv+0x400>
 80009fe:	e74f      	b.n	80008a0 <__aeabi_ddiv+0x40c>
 8000a00:	0015      	movs	r5, r2
 8000a02:	4286      	cmp	r6, r0
 8000a04:	d000      	beq.n	8000a08 <__aeabi_ddiv+0x574>
 8000a06:	e66d      	b.n	80006e4 <__aeabi_ddiv+0x250>
 8000a08:	9a00      	ldr	r2, [sp, #0]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d000      	beq.n	8000a10 <__aeabi_ddiv+0x57c>
 8000a0e:	e669      	b.n	80006e4 <__aeabi_ddiv+0x250>
 8000a10:	e66a      	b.n	80006e8 <__aeabi_ddiv+0x254>
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <__aeabi_ddiv+0x5d8>)
 8000a14:	445b      	add	r3, fp
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	dc00      	bgt.n	8000a1c <__aeabi_ddiv+0x588>
 8000a1a:	e713      	b.n	8000844 <__aeabi_ddiv+0x3b0>
 8000a1c:	2501      	movs	r5, #1
 8000a1e:	2100      	movs	r1, #0
 8000a20:	44a8      	add	r8, r5
 8000a22:	e66a      	b.n	80006fa <__aeabi_ddiv+0x266>
 8000a24:	075d      	lsls	r5, r3, #29
 8000a26:	025b      	lsls	r3, r3, #9
 8000a28:	0b1a      	lsrs	r2, r3, #12
 8000a2a:	08c9      	lsrs	r1, r1, #3
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	430d      	orrs	r5, r1
 8000a30:	e587      	b.n	8000542 <__aeabi_ddiv+0xae>
 8000a32:	9900      	ldr	r1, [sp, #0]
 8000a34:	3d02      	subs	r5, #2
 8000a36:	004a      	lsls	r2, r1, #1
 8000a38:	428a      	cmp	r2, r1
 8000a3a:	41bf      	sbcs	r7, r7
 8000a3c:	427f      	negs	r7, r7
 8000a3e:	193f      	adds	r7, r7, r4
 8000a40:	19f6      	adds	r6, r6, r7
 8000a42:	9200      	str	r2, [sp, #0]
 8000a44:	e7dd      	b.n	8000a02 <__aeabi_ddiv+0x56e>
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	4643      	mov	r3, r8
 8000a4a:	0312      	lsls	r2, r2, #12
 8000a4c:	431a      	orrs	r2, r3
 8000a4e:	0312      	lsls	r2, r2, #12
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <__aeabi_ddiv+0x5cc>)
 8000a52:	0b12      	lsrs	r2, r2, #12
 8000a54:	e575      	b.n	8000542 <__aeabi_ddiv+0xae>
 8000a56:	9900      	ldr	r1, [sp, #0]
 8000a58:	4299      	cmp	r1, r3
 8000a5a:	d3ea      	bcc.n	8000a32 <__aeabi_ddiv+0x59e>
 8000a5c:	0015      	movs	r5, r2
 8000a5e:	e7d3      	b.n	8000a08 <__aeabi_ddiv+0x574>
 8000a60:	000007ff 	.word	0x000007ff
 8000a64:	0000043e 	.word	0x0000043e
 8000a68:	0000041e 	.word	0x0000041e
 8000a6c:	000003ff 	.word	0x000003ff

08000a70 <__aeabi_dmul>:
 8000a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a72:	4645      	mov	r5, r8
 8000a74:	46de      	mov	lr, fp
 8000a76:	4657      	mov	r7, sl
 8000a78:	464e      	mov	r6, r9
 8000a7a:	b5e0      	push	{r5, r6, r7, lr}
 8000a7c:	001f      	movs	r7, r3
 8000a7e:	030b      	lsls	r3, r1, #12
 8000a80:	0b1b      	lsrs	r3, r3, #12
 8000a82:	469b      	mov	fp, r3
 8000a84:	004d      	lsls	r5, r1, #1
 8000a86:	0fcb      	lsrs	r3, r1, #31
 8000a88:	0004      	movs	r4, r0
 8000a8a:	4691      	mov	r9, r2
 8000a8c:	4698      	mov	r8, r3
 8000a8e:	b087      	sub	sp, #28
 8000a90:	0d6d      	lsrs	r5, r5, #21
 8000a92:	d100      	bne.n	8000a96 <__aeabi_dmul+0x26>
 8000a94:	e1cd      	b.n	8000e32 <__aeabi_dmul+0x3c2>
 8000a96:	4bce      	ldr	r3, [pc, #824]	; (8000dd0 <__aeabi_dmul+0x360>)
 8000a98:	429d      	cmp	r5, r3
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_dmul+0x2e>
 8000a9c:	e1e9      	b.n	8000e72 <__aeabi_dmul+0x402>
 8000a9e:	465a      	mov	r2, fp
 8000aa0:	0f43      	lsrs	r3, r0, #29
 8000aa2:	00d2      	lsls	r2, r2, #3
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	0412      	lsls	r2, r2, #16
 8000aaa:	431a      	orrs	r2, r3
 8000aac:	00c3      	lsls	r3, r0, #3
 8000aae:	469a      	mov	sl, r3
 8000ab0:	4bc8      	ldr	r3, [pc, #800]	; (8000dd4 <__aeabi_dmul+0x364>)
 8000ab2:	4693      	mov	fp, r2
 8000ab4:	469c      	mov	ip, r3
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	2600      	movs	r6, #0
 8000aba:	4465      	add	r5, ip
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	033c      	lsls	r4, r7, #12
 8000ac0:	007b      	lsls	r3, r7, #1
 8000ac2:	4648      	mov	r0, r9
 8000ac4:	0b24      	lsrs	r4, r4, #12
 8000ac6:	0d5b      	lsrs	r3, r3, #21
 8000ac8:	0fff      	lsrs	r7, r7, #31
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_dmul+0x60>
 8000ace:	e189      	b.n	8000de4 <__aeabi_dmul+0x374>
 8000ad0:	4abf      	ldr	r2, [pc, #764]	; (8000dd0 <__aeabi_dmul+0x360>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d019      	beq.n	8000b0a <__aeabi_dmul+0x9a>
 8000ad6:	0f42      	lsrs	r2, r0, #29
 8000ad8:	00e4      	lsls	r4, r4, #3
 8000ada:	4322      	orrs	r2, r4
 8000adc:	2480      	movs	r4, #128	; 0x80
 8000ade:	0424      	lsls	r4, r4, #16
 8000ae0:	4314      	orrs	r4, r2
 8000ae2:	4abc      	ldr	r2, [pc, #752]	; (8000dd4 <__aeabi_dmul+0x364>)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4694      	mov	ip, r2
 8000ae8:	4642      	mov	r2, r8
 8000aea:	4463      	add	r3, ip
 8000aec:	195b      	adds	r3, r3, r5
 8000aee:	9301      	str	r3, [sp, #4]
 8000af0:	9b01      	ldr	r3, [sp, #4]
 8000af2:	407a      	eors	r2, r7
 8000af4:	3301      	adds	r3, #1
 8000af6:	00c0      	lsls	r0, r0, #3
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	9302      	str	r3, [sp, #8]
 8000afc:	2e0a      	cmp	r6, #10
 8000afe:	dd1c      	ble.n	8000b3a <__aeabi_dmul+0xca>
 8000b00:	003a      	movs	r2, r7
 8000b02:	2e0b      	cmp	r6, #11
 8000b04:	d05e      	beq.n	8000bc4 <__aeabi_dmul+0x154>
 8000b06:	4647      	mov	r7, r8
 8000b08:	e056      	b.n	8000bb8 <__aeabi_dmul+0x148>
 8000b0a:	4649      	mov	r1, r9
 8000b0c:	4bb0      	ldr	r3, [pc, #704]	; (8000dd0 <__aeabi_dmul+0x360>)
 8000b0e:	4321      	orrs	r1, r4
 8000b10:	18eb      	adds	r3, r5, r3
 8000b12:	9301      	str	r3, [sp, #4]
 8000b14:	2900      	cmp	r1, #0
 8000b16:	d12a      	bne.n	8000b6e <__aeabi_dmul+0xfe>
 8000b18:	2080      	movs	r0, #128	; 0x80
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	0100      	lsls	r0, r0, #4
 8000b1e:	002b      	movs	r3, r5
 8000b20:	4684      	mov	ip, r0
 8000b22:	4316      	orrs	r6, r2
 8000b24:	4642      	mov	r2, r8
 8000b26:	4463      	add	r3, ip
 8000b28:	407a      	eors	r2, r7
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	9302      	str	r3, [sp, #8]
 8000b2e:	2e0a      	cmp	r6, #10
 8000b30:	dd00      	ble.n	8000b34 <__aeabi_dmul+0xc4>
 8000b32:	e231      	b.n	8000f98 <__aeabi_dmul+0x528>
 8000b34:	2000      	movs	r0, #0
 8000b36:	2400      	movs	r4, #0
 8000b38:	2102      	movs	r1, #2
 8000b3a:	2e02      	cmp	r6, #2
 8000b3c:	dc26      	bgt.n	8000b8c <__aeabi_dmul+0x11c>
 8000b3e:	3e01      	subs	r6, #1
 8000b40:	2e01      	cmp	r6, #1
 8000b42:	d852      	bhi.n	8000bea <__aeabi_dmul+0x17a>
 8000b44:	2902      	cmp	r1, #2
 8000b46:	d04c      	beq.n	8000be2 <__aeabi_dmul+0x172>
 8000b48:	2901      	cmp	r1, #1
 8000b4a:	d000      	beq.n	8000b4e <__aeabi_dmul+0xde>
 8000b4c:	e118      	b.n	8000d80 <__aeabi_dmul+0x310>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	2400      	movs	r4, #0
 8000b52:	2500      	movs	r5, #0
 8000b54:	051b      	lsls	r3, r3, #20
 8000b56:	4323      	orrs	r3, r4
 8000b58:	07d2      	lsls	r2, r2, #31
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	0028      	movs	r0, r5
 8000b5e:	0019      	movs	r1, r3
 8000b60:	b007      	add	sp, #28
 8000b62:	bcf0      	pop	{r4, r5, r6, r7}
 8000b64:	46bb      	mov	fp, r7
 8000b66:	46b2      	mov	sl, r6
 8000b68:	46a9      	mov	r9, r5
 8000b6a:	46a0      	mov	r8, r4
 8000b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b6e:	2180      	movs	r1, #128	; 0x80
 8000b70:	2203      	movs	r2, #3
 8000b72:	0109      	lsls	r1, r1, #4
 8000b74:	002b      	movs	r3, r5
 8000b76:	468c      	mov	ip, r1
 8000b78:	4316      	orrs	r6, r2
 8000b7a:	4642      	mov	r2, r8
 8000b7c:	4463      	add	r3, ip
 8000b7e:	407a      	eors	r2, r7
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	9302      	str	r3, [sp, #8]
 8000b84:	2e0a      	cmp	r6, #10
 8000b86:	dd00      	ble.n	8000b8a <__aeabi_dmul+0x11a>
 8000b88:	e228      	b.n	8000fdc <__aeabi_dmul+0x56c>
 8000b8a:	2103      	movs	r1, #3
 8000b8c:	2501      	movs	r5, #1
 8000b8e:	40b5      	lsls	r5, r6
 8000b90:	46ac      	mov	ip, r5
 8000b92:	26a6      	movs	r6, #166	; 0xa6
 8000b94:	4663      	mov	r3, ip
 8000b96:	00f6      	lsls	r6, r6, #3
 8000b98:	4035      	ands	r5, r6
 8000b9a:	4233      	tst	r3, r6
 8000b9c:	d10b      	bne.n	8000bb6 <__aeabi_dmul+0x146>
 8000b9e:	2690      	movs	r6, #144	; 0x90
 8000ba0:	00b6      	lsls	r6, r6, #2
 8000ba2:	4233      	tst	r3, r6
 8000ba4:	d118      	bne.n	8000bd8 <__aeabi_dmul+0x168>
 8000ba6:	3eb9      	subs	r6, #185	; 0xb9
 8000ba8:	3eff      	subs	r6, #255	; 0xff
 8000baa:	421e      	tst	r6, r3
 8000bac:	d01d      	beq.n	8000bea <__aeabi_dmul+0x17a>
 8000bae:	46a3      	mov	fp, r4
 8000bb0:	4682      	mov	sl, r0
 8000bb2:	9100      	str	r1, [sp, #0]
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_dmul+0x148>
 8000bb6:	0017      	movs	r7, r2
 8000bb8:	9900      	ldr	r1, [sp, #0]
 8000bba:	003a      	movs	r2, r7
 8000bbc:	2902      	cmp	r1, #2
 8000bbe:	d010      	beq.n	8000be2 <__aeabi_dmul+0x172>
 8000bc0:	465c      	mov	r4, fp
 8000bc2:	4650      	mov	r0, sl
 8000bc4:	2903      	cmp	r1, #3
 8000bc6:	d1bf      	bne.n	8000b48 <__aeabi_dmul+0xd8>
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	031b      	lsls	r3, r3, #12
 8000bcc:	431c      	orrs	r4, r3
 8000bce:	0324      	lsls	r4, r4, #12
 8000bd0:	0005      	movs	r5, r0
 8000bd2:	4b7f      	ldr	r3, [pc, #508]	; (8000dd0 <__aeabi_dmul+0x360>)
 8000bd4:	0b24      	lsrs	r4, r4, #12
 8000bd6:	e7bd      	b.n	8000b54 <__aeabi_dmul+0xe4>
 8000bd8:	2480      	movs	r4, #128	; 0x80
 8000bda:	2200      	movs	r2, #0
 8000bdc:	4b7c      	ldr	r3, [pc, #496]	; (8000dd0 <__aeabi_dmul+0x360>)
 8000bde:	0324      	lsls	r4, r4, #12
 8000be0:	e7b8      	b.n	8000b54 <__aeabi_dmul+0xe4>
 8000be2:	2400      	movs	r4, #0
 8000be4:	2500      	movs	r5, #0
 8000be6:	4b7a      	ldr	r3, [pc, #488]	; (8000dd0 <__aeabi_dmul+0x360>)
 8000be8:	e7b4      	b.n	8000b54 <__aeabi_dmul+0xe4>
 8000bea:	4653      	mov	r3, sl
 8000bec:	041e      	lsls	r6, r3, #16
 8000bee:	0c36      	lsrs	r6, r6, #16
 8000bf0:	0c1f      	lsrs	r7, r3, #16
 8000bf2:	0033      	movs	r3, r6
 8000bf4:	0c01      	lsrs	r1, r0, #16
 8000bf6:	0400      	lsls	r0, r0, #16
 8000bf8:	0c00      	lsrs	r0, r0, #16
 8000bfa:	4343      	muls	r3, r0
 8000bfc:	4698      	mov	r8, r3
 8000bfe:	0003      	movs	r3, r0
 8000c00:	437b      	muls	r3, r7
 8000c02:	4699      	mov	r9, r3
 8000c04:	0033      	movs	r3, r6
 8000c06:	434b      	muls	r3, r1
 8000c08:	469c      	mov	ip, r3
 8000c0a:	4643      	mov	r3, r8
 8000c0c:	000d      	movs	r5, r1
 8000c0e:	0c1b      	lsrs	r3, r3, #16
 8000c10:	469a      	mov	sl, r3
 8000c12:	437d      	muls	r5, r7
 8000c14:	44cc      	add	ip, r9
 8000c16:	44d4      	add	ip, sl
 8000c18:	9500      	str	r5, [sp, #0]
 8000c1a:	45e1      	cmp	r9, ip
 8000c1c:	d904      	bls.n	8000c28 <__aeabi_dmul+0x1b8>
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	025b      	lsls	r3, r3, #9
 8000c22:	4699      	mov	r9, r3
 8000c24:	444d      	add	r5, r9
 8000c26:	9500      	str	r5, [sp, #0]
 8000c28:	4663      	mov	r3, ip
 8000c2a:	0c1b      	lsrs	r3, r3, #16
 8000c2c:	001d      	movs	r5, r3
 8000c2e:	4663      	mov	r3, ip
 8000c30:	041b      	lsls	r3, r3, #16
 8000c32:	469c      	mov	ip, r3
 8000c34:	4643      	mov	r3, r8
 8000c36:	041b      	lsls	r3, r3, #16
 8000c38:	0c1b      	lsrs	r3, r3, #16
 8000c3a:	4698      	mov	r8, r3
 8000c3c:	4663      	mov	r3, ip
 8000c3e:	4443      	add	r3, r8
 8000c40:	9303      	str	r3, [sp, #12]
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	4698      	mov	r8, r3
 8000c46:	0033      	movs	r3, r6
 8000c48:	0424      	lsls	r4, r4, #16
 8000c4a:	0c24      	lsrs	r4, r4, #16
 8000c4c:	4363      	muls	r3, r4
 8000c4e:	469c      	mov	ip, r3
 8000c50:	0023      	movs	r3, r4
 8000c52:	437b      	muls	r3, r7
 8000c54:	4699      	mov	r9, r3
 8000c56:	4643      	mov	r3, r8
 8000c58:	435e      	muls	r6, r3
 8000c5a:	435f      	muls	r7, r3
 8000c5c:	444e      	add	r6, r9
 8000c5e:	4663      	mov	r3, ip
 8000c60:	46b2      	mov	sl, r6
 8000c62:	0c1e      	lsrs	r6, r3, #16
 8000c64:	4456      	add	r6, sl
 8000c66:	45b1      	cmp	r9, r6
 8000c68:	d903      	bls.n	8000c72 <__aeabi_dmul+0x202>
 8000c6a:	2380      	movs	r3, #128	; 0x80
 8000c6c:	025b      	lsls	r3, r3, #9
 8000c6e:	4699      	mov	r9, r3
 8000c70:	444f      	add	r7, r9
 8000c72:	0c33      	lsrs	r3, r6, #16
 8000c74:	4699      	mov	r9, r3
 8000c76:	003b      	movs	r3, r7
 8000c78:	444b      	add	r3, r9
 8000c7a:	9305      	str	r3, [sp, #20]
 8000c7c:	4663      	mov	r3, ip
 8000c7e:	46ac      	mov	ip, r5
 8000c80:	041f      	lsls	r7, r3, #16
 8000c82:	0c3f      	lsrs	r7, r7, #16
 8000c84:	0436      	lsls	r6, r6, #16
 8000c86:	19f6      	adds	r6, r6, r7
 8000c88:	44b4      	add	ip, r6
 8000c8a:	4663      	mov	r3, ip
 8000c8c:	9304      	str	r3, [sp, #16]
 8000c8e:	465b      	mov	r3, fp
 8000c90:	0c1b      	lsrs	r3, r3, #16
 8000c92:	469c      	mov	ip, r3
 8000c94:	465b      	mov	r3, fp
 8000c96:	041f      	lsls	r7, r3, #16
 8000c98:	0c3f      	lsrs	r7, r7, #16
 8000c9a:	003b      	movs	r3, r7
 8000c9c:	4343      	muls	r3, r0
 8000c9e:	4699      	mov	r9, r3
 8000ca0:	4663      	mov	r3, ip
 8000ca2:	4343      	muls	r3, r0
 8000ca4:	469a      	mov	sl, r3
 8000ca6:	464b      	mov	r3, r9
 8000ca8:	4660      	mov	r0, ip
 8000caa:	0c1b      	lsrs	r3, r3, #16
 8000cac:	469b      	mov	fp, r3
 8000cae:	4348      	muls	r0, r1
 8000cb0:	4379      	muls	r1, r7
 8000cb2:	4451      	add	r1, sl
 8000cb4:	4459      	add	r1, fp
 8000cb6:	458a      	cmp	sl, r1
 8000cb8:	d903      	bls.n	8000cc2 <__aeabi_dmul+0x252>
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	025b      	lsls	r3, r3, #9
 8000cbe:	469a      	mov	sl, r3
 8000cc0:	4450      	add	r0, sl
 8000cc2:	0c0b      	lsrs	r3, r1, #16
 8000cc4:	469a      	mov	sl, r3
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	041b      	lsls	r3, r3, #16
 8000cca:	0c1b      	lsrs	r3, r3, #16
 8000ccc:	4699      	mov	r9, r3
 8000cce:	003b      	movs	r3, r7
 8000cd0:	4363      	muls	r3, r4
 8000cd2:	0409      	lsls	r1, r1, #16
 8000cd4:	4645      	mov	r5, r8
 8000cd6:	4449      	add	r1, r9
 8000cd8:	4699      	mov	r9, r3
 8000cda:	4663      	mov	r3, ip
 8000cdc:	435c      	muls	r4, r3
 8000cde:	436b      	muls	r3, r5
 8000ce0:	469c      	mov	ip, r3
 8000ce2:	464b      	mov	r3, r9
 8000ce4:	0c1b      	lsrs	r3, r3, #16
 8000ce6:	4698      	mov	r8, r3
 8000ce8:	436f      	muls	r7, r5
 8000cea:	193f      	adds	r7, r7, r4
 8000cec:	4447      	add	r7, r8
 8000cee:	4450      	add	r0, sl
 8000cf0:	42bc      	cmp	r4, r7
 8000cf2:	d903      	bls.n	8000cfc <__aeabi_dmul+0x28c>
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	025b      	lsls	r3, r3, #9
 8000cf8:	4698      	mov	r8, r3
 8000cfa:	44c4      	add	ip, r8
 8000cfc:	9b04      	ldr	r3, [sp, #16]
 8000cfe:	9d00      	ldr	r5, [sp, #0]
 8000d00:	4698      	mov	r8, r3
 8000d02:	4445      	add	r5, r8
 8000d04:	42b5      	cmp	r5, r6
 8000d06:	41b6      	sbcs	r6, r6
 8000d08:	4273      	negs	r3, r6
 8000d0a:	4698      	mov	r8, r3
 8000d0c:	464b      	mov	r3, r9
 8000d0e:	041e      	lsls	r6, r3, #16
 8000d10:	9b05      	ldr	r3, [sp, #20]
 8000d12:	043c      	lsls	r4, r7, #16
 8000d14:	4699      	mov	r9, r3
 8000d16:	0c36      	lsrs	r6, r6, #16
 8000d18:	19a4      	adds	r4, r4, r6
 8000d1a:	444c      	add	r4, r9
 8000d1c:	46a1      	mov	r9, r4
 8000d1e:	4683      	mov	fp, r0
 8000d20:	186e      	adds	r6, r5, r1
 8000d22:	44c1      	add	r9, r8
 8000d24:	428e      	cmp	r6, r1
 8000d26:	4189      	sbcs	r1, r1
 8000d28:	44cb      	add	fp, r9
 8000d2a:	465d      	mov	r5, fp
 8000d2c:	4249      	negs	r1, r1
 8000d2e:	186d      	adds	r5, r5, r1
 8000d30:	429c      	cmp	r4, r3
 8000d32:	41a4      	sbcs	r4, r4
 8000d34:	45c1      	cmp	r9, r8
 8000d36:	419b      	sbcs	r3, r3
 8000d38:	4583      	cmp	fp, r0
 8000d3a:	4180      	sbcs	r0, r0
 8000d3c:	428d      	cmp	r5, r1
 8000d3e:	4189      	sbcs	r1, r1
 8000d40:	425b      	negs	r3, r3
 8000d42:	4264      	negs	r4, r4
 8000d44:	431c      	orrs	r4, r3
 8000d46:	4240      	negs	r0, r0
 8000d48:	9b03      	ldr	r3, [sp, #12]
 8000d4a:	4249      	negs	r1, r1
 8000d4c:	4301      	orrs	r1, r0
 8000d4e:	0270      	lsls	r0, r6, #9
 8000d50:	0c3f      	lsrs	r7, r7, #16
 8000d52:	4318      	orrs	r0, r3
 8000d54:	19e4      	adds	r4, r4, r7
 8000d56:	1e47      	subs	r7, r0, #1
 8000d58:	41b8      	sbcs	r0, r7
 8000d5a:	1864      	adds	r4, r4, r1
 8000d5c:	4464      	add	r4, ip
 8000d5e:	0df6      	lsrs	r6, r6, #23
 8000d60:	0261      	lsls	r1, r4, #9
 8000d62:	4330      	orrs	r0, r6
 8000d64:	0dec      	lsrs	r4, r5, #23
 8000d66:	026e      	lsls	r6, r5, #9
 8000d68:	430c      	orrs	r4, r1
 8000d6a:	4330      	orrs	r0, r6
 8000d6c:	01c9      	lsls	r1, r1, #7
 8000d6e:	d400      	bmi.n	8000d72 <__aeabi_dmul+0x302>
 8000d70:	e0f1      	b.n	8000f56 <__aeabi_dmul+0x4e6>
 8000d72:	2101      	movs	r1, #1
 8000d74:	0843      	lsrs	r3, r0, #1
 8000d76:	4001      	ands	r1, r0
 8000d78:	430b      	orrs	r3, r1
 8000d7a:	07e0      	lsls	r0, r4, #31
 8000d7c:	4318      	orrs	r0, r3
 8000d7e:	0864      	lsrs	r4, r4, #1
 8000d80:	4915      	ldr	r1, [pc, #84]	; (8000dd8 <__aeabi_dmul+0x368>)
 8000d82:	9b02      	ldr	r3, [sp, #8]
 8000d84:	468c      	mov	ip, r1
 8000d86:	4463      	add	r3, ip
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	dc00      	bgt.n	8000d8e <__aeabi_dmul+0x31e>
 8000d8c:	e097      	b.n	8000ebe <__aeabi_dmul+0x44e>
 8000d8e:	0741      	lsls	r1, r0, #29
 8000d90:	d009      	beq.n	8000da6 <__aeabi_dmul+0x336>
 8000d92:	210f      	movs	r1, #15
 8000d94:	4001      	ands	r1, r0
 8000d96:	2904      	cmp	r1, #4
 8000d98:	d005      	beq.n	8000da6 <__aeabi_dmul+0x336>
 8000d9a:	1d01      	adds	r1, r0, #4
 8000d9c:	4281      	cmp	r1, r0
 8000d9e:	4180      	sbcs	r0, r0
 8000da0:	4240      	negs	r0, r0
 8000da2:	1824      	adds	r4, r4, r0
 8000da4:	0008      	movs	r0, r1
 8000da6:	01e1      	lsls	r1, r4, #7
 8000da8:	d506      	bpl.n	8000db8 <__aeabi_dmul+0x348>
 8000daa:	2180      	movs	r1, #128	; 0x80
 8000dac:	00c9      	lsls	r1, r1, #3
 8000dae:	468c      	mov	ip, r1
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <__aeabi_dmul+0x36c>)
 8000db2:	401c      	ands	r4, r3
 8000db4:	9b02      	ldr	r3, [sp, #8]
 8000db6:	4463      	add	r3, ip
 8000db8:	4909      	ldr	r1, [pc, #36]	; (8000de0 <__aeabi_dmul+0x370>)
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	dd00      	ble.n	8000dc0 <__aeabi_dmul+0x350>
 8000dbe:	e710      	b.n	8000be2 <__aeabi_dmul+0x172>
 8000dc0:	0761      	lsls	r1, r4, #29
 8000dc2:	08c5      	lsrs	r5, r0, #3
 8000dc4:	0264      	lsls	r4, r4, #9
 8000dc6:	055b      	lsls	r3, r3, #21
 8000dc8:	430d      	orrs	r5, r1
 8000dca:	0b24      	lsrs	r4, r4, #12
 8000dcc:	0d5b      	lsrs	r3, r3, #21
 8000dce:	e6c1      	b.n	8000b54 <__aeabi_dmul+0xe4>
 8000dd0:	000007ff 	.word	0x000007ff
 8000dd4:	fffffc01 	.word	0xfffffc01
 8000dd8:	000003ff 	.word	0x000003ff
 8000ddc:	feffffff 	.word	0xfeffffff
 8000de0:	000007fe 	.word	0x000007fe
 8000de4:	464b      	mov	r3, r9
 8000de6:	4323      	orrs	r3, r4
 8000de8:	d059      	beq.n	8000e9e <__aeabi_dmul+0x42e>
 8000dea:	2c00      	cmp	r4, #0
 8000dec:	d100      	bne.n	8000df0 <__aeabi_dmul+0x380>
 8000dee:	e0a3      	b.n	8000f38 <__aeabi_dmul+0x4c8>
 8000df0:	0020      	movs	r0, r4
 8000df2:	f000 fd7f 	bl	80018f4 <__clzsi2>
 8000df6:	0001      	movs	r1, r0
 8000df8:	0003      	movs	r3, r0
 8000dfa:	390b      	subs	r1, #11
 8000dfc:	221d      	movs	r2, #29
 8000dfe:	1a52      	subs	r2, r2, r1
 8000e00:	4649      	mov	r1, r9
 8000e02:	0018      	movs	r0, r3
 8000e04:	40d1      	lsrs	r1, r2
 8000e06:	464a      	mov	r2, r9
 8000e08:	3808      	subs	r0, #8
 8000e0a:	4082      	lsls	r2, r0
 8000e0c:	4084      	lsls	r4, r0
 8000e0e:	0010      	movs	r0, r2
 8000e10:	430c      	orrs	r4, r1
 8000e12:	4a74      	ldr	r2, [pc, #464]	; (8000fe4 <__aeabi_dmul+0x574>)
 8000e14:	1aeb      	subs	r3, r5, r3
 8000e16:	4694      	mov	ip, r2
 8000e18:	4642      	mov	r2, r8
 8000e1a:	4463      	add	r3, ip
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	9b01      	ldr	r3, [sp, #4]
 8000e20:	407a      	eors	r2, r7
 8000e22:	3301      	adds	r3, #1
 8000e24:	2100      	movs	r1, #0
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	9302      	str	r3, [sp, #8]
 8000e2a:	2e0a      	cmp	r6, #10
 8000e2c:	dd00      	ble.n	8000e30 <__aeabi_dmul+0x3c0>
 8000e2e:	e667      	b.n	8000b00 <__aeabi_dmul+0x90>
 8000e30:	e683      	b.n	8000b3a <__aeabi_dmul+0xca>
 8000e32:	465b      	mov	r3, fp
 8000e34:	4303      	orrs	r3, r0
 8000e36:	469a      	mov	sl, r3
 8000e38:	d02a      	beq.n	8000e90 <__aeabi_dmul+0x420>
 8000e3a:	465b      	mov	r3, fp
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d06d      	beq.n	8000f1c <__aeabi_dmul+0x4ac>
 8000e40:	4658      	mov	r0, fp
 8000e42:	f000 fd57 	bl	80018f4 <__clzsi2>
 8000e46:	0001      	movs	r1, r0
 8000e48:	0003      	movs	r3, r0
 8000e4a:	390b      	subs	r1, #11
 8000e4c:	221d      	movs	r2, #29
 8000e4e:	1a52      	subs	r2, r2, r1
 8000e50:	0021      	movs	r1, r4
 8000e52:	0018      	movs	r0, r3
 8000e54:	465d      	mov	r5, fp
 8000e56:	40d1      	lsrs	r1, r2
 8000e58:	3808      	subs	r0, #8
 8000e5a:	4085      	lsls	r5, r0
 8000e5c:	000a      	movs	r2, r1
 8000e5e:	4084      	lsls	r4, r0
 8000e60:	432a      	orrs	r2, r5
 8000e62:	4693      	mov	fp, r2
 8000e64:	46a2      	mov	sl, r4
 8000e66:	4d5f      	ldr	r5, [pc, #380]	; (8000fe4 <__aeabi_dmul+0x574>)
 8000e68:	2600      	movs	r6, #0
 8000e6a:	1aed      	subs	r5, r5, r3
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	e625      	b.n	8000abe <__aeabi_dmul+0x4e>
 8000e72:	465b      	mov	r3, fp
 8000e74:	4303      	orrs	r3, r0
 8000e76:	469a      	mov	sl, r3
 8000e78:	d105      	bne.n	8000e86 <__aeabi_dmul+0x416>
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	469b      	mov	fp, r3
 8000e7e:	3302      	adds	r3, #2
 8000e80:	2608      	movs	r6, #8
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	e61b      	b.n	8000abe <__aeabi_dmul+0x4e>
 8000e86:	2303      	movs	r3, #3
 8000e88:	4682      	mov	sl, r0
 8000e8a:	260c      	movs	r6, #12
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	e616      	b.n	8000abe <__aeabi_dmul+0x4e>
 8000e90:	2300      	movs	r3, #0
 8000e92:	469b      	mov	fp, r3
 8000e94:	3301      	adds	r3, #1
 8000e96:	2604      	movs	r6, #4
 8000e98:	2500      	movs	r5, #0
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	e60f      	b.n	8000abe <__aeabi_dmul+0x4e>
 8000e9e:	4642      	mov	r2, r8
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	9501      	str	r5, [sp, #4]
 8000ea4:	431e      	orrs	r6, r3
 8000ea6:	9b01      	ldr	r3, [sp, #4]
 8000ea8:	407a      	eors	r2, r7
 8000eaa:	3301      	adds	r3, #1
 8000eac:	2400      	movs	r4, #0
 8000eae:	2000      	movs	r0, #0
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	9302      	str	r3, [sp, #8]
 8000eb6:	2e0a      	cmp	r6, #10
 8000eb8:	dd00      	ble.n	8000ebc <__aeabi_dmul+0x44c>
 8000eba:	e621      	b.n	8000b00 <__aeabi_dmul+0x90>
 8000ebc:	e63d      	b.n	8000b3a <__aeabi_dmul+0xca>
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	1ac9      	subs	r1, r1, r3
 8000ec2:	2938      	cmp	r1, #56	; 0x38
 8000ec4:	dd00      	ble.n	8000ec8 <__aeabi_dmul+0x458>
 8000ec6:	e642      	b.n	8000b4e <__aeabi_dmul+0xde>
 8000ec8:	291f      	cmp	r1, #31
 8000eca:	dd47      	ble.n	8000f5c <__aeabi_dmul+0x4ec>
 8000ecc:	261f      	movs	r6, #31
 8000ece:	0025      	movs	r5, r4
 8000ed0:	4276      	negs	r6, r6
 8000ed2:	1af3      	subs	r3, r6, r3
 8000ed4:	40dd      	lsrs	r5, r3
 8000ed6:	002b      	movs	r3, r5
 8000ed8:	2920      	cmp	r1, #32
 8000eda:	d005      	beq.n	8000ee8 <__aeabi_dmul+0x478>
 8000edc:	4942      	ldr	r1, [pc, #264]	; (8000fe8 <__aeabi_dmul+0x578>)
 8000ede:	9d02      	ldr	r5, [sp, #8]
 8000ee0:	468c      	mov	ip, r1
 8000ee2:	4465      	add	r5, ip
 8000ee4:	40ac      	lsls	r4, r5
 8000ee6:	4320      	orrs	r0, r4
 8000ee8:	1e41      	subs	r1, r0, #1
 8000eea:	4188      	sbcs	r0, r1
 8000eec:	4318      	orrs	r0, r3
 8000eee:	2307      	movs	r3, #7
 8000ef0:	001d      	movs	r5, r3
 8000ef2:	2400      	movs	r4, #0
 8000ef4:	4005      	ands	r5, r0
 8000ef6:	4203      	tst	r3, r0
 8000ef8:	d04a      	beq.n	8000f90 <__aeabi_dmul+0x520>
 8000efa:	230f      	movs	r3, #15
 8000efc:	2400      	movs	r4, #0
 8000efe:	4003      	ands	r3, r0
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	d042      	beq.n	8000f8a <__aeabi_dmul+0x51a>
 8000f04:	1d03      	adds	r3, r0, #4
 8000f06:	4283      	cmp	r3, r0
 8000f08:	4180      	sbcs	r0, r0
 8000f0a:	4240      	negs	r0, r0
 8000f0c:	1824      	adds	r4, r4, r0
 8000f0e:	0018      	movs	r0, r3
 8000f10:	0223      	lsls	r3, r4, #8
 8000f12:	d53a      	bpl.n	8000f8a <__aeabi_dmul+0x51a>
 8000f14:	2301      	movs	r3, #1
 8000f16:	2400      	movs	r4, #0
 8000f18:	2500      	movs	r5, #0
 8000f1a:	e61b      	b.n	8000b54 <__aeabi_dmul+0xe4>
 8000f1c:	f000 fcea 	bl	80018f4 <__clzsi2>
 8000f20:	0001      	movs	r1, r0
 8000f22:	0003      	movs	r3, r0
 8000f24:	3115      	adds	r1, #21
 8000f26:	3320      	adds	r3, #32
 8000f28:	291c      	cmp	r1, #28
 8000f2a:	dd8f      	ble.n	8000e4c <__aeabi_dmul+0x3dc>
 8000f2c:	3808      	subs	r0, #8
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4084      	lsls	r4, r0
 8000f32:	4692      	mov	sl, r2
 8000f34:	46a3      	mov	fp, r4
 8000f36:	e796      	b.n	8000e66 <__aeabi_dmul+0x3f6>
 8000f38:	f000 fcdc 	bl	80018f4 <__clzsi2>
 8000f3c:	0001      	movs	r1, r0
 8000f3e:	0003      	movs	r3, r0
 8000f40:	3115      	adds	r1, #21
 8000f42:	3320      	adds	r3, #32
 8000f44:	291c      	cmp	r1, #28
 8000f46:	dc00      	bgt.n	8000f4a <__aeabi_dmul+0x4da>
 8000f48:	e758      	b.n	8000dfc <__aeabi_dmul+0x38c>
 8000f4a:	0002      	movs	r2, r0
 8000f4c:	464c      	mov	r4, r9
 8000f4e:	3a08      	subs	r2, #8
 8000f50:	2000      	movs	r0, #0
 8000f52:	4094      	lsls	r4, r2
 8000f54:	e75d      	b.n	8000e12 <__aeabi_dmul+0x3a2>
 8000f56:	9b01      	ldr	r3, [sp, #4]
 8000f58:	9302      	str	r3, [sp, #8]
 8000f5a:	e711      	b.n	8000d80 <__aeabi_dmul+0x310>
 8000f5c:	4b23      	ldr	r3, [pc, #140]	; (8000fec <__aeabi_dmul+0x57c>)
 8000f5e:	0026      	movs	r6, r4
 8000f60:	469c      	mov	ip, r3
 8000f62:	0003      	movs	r3, r0
 8000f64:	9d02      	ldr	r5, [sp, #8]
 8000f66:	40cb      	lsrs	r3, r1
 8000f68:	4465      	add	r5, ip
 8000f6a:	40ae      	lsls	r6, r5
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	0003      	movs	r3, r0
 8000f70:	40ab      	lsls	r3, r5
 8000f72:	1e58      	subs	r0, r3, #1
 8000f74:	4183      	sbcs	r3, r0
 8000f76:	0030      	movs	r0, r6
 8000f78:	4318      	orrs	r0, r3
 8000f7a:	40cc      	lsrs	r4, r1
 8000f7c:	0743      	lsls	r3, r0, #29
 8000f7e:	d0c7      	beq.n	8000f10 <__aeabi_dmul+0x4a0>
 8000f80:	230f      	movs	r3, #15
 8000f82:	4003      	ands	r3, r0
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d1bd      	bne.n	8000f04 <__aeabi_dmul+0x494>
 8000f88:	e7c2      	b.n	8000f10 <__aeabi_dmul+0x4a0>
 8000f8a:	0765      	lsls	r5, r4, #29
 8000f8c:	0264      	lsls	r4, r4, #9
 8000f8e:	0b24      	lsrs	r4, r4, #12
 8000f90:	08c0      	lsrs	r0, r0, #3
 8000f92:	2300      	movs	r3, #0
 8000f94:	4305      	orrs	r5, r0
 8000f96:	e5dd      	b.n	8000b54 <__aeabi_dmul+0xe4>
 8000f98:	2500      	movs	r5, #0
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	2e0f      	cmp	r6, #15
 8000f9e:	d10c      	bne.n	8000fba <__aeabi_dmul+0x54a>
 8000fa0:	2480      	movs	r4, #128	; 0x80
 8000fa2:	465b      	mov	r3, fp
 8000fa4:	0324      	lsls	r4, r4, #12
 8000fa6:	4223      	tst	r3, r4
 8000fa8:	d00e      	beq.n	8000fc8 <__aeabi_dmul+0x558>
 8000faa:	4221      	tst	r1, r4
 8000fac:	d10c      	bne.n	8000fc8 <__aeabi_dmul+0x558>
 8000fae:	430c      	orrs	r4, r1
 8000fb0:	0324      	lsls	r4, r4, #12
 8000fb2:	003a      	movs	r2, r7
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <__aeabi_dmul+0x580>)
 8000fb6:	0b24      	lsrs	r4, r4, #12
 8000fb8:	e5cc      	b.n	8000b54 <__aeabi_dmul+0xe4>
 8000fba:	2e0b      	cmp	r6, #11
 8000fbc:	d000      	beq.n	8000fc0 <__aeabi_dmul+0x550>
 8000fbe:	e5a2      	b.n	8000b06 <__aeabi_dmul+0x96>
 8000fc0:	468b      	mov	fp, r1
 8000fc2:	46aa      	mov	sl, r5
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	e5f7      	b.n	8000bb8 <__aeabi_dmul+0x148>
 8000fc8:	2480      	movs	r4, #128	; 0x80
 8000fca:	465b      	mov	r3, fp
 8000fcc:	0324      	lsls	r4, r4, #12
 8000fce:	431c      	orrs	r4, r3
 8000fd0:	0324      	lsls	r4, r4, #12
 8000fd2:	4642      	mov	r2, r8
 8000fd4:	4655      	mov	r5, sl
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <__aeabi_dmul+0x580>)
 8000fd8:	0b24      	lsrs	r4, r4, #12
 8000fda:	e5bb      	b.n	8000b54 <__aeabi_dmul+0xe4>
 8000fdc:	464d      	mov	r5, r9
 8000fde:	0021      	movs	r1, r4
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e7db      	b.n	8000f9c <__aeabi_dmul+0x52c>
 8000fe4:	fffffc0d 	.word	0xfffffc0d
 8000fe8:	0000043e 	.word	0x0000043e
 8000fec:	0000041e 	.word	0x0000041e
 8000ff0:	000007ff 	.word	0x000007ff

08000ff4 <__aeabi_dsub>:
 8000ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff6:	4657      	mov	r7, sl
 8000ff8:	464e      	mov	r6, r9
 8000ffa:	4645      	mov	r5, r8
 8000ffc:	46de      	mov	lr, fp
 8000ffe:	b5e0      	push	{r5, r6, r7, lr}
 8001000:	000d      	movs	r5, r1
 8001002:	0004      	movs	r4, r0
 8001004:	0019      	movs	r1, r3
 8001006:	0010      	movs	r0, r2
 8001008:	032b      	lsls	r3, r5, #12
 800100a:	0a5b      	lsrs	r3, r3, #9
 800100c:	0f62      	lsrs	r2, r4, #29
 800100e:	431a      	orrs	r2, r3
 8001010:	00e3      	lsls	r3, r4, #3
 8001012:	030c      	lsls	r4, r1, #12
 8001014:	0a64      	lsrs	r4, r4, #9
 8001016:	0f47      	lsrs	r7, r0, #29
 8001018:	4327      	orrs	r7, r4
 800101a:	4cd0      	ldr	r4, [pc, #832]	; (800135c <__aeabi_dsub+0x368>)
 800101c:	006e      	lsls	r6, r5, #1
 800101e:	4691      	mov	r9, r2
 8001020:	b083      	sub	sp, #12
 8001022:	004a      	lsls	r2, r1, #1
 8001024:	00c0      	lsls	r0, r0, #3
 8001026:	4698      	mov	r8, r3
 8001028:	46a2      	mov	sl, r4
 800102a:	0d76      	lsrs	r6, r6, #21
 800102c:	0fed      	lsrs	r5, r5, #31
 800102e:	0d52      	lsrs	r2, r2, #21
 8001030:	0fc9      	lsrs	r1, r1, #31
 8001032:	9001      	str	r0, [sp, #4]
 8001034:	42a2      	cmp	r2, r4
 8001036:	d100      	bne.n	800103a <__aeabi_dsub+0x46>
 8001038:	e0b9      	b.n	80011ae <__aeabi_dsub+0x1ba>
 800103a:	2401      	movs	r4, #1
 800103c:	4061      	eors	r1, r4
 800103e:	468b      	mov	fp, r1
 8001040:	428d      	cmp	r5, r1
 8001042:	d100      	bne.n	8001046 <__aeabi_dsub+0x52>
 8001044:	e08d      	b.n	8001162 <__aeabi_dsub+0x16e>
 8001046:	1ab4      	subs	r4, r6, r2
 8001048:	46a4      	mov	ip, r4
 800104a:	2c00      	cmp	r4, #0
 800104c:	dc00      	bgt.n	8001050 <__aeabi_dsub+0x5c>
 800104e:	e0b7      	b.n	80011c0 <__aeabi_dsub+0x1cc>
 8001050:	2a00      	cmp	r2, #0
 8001052:	d100      	bne.n	8001056 <__aeabi_dsub+0x62>
 8001054:	e0cb      	b.n	80011ee <__aeabi_dsub+0x1fa>
 8001056:	4ac1      	ldr	r2, [pc, #772]	; (800135c <__aeabi_dsub+0x368>)
 8001058:	4296      	cmp	r6, r2
 800105a:	d100      	bne.n	800105e <__aeabi_dsub+0x6a>
 800105c:	e186      	b.n	800136c <__aeabi_dsub+0x378>
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	0412      	lsls	r2, r2, #16
 8001062:	4317      	orrs	r7, r2
 8001064:	4662      	mov	r2, ip
 8001066:	2a38      	cmp	r2, #56	; 0x38
 8001068:	dd00      	ble.n	800106c <__aeabi_dsub+0x78>
 800106a:	e1a4      	b.n	80013b6 <__aeabi_dsub+0x3c2>
 800106c:	2a1f      	cmp	r2, #31
 800106e:	dd00      	ble.n	8001072 <__aeabi_dsub+0x7e>
 8001070:	e21d      	b.n	80014ae <__aeabi_dsub+0x4ba>
 8001072:	4661      	mov	r1, ip
 8001074:	2220      	movs	r2, #32
 8001076:	003c      	movs	r4, r7
 8001078:	1a52      	subs	r2, r2, r1
 800107a:	0001      	movs	r1, r0
 800107c:	4090      	lsls	r0, r2
 800107e:	4094      	lsls	r4, r2
 8001080:	1e42      	subs	r2, r0, #1
 8001082:	4190      	sbcs	r0, r2
 8001084:	4662      	mov	r2, ip
 8001086:	46a0      	mov	r8, r4
 8001088:	4664      	mov	r4, ip
 800108a:	40d7      	lsrs	r7, r2
 800108c:	464a      	mov	r2, r9
 800108e:	40e1      	lsrs	r1, r4
 8001090:	4644      	mov	r4, r8
 8001092:	1bd2      	subs	r2, r2, r7
 8001094:	4691      	mov	r9, r2
 8001096:	430c      	orrs	r4, r1
 8001098:	4304      	orrs	r4, r0
 800109a:	1b1c      	subs	r4, r3, r4
 800109c:	42a3      	cmp	r3, r4
 800109e:	4192      	sbcs	r2, r2
 80010a0:	464b      	mov	r3, r9
 80010a2:	4252      	negs	r2, r2
 80010a4:	1a9b      	subs	r3, r3, r2
 80010a6:	469a      	mov	sl, r3
 80010a8:	4653      	mov	r3, sl
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	d400      	bmi.n	80010b0 <__aeabi_dsub+0xbc>
 80010ae:	e12b      	b.n	8001308 <__aeabi_dsub+0x314>
 80010b0:	4653      	mov	r3, sl
 80010b2:	025a      	lsls	r2, r3, #9
 80010b4:	0a53      	lsrs	r3, r2, #9
 80010b6:	469a      	mov	sl, r3
 80010b8:	4653      	mov	r3, sl
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dsub+0xcc>
 80010be:	e166      	b.n	800138e <__aeabi_dsub+0x39a>
 80010c0:	4650      	mov	r0, sl
 80010c2:	f000 fc17 	bl	80018f4 <__clzsi2>
 80010c6:	0003      	movs	r3, r0
 80010c8:	3b08      	subs	r3, #8
 80010ca:	2220      	movs	r2, #32
 80010cc:	0020      	movs	r0, r4
 80010ce:	1ad2      	subs	r2, r2, r3
 80010d0:	4651      	mov	r1, sl
 80010d2:	40d0      	lsrs	r0, r2
 80010d4:	4099      	lsls	r1, r3
 80010d6:	0002      	movs	r2, r0
 80010d8:	409c      	lsls	r4, r3
 80010da:	430a      	orrs	r2, r1
 80010dc:	429e      	cmp	r6, r3
 80010de:	dd00      	ble.n	80010e2 <__aeabi_dsub+0xee>
 80010e0:	e164      	b.n	80013ac <__aeabi_dsub+0x3b8>
 80010e2:	1b9b      	subs	r3, r3, r6
 80010e4:	1c59      	adds	r1, r3, #1
 80010e6:	291f      	cmp	r1, #31
 80010e8:	dd00      	ble.n	80010ec <__aeabi_dsub+0xf8>
 80010ea:	e0fe      	b.n	80012ea <__aeabi_dsub+0x2f6>
 80010ec:	2320      	movs	r3, #32
 80010ee:	0010      	movs	r0, r2
 80010f0:	0026      	movs	r6, r4
 80010f2:	1a5b      	subs	r3, r3, r1
 80010f4:	409c      	lsls	r4, r3
 80010f6:	4098      	lsls	r0, r3
 80010f8:	40ce      	lsrs	r6, r1
 80010fa:	40ca      	lsrs	r2, r1
 80010fc:	1e63      	subs	r3, r4, #1
 80010fe:	419c      	sbcs	r4, r3
 8001100:	4330      	orrs	r0, r6
 8001102:	4692      	mov	sl, r2
 8001104:	2600      	movs	r6, #0
 8001106:	4304      	orrs	r4, r0
 8001108:	0763      	lsls	r3, r4, #29
 800110a:	d009      	beq.n	8001120 <__aeabi_dsub+0x12c>
 800110c:	230f      	movs	r3, #15
 800110e:	4023      	ands	r3, r4
 8001110:	2b04      	cmp	r3, #4
 8001112:	d005      	beq.n	8001120 <__aeabi_dsub+0x12c>
 8001114:	1d23      	adds	r3, r4, #4
 8001116:	42a3      	cmp	r3, r4
 8001118:	41a4      	sbcs	r4, r4
 800111a:	4264      	negs	r4, r4
 800111c:	44a2      	add	sl, r4
 800111e:	001c      	movs	r4, r3
 8001120:	4653      	mov	r3, sl
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	d400      	bmi.n	8001128 <__aeabi_dsub+0x134>
 8001126:	e0f2      	b.n	800130e <__aeabi_dsub+0x31a>
 8001128:	4b8c      	ldr	r3, [pc, #560]	; (800135c <__aeabi_dsub+0x368>)
 800112a:	3601      	adds	r6, #1
 800112c:	429e      	cmp	r6, r3
 800112e:	d100      	bne.n	8001132 <__aeabi_dsub+0x13e>
 8001130:	e10f      	b.n	8001352 <__aeabi_dsub+0x35e>
 8001132:	4653      	mov	r3, sl
 8001134:	498a      	ldr	r1, [pc, #552]	; (8001360 <__aeabi_dsub+0x36c>)
 8001136:	08e4      	lsrs	r4, r4, #3
 8001138:	400b      	ands	r3, r1
 800113a:	0019      	movs	r1, r3
 800113c:	075b      	lsls	r3, r3, #29
 800113e:	4323      	orrs	r3, r4
 8001140:	0572      	lsls	r2, r6, #21
 8001142:	024c      	lsls	r4, r1, #9
 8001144:	0b24      	lsrs	r4, r4, #12
 8001146:	0d52      	lsrs	r2, r2, #21
 8001148:	0512      	lsls	r2, r2, #20
 800114a:	4322      	orrs	r2, r4
 800114c:	07ed      	lsls	r5, r5, #31
 800114e:	432a      	orrs	r2, r5
 8001150:	0018      	movs	r0, r3
 8001152:	0011      	movs	r1, r2
 8001154:	b003      	add	sp, #12
 8001156:	bcf0      	pop	{r4, r5, r6, r7}
 8001158:	46bb      	mov	fp, r7
 800115a:	46b2      	mov	sl, r6
 800115c:	46a9      	mov	r9, r5
 800115e:	46a0      	mov	r8, r4
 8001160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001162:	1ab4      	subs	r4, r6, r2
 8001164:	46a4      	mov	ip, r4
 8001166:	2c00      	cmp	r4, #0
 8001168:	dd59      	ble.n	800121e <__aeabi_dsub+0x22a>
 800116a:	2a00      	cmp	r2, #0
 800116c:	d100      	bne.n	8001170 <__aeabi_dsub+0x17c>
 800116e:	e0b0      	b.n	80012d2 <__aeabi_dsub+0x2de>
 8001170:	4556      	cmp	r6, sl
 8001172:	d100      	bne.n	8001176 <__aeabi_dsub+0x182>
 8001174:	e0fa      	b.n	800136c <__aeabi_dsub+0x378>
 8001176:	2280      	movs	r2, #128	; 0x80
 8001178:	0412      	lsls	r2, r2, #16
 800117a:	4317      	orrs	r7, r2
 800117c:	4662      	mov	r2, ip
 800117e:	2a38      	cmp	r2, #56	; 0x38
 8001180:	dd00      	ble.n	8001184 <__aeabi_dsub+0x190>
 8001182:	e0d4      	b.n	800132e <__aeabi_dsub+0x33a>
 8001184:	2a1f      	cmp	r2, #31
 8001186:	dc00      	bgt.n	800118a <__aeabi_dsub+0x196>
 8001188:	e1c0      	b.n	800150c <__aeabi_dsub+0x518>
 800118a:	0039      	movs	r1, r7
 800118c:	3a20      	subs	r2, #32
 800118e:	40d1      	lsrs	r1, r2
 8001190:	4662      	mov	r2, ip
 8001192:	2a20      	cmp	r2, #32
 8001194:	d006      	beq.n	80011a4 <__aeabi_dsub+0x1b0>
 8001196:	4664      	mov	r4, ip
 8001198:	2240      	movs	r2, #64	; 0x40
 800119a:	1b12      	subs	r2, r2, r4
 800119c:	003c      	movs	r4, r7
 800119e:	4094      	lsls	r4, r2
 80011a0:	4304      	orrs	r4, r0
 80011a2:	9401      	str	r4, [sp, #4]
 80011a4:	9c01      	ldr	r4, [sp, #4]
 80011a6:	1e62      	subs	r2, r4, #1
 80011a8:	4194      	sbcs	r4, r2
 80011aa:	430c      	orrs	r4, r1
 80011ac:	e0c3      	b.n	8001336 <__aeabi_dsub+0x342>
 80011ae:	003c      	movs	r4, r7
 80011b0:	4304      	orrs	r4, r0
 80011b2:	d02b      	beq.n	800120c <__aeabi_dsub+0x218>
 80011b4:	468b      	mov	fp, r1
 80011b6:	428d      	cmp	r5, r1
 80011b8:	d02e      	beq.n	8001218 <__aeabi_dsub+0x224>
 80011ba:	4c6a      	ldr	r4, [pc, #424]	; (8001364 <__aeabi_dsub+0x370>)
 80011bc:	46a4      	mov	ip, r4
 80011be:	44b4      	add	ip, r6
 80011c0:	4664      	mov	r4, ip
 80011c2:	2c00      	cmp	r4, #0
 80011c4:	d05f      	beq.n	8001286 <__aeabi_dsub+0x292>
 80011c6:	1b94      	subs	r4, r2, r6
 80011c8:	46a4      	mov	ip, r4
 80011ca:	2e00      	cmp	r6, #0
 80011cc:	d000      	beq.n	80011d0 <__aeabi_dsub+0x1dc>
 80011ce:	e120      	b.n	8001412 <__aeabi_dsub+0x41e>
 80011d0:	464c      	mov	r4, r9
 80011d2:	431c      	orrs	r4, r3
 80011d4:	d100      	bne.n	80011d8 <__aeabi_dsub+0x1e4>
 80011d6:	e1c7      	b.n	8001568 <__aeabi_dsub+0x574>
 80011d8:	4661      	mov	r1, ip
 80011da:	1e4c      	subs	r4, r1, #1
 80011dc:	2901      	cmp	r1, #1
 80011de:	d100      	bne.n	80011e2 <__aeabi_dsub+0x1ee>
 80011e0:	e223      	b.n	800162a <__aeabi_dsub+0x636>
 80011e2:	4d5e      	ldr	r5, [pc, #376]	; (800135c <__aeabi_dsub+0x368>)
 80011e4:	45ac      	cmp	ip, r5
 80011e6:	d100      	bne.n	80011ea <__aeabi_dsub+0x1f6>
 80011e8:	e1d8      	b.n	800159c <__aeabi_dsub+0x5a8>
 80011ea:	46a4      	mov	ip, r4
 80011ec:	e11a      	b.n	8001424 <__aeabi_dsub+0x430>
 80011ee:	003a      	movs	r2, r7
 80011f0:	4302      	orrs	r2, r0
 80011f2:	d100      	bne.n	80011f6 <__aeabi_dsub+0x202>
 80011f4:	e0e4      	b.n	80013c0 <__aeabi_dsub+0x3cc>
 80011f6:	0022      	movs	r2, r4
 80011f8:	3a01      	subs	r2, #1
 80011fa:	2c01      	cmp	r4, #1
 80011fc:	d100      	bne.n	8001200 <__aeabi_dsub+0x20c>
 80011fe:	e1c3      	b.n	8001588 <__aeabi_dsub+0x594>
 8001200:	4956      	ldr	r1, [pc, #344]	; (800135c <__aeabi_dsub+0x368>)
 8001202:	428c      	cmp	r4, r1
 8001204:	d100      	bne.n	8001208 <__aeabi_dsub+0x214>
 8001206:	e0b1      	b.n	800136c <__aeabi_dsub+0x378>
 8001208:	4694      	mov	ip, r2
 800120a:	e72b      	b.n	8001064 <__aeabi_dsub+0x70>
 800120c:	2401      	movs	r4, #1
 800120e:	4061      	eors	r1, r4
 8001210:	468b      	mov	fp, r1
 8001212:	428d      	cmp	r5, r1
 8001214:	d000      	beq.n	8001218 <__aeabi_dsub+0x224>
 8001216:	e716      	b.n	8001046 <__aeabi_dsub+0x52>
 8001218:	4952      	ldr	r1, [pc, #328]	; (8001364 <__aeabi_dsub+0x370>)
 800121a:	468c      	mov	ip, r1
 800121c:	44b4      	add	ip, r6
 800121e:	4664      	mov	r4, ip
 8001220:	2c00      	cmp	r4, #0
 8001222:	d100      	bne.n	8001226 <__aeabi_dsub+0x232>
 8001224:	e0d3      	b.n	80013ce <__aeabi_dsub+0x3da>
 8001226:	1b91      	subs	r1, r2, r6
 8001228:	468c      	mov	ip, r1
 800122a:	2e00      	cmp	r6, #0
 800122c:	d100      	bne.n	8001230 <__aeabi_dsub+0x23c>
 800122e:	e15e      	b.n	80014ee <__aeabi_dsub+0x4fa>
 8001230:	494a      	ldr	r1, [pc, #296]	; (800135c <__aeabi_dsub+0x368>)
 8001232:	428a      	cmp	r2, r1
 8001234:	d100      	bne.n	8001238 <__aeabi_dsub+0x244>
 8001236:	e1be      	b.n	80015b6 <__aeabi_dsub+0x5c2>
 8001238:	2180      	movs	r1, #128	; 0x80
 800123a:	464c      	mov	r4, r9
 800123c:	0409      	lsls	r1, r1, #16
 800123e:	430c      	orrs	r4, r1
 8001240:	46a1      	mov	r9, r4
 8001242:	4661      	mov	r1, ip
 8001244:	2938      	cmp	r1, #56	; 0x38
 8001246:	dd00      	ble.n	800124a <__aeabi_dsub+0x256>
 8001248:	e1ba      	b.n	80015c0 <__aeabi_dsub+0x5cc>
 800124a:	291f      	cmp	r1, #31
 800124c:	dd00      	ble.n	8001250 <__aeabi_dsub+0x25c>
 800124e:	e227      	b.n	80016a0 <__aeabi_dsub+0x6ac>
 8001250:	2420      	movs	r4, #32
 8001252:	1a64      	subs	r4, r4, r1
 8001254:	4649      	mov	r1, r9
 8001256:	40a1      	lsls	r1, r4
 8001258:	001e      	movs	r6, r3
 800125a:	4688      	mov	r8, r1
 800125c:	4661      	mov	r1, ip
 800125e:	40a3      	lsls	r3, r4
 8001260:	40ce      	lsrs	r6, r1
 8001262:	4641      	mov	r1, r8
 8001264:	1e5c      	subs	r4, r3, #1
 8001266:	41a3      	sbcs	r3, r4
 8001268:	4331      	orrs	r1, r6
 800126a:	4319      	orrs	r1, r3
 800126c:	000c      	movs	r4, r1
 800126e:	4663      	mov	r3, ip
 8001270:	4649      	mov	r1, r9
 8001272:	40d9      	lsrs	r1, r3
 8001274:	187f      	adds	r7, r7, r1
 8001276:	1824      	adds	r4, r4, r0
 8001278:	4284      	cmp	r4, r0
 800127a:	419b      	sbcs	r3, r3
 800127c:	425b      	negs	r3, r3
 800127e:	469a      	mov	sl, r3
 8001280:	0016      	movs	r6, r2
 8001282:	44ba      	add	sl, r7
 8001284:	e05d      	b.n	8001342 <__aeabi_dsub+0x34e>
 8001286:	4c38      	ldr	r4, [pc, #224]	; (8001368 <__aeabi_dsub+0x374>)
 8001288:	1c72      	adds	r2, r6, #1
 800128a:	4222      	tst	r2, r4
 800128c:	d000      	beq.n	8001290 <__aeabi_dsub+0x29c>
 800128e:	e0df      	b.n	8001450 <__aeabi_dsub+0x45c>
 8001290:	464a      	mov	r2, r9
 8001292:	431a      	orrs	r2, r3
 8001294:	2e00      	cmp	r6, #0
 8001296:	d000      	beq.n	800129a <__aeabi_dsub+0x2a6>
 8001298:	e15c      	b.n	8001554 <__aeabi_dsub+0x560>
 800129a:	2a00      	cmp	r2, #0
 800129c:	d100      	bne.n	80012a0 <__aeabi_dsub+0x2ac>
 800129e:	e1cf      	b.n	8001640 <__aeabi_dsub+0x64c>
 80012a0:	003a      	movs	r2, r7
 80012a2:	4302      	orrs	r2, r0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_dsub+0x2b4>
 80012a6:	e17f      	b.n	80015a8 <__aeabi_dsub+0x5b4>
 80012a8:	1a1c      	subs	r4, r3, r0
 80012aa:	464a      	mov	r2, r9
 80012ac:	42a3      	cmp	r3, r4
 80012ae:	4189      	sbcs	r1, r1
 80012b0:	1bd2      	subs	r2, r2, r7
 80012b2:	4249      	negs	r1, r1
 80012b4:	1a52      	subs	r2, r2, r1
 80012b6:	4692      	mov	sl, r2
 80012b8:	0212      	lsls	r2, r2, #8
 80012ba:	d400      	bmi.n	80012be <__aeabi_dsub+0x2ca>
 80012bc:	e20a      	b.n	80016d4 <__aeabi_dsub+0x6e0>
 80012be:	1ac4      	subs	r4, r0, r3
 80012c0:	42a0      	cmp	r0, r4
 80012c2:	4180      	sbcs	r0, r0
 80012c4:	464b      	mov	r3, r9
 80012c6:	4240      	negs	r0, r0
 80012c8:	1aff      	subs	r7, r7, r3
 80012ca:	1a3b      	subs	r3, r7, r0
 80012cc:	469a      	mov	sl, r3
 80012ce:	465d      	mov	r5, fp
 80012d0:	e71a      	b.n	8001108 <__aeabi_dsub+0x114>
 80012d2:	003a      	movs	r2, r7
 80012d4:	4302      	orrs	r2, r0
 80012d6:	d073      	beq.n	80013c0 <__aeabi_dsub+0x3cc>
 80012d8:	0022      	movs	r2, r4
 80012da:	3a01      	subs	r2, #1
 80012dc:	2c01      	cmp	r4, #1
 80012de:	d100      	bne.n	80012e2 <__aeabi_dsub+0x2ee>
 80012e0:	e0cb      	b.n	800147a <__aeabi_dsub+0x486>
 80012e2:	4554      	cmp	r4, sl
 80012e4:	d042      	beq.n	800136c <__aeabi_dsub+0x378>
 80012e6:	4694      	mov	ip, r2
 80012e8:	e748      	b.n	800117c <__aeabi_dsub+0x188>
 80012ea:	0010      	movs	r0, r2
 80012ec:	3b1f      	subs	r3, #31
 80012ee:	40d8      	lsrs	r0, r3
 80012f0:	2920      	cmp	r1, #32
 80012f2:	d003      	beq.n	80012fc <__aeabi_dsub+0x308>
 80012f4:	2340      	movs	r3, #64	; 0x40
 80012f6:	1a5b      	subs	r3, r3, r1
 80012f8:	409a      	lsls	r2, r3
 80012fa:	4314      	orrs	r4, r2
 80012fc:	1e63      	subs	r3, r4, #1
 80012fe:	419c      	sbcs	r4, r3
 8001300:	2300      	movs	r3, #0
 8001302:	2600      	movs	r6, #0
 8001304:	469a      	mov	sl, r3
 8001306:	4304      	orrs	r4, r0
 8001308:	0763      	lsls	r3, r4, #29
 800130a:	d000      	beq.n	800130e <__aeabi_dsub+0x31a>
 800130c:	e6fe      	b.n	800110c <__aeabi_dsub+0x118>
 800130e:	4652      	mov	r2, sl
 8001310:	08e3      	lsrs	r3, r4, #3
 8001312:	0752      	lsls	r2, r2, #29
 8001314:	4313      	orrs	r3, r2
 8001316:	4652      	mov	r2, sl
 8001318:	46b4      	mov	ip, r6
 800131a:	08d2      	lsrs	r2, r2, #3
 800131c:	490f      	ldr	r1, [pc, #60]	; (800135c <__aeabi_dsub+0x368>)
 800131e:	458c      	cmp	ip, r1
 8001320:	d02a      	beq.n	8001378 <__aeabi_dsub+0x384>
 8001322:	0312      	lsls	r2, r2, #12
 8001324:	0b14      	lsrs	r4, r2, #12
 8001326:	4662      	mov	r2, ip
 8001328:	0552      	lsls	r2, r2, #21
 800132a:	0d52      	lsrs	r2, r2, #21
 800132c:	e70c      	b.n	8001148 <__aeabi_dsub+0x154>
 800132e:	003c      	movs	r4, r7
 8001330:	4304      	orrs	r4, r0
 8001332:	1e62      	subs	r2, r4, #1
 8001334:	4194      	sbcs	r4, r2
 8001336:	18e4      	adds	r4, r4, r3
 8001338:	429c      	cmp	r4, r3
 800133a:	4192      	sbcs	r2, r2
 800133c:	4252      	negs	r2, r2
 800133e:	444a      	add	r2, r9
 8001340:	4692      	mov	sl, r2
 8001342:	4653      	mov	r3, sl
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	d5df      	bpl.n	8001308 <__aeabi_dsub+0x314>
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <__aeabi_dsub+0x368>)
 800134a:	3601      	adds	r6, #1
 800134c:	429e      	cmp	r6, r3
 800134e:	d000      	beq.n	8001352 <__aeabi_dsub+0x35e>
 8001350:	e0a0      	b.n	8001494 <__aeabi_dsub+0x4a0>
 8001352:	0032      	movs	r2, r6
 8001354:	2400      	movs	r4, #0
 8001356:	2300      	movs	r3, #0
 8001358:	e6f6      	b.n	8001148 <__aeabi_dsub+0x154>
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	000007ff 	.word	0x000007ff
 8001360:	ff7fffff 	.word	0xff7fffff
 8001364:	fffff801 	.word	0xfffff801
 8001368:	000007fe 	.word	0x000007fe
 800136c:	08db      	lsrs	r3, r3, #3
 800136e:	464a      	mov	r2, r9
 8001370:	0752      	lsls	r2, r2, #29
 8001372:	4313      	orrs	r3, r2
 8001374:	464a      	mov	r2, r9
 8001376:	08d2      	lsrs	r2, r2, #3
 8001378:	0019      	movs	r1, r3
 800137a:	4311      	orrs	r1, r2
 800137c:	d100      	bne.n	8001380 <__aeabi_dsub+0x38c>
 800137e:	e1b5      	b.n	80016ec <__aeabi_dsub+0x6f8>
 8001380:	2480      	movs	r4, #128	; 0x80
 8001382:	0324      	lsls	r4, r4, #12
 8001384:	4314      	orrs	r4, r2
 8001386:	0324      	lsls	r4, r4, #12
 8001388:	4ad5      	ldr	r2, [pc, #852]	; (80016e0 <__aeabi_dsub+0x6ec>)
 800138a:	0b24      	lsrs	r4, r4, #12
 800138c:	e6dc      	b.n	8001148 <__aeabi_dsub+0x154>
 800138e:	0020      	movs	r0, r4
 8001390:	f000 fab0 	bl	80018f4 <__clzsi2>
 8001394:	0003      	movs	r3, r0
 8001396:	3318      	adds	r3, #24
 8001398:	2b1f      	cmp	r3, #31
 800139a:	dc00      	bgt.n	800139e <__aeabi_dsub+0x3aa>
 800139c:	e695      	b.n	80010ca <__aeabi_dsub+0xd6>
 800139e:	0022      	movs	r2, r4
 80013a0:	3808      	subs	r0, #8
 80013a2:	4082      	lsls	r2, r0
 80013a4:	2400      	movs	r4, #0
 80013a6:	429e      	cmp	r6, r3
 80013a8:	dc00      	bgt.n	80013ac <__aeabi_dsub+0x3b8>
 80013aa:	e69a      	b.n	80010e2 <__aeabi_dsub+0xee>
 80013ac:	1af6      	subs	r6, r6, r3
 80013ae:	4bcd      	ldr	r3, [pc, #820]	; (80016e4 <__aeabi_dsub+0x6f0>)
 80013b0:	401a      	ands	r2, r3
 80013b2:	4692      	mov	sl, r2
 80013b4:	e6a8      	b.n	8001108 <__aeabi_dsub+0x114>
 80013b6:	003c      	movs	r4, r7
 80013b8:	4304      	orrs	r4, r0
 80013ba:	1e62      	subs	r2, r4, #1
 80013bc:	4194      	sbcs	r4, r2
 80013be:	e66c      	b.n	800109a <__aeabi_dsub+0xa6>
 80013c0:	464a      	mov	r2, r9
 80013c2:	08db      	lsrs	r3, r3, #3
 80013c4:	0752      	lsls	r2, r2, #29
 80013c6:	4313      	orrs	r3, r2
 80013c8:	464a      	mov	r2, r9
 80013ca:	08d2      	lsrs	r2, r2, #3
 80013cc:	e7a6      	b.n	800131c <__aeabi_dsub+0x328>
 80013ce:	4cc6      	ldr	r4, [pc, #792]	; (80016e8 <__aeabi_dsub+0x6f4>)
 80013d0:	1c72      	adds	r2, r6, #1
 80013d2:	4222      	tst	r2, r4
 80013d4:	d000      	beq.n	80013d8 <__aeabi_dsub+0x3e4>
 80013d6:	e0ac      	b.n	8001532 <__aeabi_dsub+0x53e>
 80013d8:	464a      	mov	r2, r9
 80013da:	431a      	orrs	r2, r3
 80013dc:	2e00      	cmp	r6, #0
 80013de:	d000      	beq.n	80013e2 <__aeabi_dsub+0x3ee>
 80013e0:	e105      	b.n	80015ee <__aeabi_dsub+0x5fa>
 80013e2:	2a00      	cmp	r2, #0
 80013e4:	d100      	bne.n	80013e8 <__aeabi_dsub+0x3f4>
 80013e6:	e156      	b.n	8001696 <__aeabi_dsub+0x6a2>
 80013e8:	003a      	movs	r2, r7
 80013ea:	4302      	orrs	r2, r0
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dsub+0x3fc>
 80013ee:	e0db      	b.n	80015a8 <__aeabi_dsub+0x5b4>
 80013f0:	181c      	adds	r4, r3, r0
 80013f2:	429c      	cmp	r4, r3
 80013f4:	419b      	sbcs	r3, r3
 80013f6:	444f      	add	r7, r9
 80013f8:	46ba      	mov	sl, r7
 80013fa:	425b      	negs	r3, r3
 80013fc:	449a      	add	sl, r3
 80013fe:	4653      	mov	r3, sl
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	d400      	bmi.n	8001406 <__aeabi_dsub+0x412>
 8001404:	e780      	b.n	8001308 <__aeabi_dsub+0x314>
 8001406:	4652      	mov	r2, sl
 8001408:	4bb6      	ldr	r3, [pc, #728]	; (80016e4 <__aeabi_dsub+0x6f0>)
 800140a:	2601      	movs	r6, #1
 800140c:	401a      	ands	r2, r3
 800140e:	4692      	mov	sl, r2
 8001410:	e77a      	b.n	8001308 <__aeabi_dsub+0x314>
 8001412:	4cb3      	ldr	r4, [pc, #716]	; (80016e0 <__aeabi_dsub+0x6ec>)
 8001414:	42a2      	cmp	r2, r4
 8001416:	d100      	bne.n	800141a <__aeabi_dsub+0x426>
 8001418:	e0c0      	b.n	800159c <__aeabi_dsub+0x5a8>
 800141a:	2480      	movs	r4, #128	; 0x80
 800141c:	464d      	mov	r5, r9
 800141e:	0424      	lsls	r4, r4, #16
 8001420:	4325      	orrs	r5, r4
 8001422:	46a9      	mov	r9, r5
 8001424:	4664      	mov	r4, ip
 8001426:	2c38      	cmp	r4, #56	; 0x38
 8001428:	dc53      	bgt.n	80014d2 <__aeabi_dsub+0x4de>
 800142a:	4661      	mov	r1, ip
 800142c:	2c1f      	cmp	r4, #31
 800142e:	dd00      	ble.n	8001432 <__aeabi_dsub+0x43e>
 8001430:	e0cd      	b.n	80015ce <__aeabi_dsub+0x5da>
 8001432:	2520      	movs	r5, #32
 8001434:	001e      	movs	r6, r3
 8001436:	1b2d      	subs	r5, r5, r4
 8001438:	464c      	mov	r4, r9
 800143a:	40ab      	lsls	r3, r5
 800143c:	40ac      	lsls	r4, r5
 800143e:	40ce      	lsrs	r6, r1
 8001440:	1e5d      	subs	r5, r3, #1
 8001442:	41ab      	sbcs	r3, r5
 8001444:	4334      	orrs	r4, r6
 8001446:	4323      	orrs	r3, r4
 8001448:	464c      	mov	r4, r9
 800144a:	40cc      	lsrs	r4, r1
 800144c:	1b3f      	subs	r7, r7, r4
 800144e:	e045      	b.n	80014dc <__aeabi_dsub+0x4e8>
 8001450:	464a      	mov	r2, r9
 8001452:	1a1c      	subs	r4, r3, r0
 8001454:	1bd1      	subs	r1, r2, r7
 8001456:	42a3      	cmp	r3, r4
 8001458:	4192      	sbcs	r2, r2
 800145a:	4252      	negs	r2, r2
 800145c:	4692      	mov	sl, r2
 800145e:	000a      	movs	r2, r1
 8001460:	4651      	mov	r1, sl
 8001462:	1a52      	subs	r2, r2, r1
 8001464:	4692      	mov	sl, r2
 8001466:	0212      	lsls	r2, r2, #8
 8001468:	d500      	bpl.n	800146c <__aeabi_dsub+0x478>
 800146a:	e083      	b.n	8001574 <__aeabi_dsub+0x580>
 800146c:	4653      	mov	r3, sl
 800146e:	4323      	orrs	r3, r4
 8001470:	d000      	beq.n	8001474 <__aeabi_dsub+0x480>
 8001472:	e621      	b.n	80010b8 <__aeabi_dsub+0xc4>
 8001474:	2200      	movs	r2, #0
 8001476:	2500      	movs	r5, #0
 8001478:	e753      	b.n	8001322 <__aeabi_dsub+0x32e>
 800147a:	181c      	adds	r4, r3, r0
 800147c:	429c      	cmp	r4, r3
 800147e:	419b      	sbcs	r3, r3
 8001480:	444f      	add	r7, r9
 8001482:	46ba      	mov	sl, r7
 8001484:	425b      	negs	r3, r3
 8001486:	449a      	add	sl, r3
 8001488:	4653      	mov	r3, sl
 800148a:	2601      	movs	r6, #1
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	d400      	bmi.n	8001492 <__aeabi_dsub+0x49e>
 8001490:	e73a      	b.n	8001308 <__aeabi_dsub+0x314>
 8001492:	2602      	movs	r6, #2
 8001494:	4652      	mov	r2, sl
 8001496:	4b93      	ldr	r3, [pc, #588]	; (80016e4 <__aeabi_dsub+0x6f0>)
 8001498:	2101      	movs	r1, #1
 800149a:	401a      	ands	r2, r3
 800149c:	0013      	movs	r3, r2
 800149e:	4021      	ands	r1, r4
 80014a0:	0862      	lsrs	r2, r4, #1
 80014a2:	430a      	orrs	r2, r1
 80014a4:	07dc      	lsls	r4, r3, #31
 80014a6:	085b      	lsrs	r3, r3, #1
 80014a8:	469a      	mov	sl, r3
 80014aa:	4314      	orrs	r4, r2
 80014ac:	e62c      	b.n	8001108 <__aeabi_dsub+0x114>
 80014ae:	0039      	movs	r1, r7
 80014b0:	3a20      	subs	r2, #32
 80014b2:	40d1      	lsrs	r1, r2
 80014b4:	4662      	mov	r2, ip
 80014b6:	2a20      	cmp	r2, #32
 80014b8:	d006      	beq.n	80014c8 <__aeabi_dsub+0x4d4>
 80014ba:	4664      	mov	r4, ip
 80014bc:	2240      	movs	r2, #64	; 0x40
 80014be:	1b12      	subs	r2, r2, r4
 80014c0:	003c      	movs	r4, r7
 80014c2:	4094      	lsls	r4, r2
 80014c4:	4304      	orrs	r4, r0
 80014c6:	9401      	str	r4, [sp, #4]
 80014c8:	9c01      	ldr	r4, [sp, #4]
 80014ca:	1e62      	subs	r2, r4, #1
 80014cc:	4194      	sbcs	r4, r2
 80014ce:	430c      	orrs	r4, r1
 80014d0:	e5e3      	b.n	800109a <__aeabi_dsub+0xa6>
 80014d2:	4649      	mov	r1, r9
 80014d4:	4319      	orrs	r1, r3
 80014d6:	000b      	movs	r3, r1
 80014d8:	1e5c      	subs	r4, r3, #1
 80014da:	41a3      	sbcs	r3, r4
 80014dc:	1ac4      	subs	r4, r0, r3
 80014de:	42a0      	cmp	r0, r4
 80014e0:	419b      	sbcs	r3, r3
 80014e2:	425b      	negs	r3, r3
 80014e4:	1afb      	subs	r3, r7, r3
 80014e6:	469a      	mov	sl, r3
 80014e8:	465d      	mov	r5, fp
 80014ea:	0016      	movs	r6, r2
 80014ec:	e5dc      	b.n	80010a8 <__aeabi_dsub+0xb4>
 80014ee:	4649      	mov	r1, r9
 80014f0:	4319      	orrs	r1, r3
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dsub+0x502>
 80014f4:	e0ae      	b.n	8001654 <__aeabi_dsub+0x660>
 80014f6:	4661      	mov	r1, ip
 80014f8:	4664      	mov	r4, ip
 80014fa:	3901      	subs	r1, #1
 80014fc:	2c01      	cmp	r4, #1
 80014fe:	d100      	bne.n	8001502 <__aeabi_dsub+0x50e>
 8001500:	e0e0      	b.n	80016c4 <__aeabi_dsub+0x6d0>
 8001502:	4c77      	ldr	r4, [pc, #476]	; (80016e0 <__aeabi_dsub+0x6ec>)
 8001504:	45a4      	cmp	ip, r4
 8001506:	d056      	beq.n	80015b6 <__aeabi_dsub+0x5c2>
 8001508:	468c      	mov	ip, r1
 800150a:	e69a      	b.n	8001242 <__aeabi_dsub+0x24e>
 800150c:	4661      	mov	r1, ip
 800150e:	2220      	movs	r2, #32
 8001510:	003c      	movs	r4, r7
 8001512:	1a52      	subs	r2, r2, r1
 8001514:	4094      	lsls	r4, r2
 8001516:	0001      	movs	r1, r0
 8001518:	4090      	lsls	r0, r2
 800151a:	46a0      	mov	r8, r4
 800151c:	4664      	mov	r4, ip
 800151e:	1e42      	subs	r2, r0, #1
 8001520:	4190      	sbcs	r0, r2
 8001522:	4662      	mov	r2, ip
 8001524:	40e1      	lsrs	r1, r4
 8001526:	4644      	mov	r4, r8
 8001528:	40d7      	lsrs	r7, r2
 800152a:	430c      	orrs	r4, r1
 800152c:	4304      	orrs	r4, r0
 800152e:	44b9      	add	r9, r7
 8001530:	e701      	b.n	8001336 <__aeabi_dsub+0x342>
 8001532:	496b      	ldr	r1, [pc, #428]	; (80016e0 <__aeabi_dsub+0x6ec>)
 8001534:	428a      	cmp	r2, r1
 8001536:	d100      	bne.n	800153a <__aeabi_dsub+0x546>
 8001538:	e70c      	b.n	8001354 <__aeabi_dsub+0x360>
 800153a:	1818      	adds	r0, r3, r0
 800153c:	4298      	cmp	r0, r3
 800153e:	419b      	sbcs	r3, r3
 8001540:	444f      	add	r7, r9
 8001542:	425b      	negs	r3, r3
 8001544:	18fb      	adds	r3, r7, r3
 8001546:	07dc      	lsls	r4, r3, #31
 8001548:	0840      	lsrs	r0, r0, #1
 800154a:	085b      	lsrs	r3, r3, #1
 800154c:	469a      	mov	sl, r3
 800154e:	0016      	movs	r6, r2
 8001550:	4304      	orrs	r4, r0
 8001552:	e6d9      	b.n	8001308 <__aeabi_dsub+0x314>
 8001554:	2a00      	cmp	r2, #0
 8001556:	d000      	beq.n	800155a <__aeabi_dsub+0x566>
 8001558:	e081      	b.n	800165e <__aeabi_dsub+0x66a>
 800155a:	003b      	movs	r3, r7
 800155c:	4303      	orrs	r3, r0
 800155e:	d11d      	bne.n	800159c <__aeabi_dsub+0x5a8>
 8001560:	2280      	movs	r2, #128	; 0x80
 8001562:	2500      	movs	r5, #0
 8001564:	0312      	lsls	r2, r2, #12
 8001566:	e70b      	b.n	8001380 <__aeabi_dsub+0x38c>
 8001568:	08c0      	lsrs	r0, r0, #3
 800156a:	077b      	lsls	r3, r7, #29
 800156c:	465d      	mov	r5, fp
 800156e:	4303      	orrs	r3, r0
 8001570:	08fa      	lsrs	r2, r7, #3
 8001572:	e6d3      	b.n	800131c <__aeabi_dsub+0x328>
 8001574:	1ac4      	subs	r4, r0, r3
 8001576:	42a0      	cmp	r0, r4
 8001578:	4180      	sbcs	r0, r0
 800157a:	464b      	mov	r3, r9
 800157c:	4240      	negs	r0, r0
 800157e:	1aff      	subs	r7, r7, r3
 8001580:	1a3b      	subs	r3, r7, r0
 8001582:	469a      	mov	sl, r3
 8001584:	465d      	mov	r5, fp
 8001586:	e597      	b.n	80010b8 <__aeabi_dsub+0xc4>
 8001588:	1a1c      	subs	r4, r3, r0
 800158a:	464a      	mov	r2, r9
 800158c:	42a3      	cmp	r3, r4
 800158e:	419b      	sbcs	r3, r3
 8001590:	1bd7      	subs	r7, r2, r7
 8001592:	425b      	negs	r3, r3
 8001594:	1afb      	subs	r3, r7, r3
 8001596:	469a      	mov	sl, r3
 8001598:	2601      	movs	r6, #1
 800159a:	e585      	b.n	80010a8 <__aeabi_dsub+0xb4>
 800159c:	08c0      	lsrs	r0, r0, #3
 800159e:	077b      	lsls	r3, r7, #29
 80015a0:	465d      	mov	r5, fp
 80015a2:	4303      	orrs	r3, r0
 80015a4:	08fa      	lsrs	r2, r7, #3
 80015a6:	e6e7      	b.n	8001378 <__aeabi_dsub+0x384>
 80015a8:	464a      	mov	r2, r9
 80015aa:	08db      	lsrs	r3, r3, #3
 80015ac:	0752      	lsls	r2, r2, #29
 80015ae:	4313      	orrs	r3, r2
 80015b0:	464a      	mov	r2, r9
 80015b2:	08d2      	lsrs	r2, r2, #3
 80015b4:	e6b5      	b.n	8001322 <__aeabi_dsub+0x32e>
 80015b6:	08c0      	lsrs	r0, r0, #3
 80015b8:	077b      	lsls	r3, r7, #29
 80015ba:	4303      	orrs	r3, r0
 80015bc:	08fa      	lsrs	r2, r7, #3
 80015be:	e6db      	b.n	8001378 <__aeabi_dsub+0x384>
 80015c0:	4649      	mov	r1, r9
 80015c2:	4319      	orrs	r1, r3
 80015c4:	000b      	movs	r3, r1
 80015c6:	1e59      	subs	r1, r3, #1
 80015c8:	418b      	sbcs	r3, r1
 80015ca:	001c      	movs	r4, r3
 80015cc:	e653      	b.n	8001276 <__aeabi_dsub+0x282>
 80015ce:	464d      	mov	r5, r9
 80015d0:	3c20      	subs	r4, #32
 80015d2:	40e5      	lsrs	r5, r4
 80015d4:	2920      	cmp	r1, #32
 80015d6:	d005      	beq.n	80015e4 <__aeabi_dsub+0x5f0>
 80015d8:	2440      	movs	r4, #64	; 0x40
 80015da:	1a64      	subs	r4, r4, r1
 80015dc:	4649      	mov	r1, r9
 80015de:	40a1      	lsls	r1, r4
 80015e0:	430b      	orrs	r3, r1
 80015e2:	4698      	mov	r8, r3
 80015e4:	4643      	mov	r3, r8
 80015e6:	1e5c      	subs	r4, r3, #1
 80015e8:	41a3      	sbcs	r3, r4
 80015ea:	432b      	orrs	r3, r5
 80015ec:	e776      	b.n	80014dc <__aeabi_dsub+0x4e8>
 80015ee:	2a00      	cmp	r2, #0
 80015f0:	d0e1      	beq.n	80015b6 <__aeabi_dsub+0x5c2>
 80015f2:	003a      	movs	r2, r7
 80015f4:	08db      	lsrs	r3, r3, #3
 80015f6:	4302      	orrs	r2, r0
 80015f8:	d100      	bne.n	80015fc <__aeabi_dsub+0x608>
 80015fa:	e6b8      	b.n	800136e <__aeabi_dsub+0x37a>
 80015fc:	464a      	mov	r2, r9
 80015fe:	0752      	lsls	r2, r2, #29
 8001600:	2480      	movs	r4, #128	; 0x80
 8001602:	4313      	orrs	r3, r2
 8001604:	464a      	mov	r2, r9
 8001606:	0324      	lsls	r4, r4, #12
 8001608:	08d2      	lsrs	r2, r2, #3
 800160a:	4222      	tst	r2, r4
 800160c:	d007      	beq.n	800161e <__aeabi_dsub+0x62a>
 800160e:	08fe      	lsrs	r6, r7, #3
 8001610:	4226      	tst	r6, r4
 8001612:	d104      	bne.n	800161e <__aeabi_dsub+0x62a>
 8001614:	465d      	mov	r5, fp
 8001616:	0032      	movs	r2, r6
 8001618:	08c3      	lsrs	r3, r0, #3
 800161a:	077f      	lsls	r7, r7, #29
 800161c:	433b      	orrs	r3, r7
 800161e:	0f59      	lsrs	r1, r3, #29
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	0749      	lsls	r1, r1, #29
 8001624:	08db      	lsrs	r3, r3, #3
 8001626:	430b      	orrs	r3, r1
 8001628:	e6a6      	b.n	8001378 <__aeabi_dsub+0x384>
 800162a:	1ac4      	subs	r4, r0, r3
 800162c:	42a0      	cmp	r0, r4
 800162e:	4180      	sbcs	r0, r0
 8001630:	464b      	mov	r3, r9
 8001632:	4240      	negs	r0, r0
 8001634:	1aff      	subs	r7, r7, r3
 8001636:	1a3b      	subs	r3, r7, r0
 8001638:	469a      	mov	sl, r3
 800163a:	465d      	mov	r5, fp
 800163c:	2601      	movs	r6, #1
 800163e:	e533      	b.n	80010a8 <__aeabi_dsub+0xb4>
 8001640:	003b      	movs	r3, r7
 8001642:	4303      	orrs	r3, r0
 8001644:	d100      	bne.n	8001648 <__aeabi_dsub+0x654>
 8001646:	e715      	b.n	8001474 <__aeabi_dsub+0x480>
 8001648:	08c0      	lsrs	r0, r0, #3
 800164a:	077b      	lsls	r3, r7, #29
 800164c:	465d      	mov	r5, fp
 800164e:	4303      	orrs	r3, r0
 8001650:	08fa      	lsrs	r2, r7, #3
 8001652:	e666      	b.n	8001322 <__aeabi_dsub+0x32e>
 8001654:	08c0      	lsrs	r0, r0, #3
 8001656:	077b      	lsls	r3, r7, #29
 8001658:	4303      	orrs	r3, r0
 800165a:	08fa      	lsrs	r2, r7, #3
 800165c:	e65e      	b.n	800131c <__aeabi_dsub+0x328>
 800165e:	003a      	movs	r2, r7
 8001660:	08db      	lsrs	r3, r3, #3
 8001662:	4302      	orrs	r2, r0
 8001664:	d100      	bne.n	8001668 <__aeabi_dsub+0x674>
 8001666:	e682      	b.n	800136e <__aeabi_dsub+0x37a>
 8001668:	464a      	mov	r2, r9
 800166a:	0752      	lsls	r2, r2, #29
 800166c:	2480      	movs	r4, #128	; 0x80
 800166e:	4313      	orrs	r3, r2
 8001670:	464a      	mov	r2, r9
 8001672:	0324      	lsls	r4, r4, #12
 8001674:	08d2      	lsrs	r2, r2, #3
 8001676:	4222      	tst	r2, r4
 8001678:	d007      	beq.n	800168a <__aeabi_dsub+0x696>
 800167a:	08fe      	lsrs	r6, r7, #3
 800167c:	4226      	tst	r6, r4
 800167e:	d104      	bne.n	800168a <__aeabi_dsub+0x696>
 8001680:	465d      	mov	r5, fp
 8001682:	0032      	movs	r2, r6
 8001684:	08c3      	lsrs	r3, r0, #3
 8001686:	077f      	lsls	r7, r7, #29
 8001688:	433b      	orrs	r3, r7
 800168a:	0f59      	lsrs	r1, r3, #29
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	08db      	lsrs	r3, r3, #3
 8001690:	0749      	lsls	r1, r1, #29
 8001692:	430b      	orrs	r3, r1
 8001694:	e670      	b.n	8001378 <__aeabi_dsub+0x384>
 8001696:	08c0      	lsrs	r0, r0, #3
 8001698:	077b      	lsls	r3, r7, #29
 800169a:	4303      	orrs	r3, r0
 800169c:	08fa      	lsrs	r2, r7, #3
 800169e:	e640      	b.n	8001322 <__aeabi_dsub+0x32e>
 80016a0:	464c      	mov	r4, r9
 80016a2:	3920      	subs	r1, #32
 80016a4:	40cc      	lsrs	r4, r1
 80016a6:	4661      	mov	r1, ip
 80016a8:	2920      	cmp	r1, #32
 80016aa:	d006      	beq.n	80016ba <__aeabi_dsub+0x6c6>
 80016ac:	4666      	mov	r6, ip
 80016ae:	2140      	movs	r1, #64	; 0x40
 80016b0:	1b89      	subs	r1, r1, r6
 80016b2:	464e      	mov	r6, r9
 80016b4:	408e      	lsls	r6, r1
 80016b6:	4333      	orrs	r3, r6
 80016b8:	4698      	mov	r8, r3
 80016ba:	4643      	mov	r3, r8
 80016bc:	1e59      	subs	r1, r3, #1
 80016be:	418b      	sbcs	r3, r1
 80016c0:	431c      	orrs	r4, r3
 80016c2:	e5d8      	b.n	8001276 <__aeabi_dsub+0x282>
 80016c4:	181c      	adds	r4, r3, r0
 80016c6:	4284      	cmp	r4, r0
 80016c8:	4180      	sbcs	r0, r0
 80016ca:	444f      	add	r7, r9
 80016cc:	46ba      	mov	sl, r7
 80016ce:	4240      	negs	r0, r0
 80016d0:	4482      	add	sl, r0
 80016d2:	e6d9      	b.n	8001488 <__aeabi_dsub+0x494>
 80016d4:	4653      	mov	r3, sl
 80016d6:	4323      	orrs	r3, r4
 80016d8:	d100      	bne.n	80016dc <__aeabi_dsub+0x6e8>
 80016da:	e6cb      	b.n	8001474 <__aeabi_dsub+0x480>
 80016dc:	e614      	b.n	8001308 <__aeabi_dsub+0x314>
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	000007ff 	.word	0x000007ff
 80016e4:	ff7fffff 	.word	0xff7fffff
 80016e8:	000007fe 	.word	0x000007fe
 80016ec:	2300      	movs	r3, #0
 80016ee:	4a01      	ldr	r2, [pc, #4]	; (80016f4 <__aeabi_dsub+0x700>)
 80016f0:	001c      	movs	r4, r3
 80016f2:	e529      	b.n	8001148 <__aeabi_dsub+0x154>
 80016f4:	000007ff 	.word	0x000007ff

080016f8 <__aeabi_i2d>:
 80016f8:	b570      	push	{r4, r5, r6, lr}
 80016fa:	2800      	cmp	r0, #0
 80016fc:	d016      	beq.n	800172c <__aeabi_i2d+0x34>
 80016fe:	17c3      	asrs	r3, r0, #31
 8001700:	18c5      	adds	r5, r0, r3
 8001702:	405d      	eors	r5, r3
 8001704:	0fc4      	lsrs	r4, r0, #31
 8001706:	0028      	movs	r0, r5
 8001708:	f000 f8f4 	bl	80018f4 <__clzsi2>
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <__aeabi_i2d+0x5c>)
 800170e:	1a1b      	subs	r3, r3, r0
 8001710:	280a      	cmp	r0, #10
 8001712:	dc16      	bgt.n	8001742 <__aeabi_i2d+0x4a>
 8001714:	0002      	movs	r2, r0
 8001716:	002e      	movs	r6, r5
 8001718:	3215      	adds	r2, #21
 800171a:	4096      	lsls	r6, r2
 800171c:	220b      	movs	r2, #11
 800171e:	1a12      	subs	r2, r2, r0
 8001720:	40d5      	lsrs	r5, r2
 8001722:	055b      	lsls	r3, r3, #21
 8001724:	032d      	lsls	r5, r5, #12
 8001726:	0b2d      	lsrs	r5, r5, #12
 8001728:	0d5b      	lsrs	r3, r3, #21
 800172a:	e003      	b.n	8001734 <__aeabi_i2d+0x3c>
 800172c:	2400      	movs	r4, #0
 800172e:	2300      	movs	r3, #0
 8001730:	2500      	movs	r5, #0
 8001732:	2600      	movs	r6, #0
 8001734:	051b      	lsls	r3, r3, #20
 8001736:	432b      	orrs	r3, r5
 8001738:	07e4      	lsls	r4, r4, #31
 800173a:	4323      	orrs	r3, r4
 800173c:	0030      	movs	r0, r6
 800173e:	0019      	movs	r1, r3
 8001740:	bd70      	pop	{r4, r5, r6, pc}
 8001742:	380b      	subs	r0, #11
 8001744:	4085      	lsls	r5, r0
 8001746:	055b      	lsls	r3, r3, #21
 8001748:	032d      	lsls	r5, r5, #12
 800174a:	2600      	movs	r6, #0
 800174c:	0b2d      	lsrs	r5, r5, #12
 800174e:	0d5b      	lsrs	r3, r3, #21
 8001750:	e7f0      	b.n	8001734 <__aeabi_i2d+0x3c>
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	0000041e 	.word	0x0000041e

08001758 <__aeabi_f2d>:
 8001758:	b570      	push	{r4, r5, r6, lr}
 800175a:	0242      	lsls	r2, r0, #9
 800175c:	0043      	lsls	r3, r0, #1
 800175e:	0fc4      	lsrs	r4, r0, #31
 8001760:	20fe      	movs	r0, #254	; 0xfe
 8001762:	0e1b      	lsrs	r3, r3, #24
 8001764:	1c59      	adds	r1, r3, #1
 8001766:	0a55      	lsrs	r5, r2, #9
 8001768:	4208      	tst	r0, r1
 800176a:	d00c      	beq.n	8001786 <__aeabi_f2d+0x2e>
 800176c:	21e0      	movs	r1, #224	; 0xe0
 800176e:	0089      	lsls	r1, r1, #2
 8001770:	468c      	mov	ip, r1
 8001772:	076d      	lsls	r5, r5, #29
 8001774:	0b12      	lsrs	r2, r2, #12
 8001776:	4463      	add	r3, ip
 8001778:	051b      	lsls	r3, r3, #20
 800177a:	4313      	orrs	r3, r2
 800177c:	07e4      	lsls	r4, r4, #31
 800177e:	4323      	orrs	r3, r4
 8001780:	0028      	movs	r0, r5
 8001782:	0019      	movs	r1, r3
 8001784:	bd70      	pop	{r4, r5, r6, pc}
 8001786:	2b00      	cmp	r3, #0
 8001788:	d114      	bne.n	80017b4 <__aeabi_f2d+0x5c>
 800178a:	2d00      	cmp	r5, #0
 800178c:	d01b      	beq.n	80017c6 <__aeabi_f2d+0x6e>
 800178e:	0028      	movs	r0, r5
 8001790:	f000 f8b0 	bl	80018f4 <__clzsi2>
 8001794:	280a      	cmp	r0, #10
 8001796:	dc1c      	bgt.n	80017d2 <__aeabi_f2d+0x7a>
 8001798:	230b      	movs	r3, #11
 800179a:	002a      	movs	r2, r5
 800179c:	1a1b      	subs	r3, r3, r0
 800179e:	40da      	lsrs	r2, r3
 80017a0:	0003      	movs	r3, r0
 80017a2:	3315      	adds	r3, #21
 80017a4:	409d      	lsls	r5, r3
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <__aeabi_f2d+0x88>)
 80017a8:	0312      	lsls	r2, r2, #12
 80017aa:	1a1b      	subs	r3, r3, r0
 80017ac:	055b      	lsls	r3, r3, #21
 80017ae:	0b12      	lsrs	r2, r2, #12
 80017b0:	0d5b      	lsrs	r3, r3, #21
 80017b2:	e7e1      	b.n	8001778 <__aeabi_f2d+0x20>
 80017b4:	2d00      	cmp	r5, #0
 80017b6:	d009      	beq.n	80017cc <__aeabi_f2d+0x74>
 80017b8:	0b13      	lsrs	r3, r2, #12
 80017ba:	2280      	movs	r2, #128	; 0x80
 80017bc:	0312      	lsls	r2, r2, #12
 80017be:	431a      	orrs	r2, r3
 80017c0:	076d      	lsls	r5, r5, #29
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <__aeabi_f2d+0x8c>)
 80017c4:	e7d8      	b.n	8001778 <__aeabi_f2d+0x20>
 80017c6:	2300      	movs	r3, #0
 80017c8:	2200      	movs	r2, #0
 80017ca:	e7d5      	b.n	8001778 <__aeabi_f2d+0x20>
 80017cc:	2200      	movs	r2, #0
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <__aeabi_f2d+0x8c>)
 80017d0:	e7d2      	b.n	8001778 <__aeabi_f2d+0x20>
 80017d2:	0003      	movs	r3, r0
 80017d4:	002a      	movs	r2, r5
 80017d6:	3b0b      	subs	r3, #11
 80017d8:	409a      	lsls	r2, r3
 80017da:	2500      	movs	r5, #0
 80017dc:	e7e3      	b.n	80017a6 <__aeabi_f2d+0x4e>
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	00000389 	.word	0x00000389
 80017e4:	000007ff 	.word	0x000007ff

080017e8 <__aeabi_d2f>:
 80017e8:	0002      	movs	r2, r0
 80017ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ec:	004b      	lsls	r3, r1, #1
 80017ee:	030d      	lsls	r5, r1, #12
 80017f0:	0f40      	lsrs	r0, r0, #29
 80017f2:	0d5b      	lsrs	r3, r3, #21
 80017f4:	0fcc      	lsrs	r4, r1, #31
 80017f6:	0a6d      	lsrs	r5, r5, #9
 80017f8:	493a      	ldr	r1, [pc, #232]	; (80018e4 <__aeabi_d2f+0xfc>)
 80017fa:	4305      	orrs	r5, r0
 80017fc:	1c58      	adds	r0, r3, #1
 80017fe:	00d7      	lsls	r7, r2, #3
 8001800:	4208      	tst	r0, r1
 8001802:	d00a      	beq.n	800181a <__aeabi_d2f+0x32>
 8001804:	4938      	ldr	r1, [pc, #224]	; (80018e8 <__aeabi_d2f+0x100>)
 8001806:	1859      	adds	r1, r3, r1
 8001808:	29fe      	cmp	r1, #254	; 0xfe
 800180a:	dd16      	ble.n	800183a <__aeabi_d2f+0x52>
 800180c:	20ff      	movs	r0, #255	; 0xff
 800180e:	2200      	movs	r2, #0
 8001810:	05c0      	lsls	r0, r0, #23
 8001812:	4310      	orrs	r0, r2
 8001814:	07e4      	lsls	r4, r4, #31
 8001816:	4320      	orrs	r0, r4
 8001818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800181a:	2b00      	cmp	r3, #0
 800181c:	d106      	bne.n	800182c <__aeabi_d2f+0x44>
 800181e:	433d      	orrs	r5, r7
 8001820:	d026      	beq.n	8001870 <__aeabi_d2f+0x88>
 8001822:	2205      	movs	r2, #5
 8001824:	0192      	lsls	r2, r2, #6
 8001826:	0a52      	lsrs	r2, r2, #9
 8001828:	b2d8      	uxtb	r0, r3
 800182a:	e7f1      	b.n	8001810 <__aeabi_d2f+0x28>
 800182c:	432f      	orrs	r7, r5
 800182e:	d0ed      	beq.n	800180c <__aeabi_d2f+0x24>
 8001830:	2280      	movs	r2, #128	; 0x80
 8001832:	03d2      	lsls	r2, r2, #15
 8001834:	20ff      	movs	r0, #255	; 0xff
 8001836:	432a      	orrs	r2, r5
 8001838:	e7ea      	b.n	8001810 <__aeabi_d2f+0x28>
 800183a:	2900      	cmp	r1, #0
 800183c:	dd1b      	ble.n	8001876 <__aeabi_d2f+0x8e>
 800183e:	0192      	lsls	r2, r2, #6
 8001840:	1e50      	subs	r0, r2, #1
 8001842:	4182      	sbcs	r2, r0
 8001844:	00ed      	lsls	r5, r5, #3
 8001846:	0f7f      	lsrs	r7, r7, #29
 8001848:	432a      	orrs	r2, r5
 800184a:	433a      	orrs	r2, r7
 800184c:	0753      	lsls	r3, r2, #29
 800184e:	d047      	beq.n	80018e0 <__aeabi_d2f+0xf8>
 8001850:	230f      	movs	r3, #15
 8001852:	4013      	ands	r3, r2
 8001854:	2b04      	cmp	r3, #4
 8001856:	d000      	beq.n	800185a <__aeabi_d2f+0x72>
 8001858:	3204      	adds	r2, #4
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	04db      	lsls	r3, r3, #19
 800185e:	4013      	ands	r3, r2
 8001860:	d03e      	beq.n	80018e0 <__aeabi_d2f+0xf8>
 8001862:	1c48      	adds	r0, r1, #1
 8001864:	29fe      	cmp	r1, #254	; 0xfe
 8001866:	d0d1      	beq.n	800180c <__aeabi_d2f+0x24>
 8001868:	0192      	lsls	r2, r2, #6
 800186a:	0a52      	lsrs	r2, r2, #9
 800186c:	b2c0      	uxtb	r0, r0
 800186e:	e7cf      	b.n	8001810 <__aeabi_d2f+0x28>
 8001870:	2000      	movs	r0, #0
 8001872:	2200      	movs	r2, #0
 8001874:	e7cc      	b.n	8001810 <__aeabi_d2f+0x28>
 8001876:	000a      	movs	r2, r1
 8001878:	3217      	adds	r2, #23
 800187a:	db2f      	blt.n	80018dc <__aeabi_d2f+0xf4>
 800187c:	2680      	movs	r6, #128	; 0x80
 800187e:	0436      	lsls	r6, r6, #16
 8001880:	432e      	orrs	r6, r5
 8001882:	251e      	movs	r5, #30
 8001884:	1a6d      	subs	r5, r5, r1
 8001886:	2d1f      	cmp	r5, #31
 8001888:	dd11      	ble.n	80018ae <__aeabi_d2f+0xc6>
 800188a:	2202      	movs	r2, #2
 800188c:	4252      	negs	r2, r2
 800188e:	1a52      	subs	r2, r2, r1
 8001890:	0031      	movs	r1, r6
 8001892:	40d1      	lsrs	r1, r2
 8001894:	2d20      	cmp	r5, #32
 8001896:	d004      	beq.n	80018a2 <__aeabi_d2f+0xba>
 8001898:	4a14      	ldr	r2, [pc, #80]	; (80018ec <__aeabi_d2f+0x104>)
 800189a:	4694      	mov	ip, r2
 800189c:	4463      	add	r3, ip
 800189e:	409e      	lsls	r6, r3
 80018a0:	4337      	orrs	r7, r6
 80018a2:	003a      	movs	r2, r7
 80018a4:	1e53      	subs	r3, r2, #1
 80018a6:	419a      	sbcs	r2, r3
 80018a8:	430a      	orrs	r2, r1
 80018aa:	2100      	movs	r1, #0
 80018ac:	e7ce      	b.n	800184c <__aeabi_d2f+0x64>
 80018ae:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <__aeabi_d2f+0x108>)
 80018b0:	0038      	movs	r0, r7
 80018b2:	4694      	mov	ip, r2
 80018b4:	4463      	add	r3, ip
 80018b6:	4098      	lsls	r0, r3
 80018b8:	003a      	movs	r2, r7
 80018ba:	1e41      	subs	r1, r0, #1
 80018bc:	4188      	sbcs	r0, r1
 80018be:	409e      	lsls	r6, r3
 80018c0:	40ea      	lsrs	r2, r5
 80018c2:	4330      	orrs	r0, r6
 80018c4:	4302      	orrs	r2, r0
 80018c6:	2100      	movs	r1, #0
 80018c8:	0753      	lsls	r3, r2, #29
 80018ca:	d1c1      	bne.n	8001850 <__aeabi_d2f+0x68>
 80018cc:	2180      	movs	r1, #128	; 0x80
 80018ce:	0013      	movs	r3, r2
 80018d0:	04c9      	lsls	r1, r1, #19
 80018d2:	2001      	movs	r0, #1
 80018d4:	400b      	ands	r3, r1
 80018d6:	420a      	tst	r2, r1
 80018d8:	d1c6      	bne.n	8001868 <__aeabi_d2f+0x80>
 80018da:	e7a3      	b.n	8001824 <__aeabi_d2f+0x3c>
 80018dc:	2300      	movs	r3, #0
 80018de:	e7a0      	b.n	8001822 <__aeabi_d2f+0x3a>
 80018e0:	000b      	movs	r3, r1
 80018e2:	e79f      	b.n	8001824 <__aeabi_d2f+0x3c>
 80018e4:	000007fe 	.word	0x000007fe
 80018e8:	fffffc80 	.word	0xfffffc80
 80018ec:	fffffca2 	.word	0xfffffca2
 80018f0:	fffffc82 	.word	0xfffffc82

080018f4 <__clzsi2>:
 80018f4:	211c      	movs	r1, #28
 80018f6:	2301      	movs	r3, #1
 80018f8:	041b      	lsls	r3, r3, #16
 80018fa:	4298      	cmp	r0, r3
 80018fc:	d301      	bcc.n	8001902 <__clzsi2+0xe>
 80018fe:	0c00      	lsrs	r0, r0, #16
 8001900:	3910      	subs	r1, #16
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	4298      	cmp	r0, r3
 8001906:	d301      	bcc.n	800190c <__clzsi2+0x18>
 8001908:	0a00      	lsrs	r0, r0, #8
 800190a:	3908      	subs	r1, #8
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	4298      	cmp	r0, r3
 8001910:	d301      	bcc.n	8001916 <__clzsi2+0x22>
 8001912:	0900      	lsrs	r0, r0, #4
 8001914:	3904      	subs	r1, #4
 8001916:	a202      	add	r2, pc, #8	; (adr r2, 8001920 <__clzsi2+0x2c>)
 8001918:	5c10      	ldrb	r0, [r2, r0]
 800191a:	1840      	adds	r0, r0, r1
 800191c:	4770      	bx	lr
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	02020304 	.word	0x02020304
 8001924:	01010101 	.word	0x01010101
	...

08001930 <IMU_Init>:
float gyro_z_offset;
#define MAX_DATA_POINTS 100 // Adjust this based on your requirements


void IMU_Init()
{
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
	//Checks to see IMU and Microcontroller is connected
	HAL_StatusTypeDef result = HAL_I2C_IsDeviceReady(&hi2c1, hi2c1.Init.OwnAddress1,  100, 1000);
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <IMU_Init+0x38>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	b299      	uxth	r1, r3
 800193c:	1dfc      	adds	r4, r7, #7
 800193e:	23fa      	movs	r3, #250	; 0xfa
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4809      	ldr	r0, [pc, #36]	; (8001968 <IMU_Init+0x38>)
 8001944:	2264      	movs	r2, #100	; 0x64
 8001946:	f001 fd1f 	bl	8003388 <HAL_I2C_IsDeviceReady>
 800194a:	0003      	movs	r3, r0
 800194c:	7023      	strb	r3, [r4, #0]
	SENSOR_Config();
 800194e:	f000 f80d 	bl	800196c <SENSOR_Config>
	FIFO_Config();
 8001952:	f000 f86d 	bl	8001a30 <FIFO_Config>
	ReadAccelerometerAtRest();
 8001956:	f000 fc11 	bl	800217c <ReadAccelerometerAtRest>
	READ_DATA();
 800195a:	f000 f8b1 	bl	8001ac0 <READ_DATA>
	//CALC_VELOCITY();
}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	46bd      	mov	sp, r7
 8001962:	b003      	add	sp, #12
 8001964:	bd90      	pop	{r4, r7, pc}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	20000040 	.word	0x20000040

0800196c <SENSOR_Config>:

void SENSOR_Config()
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af04      	add	r7, sp, #16
	// turn on accelerometer sensor high performance mode
	uint8_t Acc_Data = 0b10100100;
 8001972:	1dbb      	adds	r3, r7, #6
 8001974:	22a4      	movs	r2, #164	; 0xa4
 8001976:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, hi2c1.Init.OwnAddress1, CTRL1_XL_ADDRESS, 1, &Acc_Data, 1, 1000);
 8001978:	4b2c      	ldr	r3, [pc, #176]	; (8001a2c <SENSOR_Config+0xc0>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	b299      	uxth	r1, r3
 800197e:	482b      	ldr	r0, [pc, #172]	; (8001a2c <SENSOR_Config+0xc0>)
 8001980:	23fa      	movs	r3, #250	; 0xfa
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	9302      	str	r3, [sp, #8]
 8001986:	2301      	movs	r3, #1
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	1dbb      	adds	r3, r7, #6
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	2301      	movs	r3, #1
 8001990:	2210      	movs	r2, #16
 8001992:	f001 fa97 	bl	8002ec4 <HAL_I2C_Mem_Write>
	uint8_t Acc_Control = 0b00010000;
 8001996:	1d7b      	adds	r3, r7, #5
 8001998:	2210      	movs	r2, #16
 800199a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, hi2c1.Init.OwnAddress1, CTRL6_C_ADDRESS, 1, &Acc_Control, 1, 100);
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <SENSOR_Config+0xc0>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	b299      	uxth	r1, r3
 80019a2:	4822      	ldr	r0, [pc, #136]	; (8001a2c <SENSOR_Config+0xc0>)
 80019a4:	2364      	movs	r3, #100	; 0x64
 80019a6:	9302      	str	r3, [sp, #8]
 80019a8:	2301      	movs	r3, #1
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	1d7b      	adds	r3, r7, #5
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2301      	movs	r3, #1
 80019b2:	2215      	movs	r2, #21
 80019b4:	f001 fa86 	bl	8002ec4 <HAL_I2C_Mem_Write>

//	turn on Gyroscope sensor high performance
	uint8_t Gyro_Data = 0b10101100;
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	22ac      	movs	r2, #172	; 0xac
 80019bc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, hi2c1.Init.OwnAddress1, CTRL2_G_ADDRESS, 1, &Gyro_Data, 1, 1000);
 80019be:	4b1b      	ldr	r3, [pc, #108]	; (8001a2c <SENSOR_Config+0xc0>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	b299      	uxth	r1, r3
 80019c4:	4819      	ldr	r0, [pc, #100]	; (8001a2c <SENSOR_Config+0xc0>)
 80019c6:	23fa      	movs	r3, #250	; 0xfa
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	9302      	str	r3, [sp, #8]
 80019cc:	2301      	movs	r3, #1
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2301      	movs	r3, #1
 80019d6:	2211      	movs	r2, #17
 80019d8:	f001 fa74 	bl	8002ec4 <HAL_I2C_Mem_Write>
	uint8_t Gyro_Control = 0b00000000;
 80019dc:	1cfb      	adds	r3, r7, #3
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, hi2c1.Init.OwnAddress1, CTRL7_G_ADDRESS, 1, &Gyro_Control, 1, 1000);
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <SENSOR_Config+0xc0>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	b299      	uxth	r1, r3
 80019e8:	4810      	ldr	r0, [pc, #64]	; (8001a2c <SENSOR_Config+0xc0>)
 80019ea:	23fa      	movs	r3, #250	; 0xfa
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	9302      	str	r3, [sp, #8]
 80019f0:	2301      	movs	r3, #1
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	1cfb      	adds	r3, r7, #3
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2301      	movs	r3, #1
 80019fa:	2216      	movs	r2, #22
 80019fc:	f001 fa62 	bl	8002ec4 <HAL_I2C_Mem_Write>

	uint8_t Master_Config = 0b0001101;
 8001a00:	1dfb      	adds	r3, r7, #7
 8001a02:	220d      	movs	r2, #13
 8001a04:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, hi2c1.Init.OwnAddress1, MASTER_CONFIG_ADDRESS, 1, &Gyro_Control, 1, 1000);
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <SENSOR_Config+0xc0>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	b299      	uxth	r1, r3
 8001a0c:	4807      	ldr	r0, [pc, #28]	; (8001a2c <SENSOR_Config+0xc0>)
 8001a0e:	23fa      	movs	r3, #250	; 0xfa
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	9302      	str	r3, [sp, #8]
 8001a14:	2301      	movs	r3, #1
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	1cfb      	adds	r3, r7, #3
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	221a      	movs	r2, #26
 8001a20:	f001 fa50 	bl	8002ec4 <HAL_I2C_Mem_Write>
}
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b002      	add	sp, #8
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000040 	.word	0x20000040

08001a30 <FIFO_Config>:


void FIFO_Config()
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af04      	add	r7, sp, #16

	uint8_t FIFO_CTRL3 = 0b00010010;
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	2212      	movs	r2, #18
 8001a3a:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef FIFO_CTRL3_Result = HAL_I2C_Mem_Write(&hi2c1, hi2c1.Init.OwnAddress1, FIFO_CTRL3_ADDRESS, 1, &FIFO_CTRL3, 1, 1000);
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <FIFO_Config+0x8c>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	b299      	uxth	r1, r3
 8001a42:	1dfc      	adds	r4, r7, #7
 8001a44:	481d      	ldr	r0, [pc, #116]	; (8001abc <FIFO_Config+0x8c>)
 8001a46:	23fa      	movs	r3, #250	; 0xfa
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	9302      	str	r3, [sp, #8]
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	2301      	movs	r3, #1
 8001a56:	2208      	movs	r2, #8
 8001a58:	f001 fa34 	bl	8002ec4 <HAL_I2C_Mem_Write>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	7023      	strb	r3, [r4, #0]

	uint8_t FIFO_CTRL4 = 0b00010010;
 8001a60:	1cfb      	adds	r3, r7, #3
 8001a62:	2212      	movs	r2, #18
 8001a64:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef FIFO_CTRL4_Result = HAL_I2C_Mem_Write(&hi2c1, hi2c1.Init.OwnAddress1, FIFO_CTRL4_ADDRESS, 1, &FIFO_CTRL4, 1, 1000);
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <FIFO_Config+0x8c>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	b299      	uxth	r1, r3
 8001a6c:	1dbc      	adds	r4, r7, #6
 8001a6e:	4813      	ldr	r0, [pc, #76]	; (8001abc <FIFO_Config+0x8c>)
 8001a70:	23fa      	movs	r3, #250	; 0xfa
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	2301      	movs	r3, #1
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	1cfb      	adds	r3, r7, #3
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2301      	movs	r3, #1
 8001a80:	2209      	movs	r2, #9
 8001a82:	f001 fa1f 	bl	8002ec4 <HAL_I2C_Mem_Write>
 8001a86:	0003      	movs	r3, r0
 8001a88:	7023      	strb	r3, [r4, #0]

	uint8_t FIFO_CTRL5 = 0b01010110;
 8001a8a:	1cbb      	adds	r3, r7, #2
 8001a8c:	2256      	movs	r2, #86	; 0x56
 8001a8e:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef FIFO_CTRL5_Result = HAL_I2C_Mem_Write(&hi2c1, hi2c1.Init.OwnAddress1, FIFO_CTRL5_ADDRESS, 1, &FIFO_CTRL5, 1, 1000);
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <FIFO_Config+0x8c>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	b299      	uxth	r1, r3
 8001a96:	1d7c      	adds	r4, r7, #5
 8001a98:	4808      	ldr	r0, [pc, #32]	; (8001abc <FIFO_Config+0x8c>)
 8001a9a:	23fa      	movs	r3, #250	; 0xfa
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	9302      	str	r3, [sp, #8]
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	1cbb      	adds	r3, r7, #2
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	220a      	movs	r2, #10
 8001aac:	f001 fa0a 	bl	8002ec4 <HAL_I2C_Mem_Write>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	7023      	strb	r3, [r4, #0]
}
 8001ab4:	46c0      	nop			; (mov r8, r8)
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	b003      	add	sp, #12
 8001aba:	bd90      	pop	{r4, r7, pc}
 8001abc:	20000040 	.word	0x20000040

08001ac0 <READ_DATA>:

void READ_DATA()
{
 8001ac0:	b5b0      	push	{r4, r5, r7, lr}
 8001ac2:	4c04      	ldr	r4, [pc, #16]	; (8001ad4 <READ_DATA+0x14>)
 8001ac4:	44a5      	add	sp, r4
 8001ac6:	af04      	add	r7, sp, #16

	float gyro_x_data[MAX_DATA_POINTS];
	float gyro_y_data[MAX_DATA_POINTS];
	float gyro_z_data[MAX_DATA_POINTS];

	int data_index = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	4a03      	ldr	r2, [pc, #12]	; (8001ad8 <READ_DATA+0x18>)
 8001acc:	18ba      	adds	r2, r7, r2
 8001ace:	6013      	str	r3, [r2, #0]
	while(data_index != MAX_DATA_POINTS) {
 8001ad0:	e317      	b.n	8002102 <READ_DATA+0x642>
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	fffff628 	.word	0xfffff628
 8001ad8:	000009c4 	.word	0x000009c4
		//Angular rate sensitivity: FS = 2000 is 70


		//Read Accelerometer X
		uint8_t Acc_X_L[1];
		HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTX_L_XL_ADDRESS, 1, &Acc_X_L[0], 1, 100);
 8001adc:	4bf4      	ldr	r3, [pc, #976]	; (8001eb0 <READ_DATA+0x3f0>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	b299      	uxth	r1, r3
 8001ae2:	48f3      	ldr	r0, [pc, #972]	; (8001eb0 <READ_DATA+0x3f0>)
 8001ae4:	2364      	movs	r3, #100	; 0x64
 8001ae6:	9302      	str	r3, [sp, #8]
 8001ae8:	2301      	movs	r3, #1
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	2330      	movs	r3, #48	; 0x30
 8001aee:	18fb      	adds	r3, r7, r3
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2301      	movs	r3, #1
 8001af4:	2228      	movs	r2, #40	; 0x28
 8001af6:	f001 fb13 	bl	8003120 <HAL_I2C_Mem_Read>
		uint8_t Acc_X_H[1];
		HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTX_H_XL_ADDRESS, 1, &Acc_X_H[0], 1, 100);
 8001afa:	4bed      	ldr	r3, [pc, #948]	; (8001eb0 <READ_DATA+0x3f0>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	b299      	uxth	r1, r3
 8001b00:	48eb      	ldr	r0, [pc, #940]	; (8001eb0 <READ_DATA+0x3f0>)
 8001b02:	2364      	movs	r3, #100	; 0x64
 8001b04:	9302      	str	r3, [sp, #8]
 8001b06:	2301      	movs	r3, #1
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	232c      	movs	r3, #44	; 0x2c
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	2301      	movs	r3, #1
 8001b12:	2229      	movs	r2, #41	; 0x29
 8001b14:	f001 fb04 	bl	8003120 <HAL_I2C_Mem_Read>
		uint16_t acc_x_raw = (Acc_X_H[0] << 8) | Acc_X_L[0];
 8001b18:	4be6      	ldr	r3, [pc, #920]	; (8001eb4 <READ_DATA+0x3f4>)
 8001b1a:	49e7      	ldr	r1, [pc, #924]	; (8001eb8 <READ_DATA+0x3f8>)
 8001b1c:	185b      	adds	r3, r3, r1
 8001b1e:	19db      	adds	r3, r3, r7
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	4be5      	ldr	r3, [pc, #916]	; (8001ebc <READ_DATA+0x3fc>)
 8001b28:	185b      	adds	r3, r3, r1
 8001b2a:	19db      	adds	r3, r3, r7
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b21a      	sxth	r2, r3
 8001b34:	49e2      	ldr	r1, [pc, #904]	; (8001ec0 <READ_DATA+0x400>)
 8001b36:	187b      	adds	r3, r7, r1
 8001b38:	801a      	strh	r2, [r3, #0]
	    uint16_t raw_value;
	    if(acc_x_raw > 32768) {
 8001b3a:	187b      	adds	r3, r7, r1
 8001b3c:	881a      	ldrh	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d904      	bls.n	8001b50 <READ_DATA+0x90>
	    	acc_x_raw = (~acc_x_raw + 1);
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	187a      	adds	r2, r7, r1
 8001b4a:	8812      	ldrh	r2, [r2, #0]
 8001b4c:	4252      	negs	r2, r2
 8001b4e:	801a      	strh	r2, [r3, #0]
	    }
		float acc_x = (9.8 * (acc_x_raw *ACC_SENS) / 1000) - acc_x_offset;
 8001b50:	4bdb      	ldr	r3, [pc, #876]	; (8001ec0 <READ_DATA+0x400>)
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	0018      	movs	r0, r3
 8001b58:	f7ff fdce 	bl	80016f8 <__aeabi_i2d>
 8001b5c:	4ad9      	ldr	r2, [pc, #868]	; (8001ec4 <READ_DATA+0x404>)
 8001b5e:	4bda      	ldr	r3, [pc, #872]	; (8001ec8 <READ_DATA+0x408>)
 8001b60:	f7fe ff86 	bl	8000a70 <__aeabi_dmul>
 8001b64:	0002      	movs	r2, r0
 8001b66:	000b      	movs	r3, r1
 8001b68:	0010      	movs	r0, r2
 8001b6a:	0019      	movs	r1, r3
 8001b6c:	4ad7      	ldr	r2, [pc, #860]	; (8001ecc <READ_DATA+0x40c>)
 8001b6e:	4bd8      	ldr	r3, [pc, #864]	; (8001ed0 <READ_DATA+0x410>)
 8001b70:	f7fe ff7e 	bl	8000a70 <__aeabi_dmul>
 8001b74:	0002      	movs	r2, r0
 8001b76:	000b      	movs	r3, r1
 8001b78:	0010      	movs	r0, r2
 8001b7a:	0019      	movs	r1, r3
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	4bd5      	ldr	r3, [pc, #852]	; (8001ed4 <READ_DATA+0x414>)
 8001b80:	f7fe fc88 	bl	8000494 <__aeabi_ddiv>
 8001b84:	0002      	movs	r2, r0
 8001b86:	000b      	movs	r3, r1
 8001b88:	0014      	movs	r4, r2
 8001b8a:	001d      	movs	r5, r3
 8001b8c:	4bd2      	ldr	r3, [pc, #840]	; (8001ed8 <READ_DATA+0x418>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	1c18      	adds	r0, r3, #0
 8001b92:	f7ff fde1 	bl	8001758 <__aeabi_f2d>
 8001b96:	0002      	movs	r2, r0
 8001b98:	000b      	movs	r3, r1
 8001b9a:	0020      	movs	r0, r4
 8001b9c:	0029      	movs	r1, r5
 8001b9e:	f7ff fa29 	bl	8000ff4 <__aeabi_dsub>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	000b      	movs	r3, r1
 8001ba6:	0010      	movs	r0, r2
 8001ba8:	0019      	movs	r1, r3
 8001baa:	f7ff fe1d 	bl	80017e8 <__aeabi_d2f>
 8001bae:	1c03      	adds	r3, r0, #0
 8001bb0:	4aca      	ldr	r2, [pc, #808]	; (8001edc <READ_DATA+0x41c>)
 8001bb2:	18ba      	adds	r2, r7, r2
 8001bb4:	6013      	str	r3, [r2, #0]
		//Read Accelerometer Y
		uint8_t Acc_Y_L[1];
		HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTY_L_XL_ADDRESS, 1, &Acc_Y_L[0], 1, 100);
 8001bb6:	4bbe      	ldr	r3, [pc, #760]	; (8001eb0 <READ_DATA+0x3f0>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	b299      	uxth	r1, r3
 8001bbc:	48bc      	ldr	r0, [pc, #752]	; (8001eb0 <READ_DATA+0x3f0>)
 8001bbe:	2364      	movs	r3, #100	; 0x64
 8001bc0:	9302      	str	r3, [sp, #8]
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	2328      	movs	r3, #40	; 0x28
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	2301      	movs	r3, #1
 8001bce:	222a      	movs	r2, #42	; 0x2a
 8001bd0:	f001 faa6 	bl	8003120 <HAL_I2C_Mem_Read>
		uint8_t Acc_Y_H[1];
		HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTY_H_XL_ADDRESS, 1, &Acc_Y_H[0], 1, 100);
 8001bd4:	4bb6      	ldr	r3, [pc, #728]	; (8001eb0 <READ_DATA+0x3f0>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	b299      	uxth	r1, r3
 8001bda:	48b5      	ldr	r0, [pc, #724]	; (8001eb0 <READ_DATA+0x3f0>)
 8001bdc:	2364      	movs	r3, #100	; 0x64
 8001bde:	9302      	str	r3, [sp, #8]
 8001be0:	2301      	movs	r3, #1
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	2324      	movs	r3, #36	; 0x24
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	2301      	movs	r3, #1
 8001bec:	222b      	movs	r2, #43	; 0x2b
 8001bee:	f001 fa97 	bl	8003120 <HAL_I2C_Mem_Read>
		uint16_t acc_y_raw = Acc_Y_L[0] | (Acc_Y_H[0] << 8);
 8001bf2:	4bbb      	ldr	r3, [pc, #748]	; (8001ee0 <READ_DATA+0x420>)
 8001bf4:	49b0      	ldr	r1, [pc, #704]	; (8001eb8 <READ_DATA+0x3f8>)
 8001bf6:	185b      	adds	r3, r3, r1
 8001bf8:	19db      	adds	r3, r3, r7
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	4bb9      	ldr	r3, [pc, #740]	; (8001ee4 <READ_DATA+0x424>)
 8001c00:	185b      	adds	r3, r3, r1
 8001c02:	19db      	adds	r3, r3, r7
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	219c      	movs	r1, #156	; 0x9c
 8001c10:	0109      	lsls	r1, r1, #4
 8001c12:	187b      	adds	r3, r7, r1
 8001c14:	801a      	strh	r2, [r3, #0]
	    if(acc_y_raw > 32768) {
 8001c16:	187b      	adds	r3, r7, r1
 8001c18:	881a      	ldrh	r2, [r3, #0]
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	021b      	lsls	r3, r3, #8
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d904      	bls.n	8001c2c <READ_DATA+0x16c>
	    	acc_y_raw = (~acc_y_raw + 1);
 8001c22:	187b      	adds	r3, r7, r1
 8001c24:	187a      	adds	r2, r7, r1
 8001c26:	8812      	ldrh	r2, [r2, #0]
 8001c28:	4252      	negs	r2, r2
 8001c2a:	801a      	strh	r2, [r3, #0]
	    }
		float acc_y = (9.8 * (acc_y_raw *ACC_SENS) / 1000) - acc_y_offset;
 8001c2c:	239c      	movs	r3, #156	; 0x9c
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	0018      	movs	r0, r3
 8001c36:	f7ff fd5f 	bl	80016f8 <__aeabi_i2d>
 8001c3a:	4aa2      	ldr	r2, [pc, #648]	; (8001ec4 <READ_DATA+0x404>)
 8001c3c:	4ba2      	ldr	r3, [pc, #648]	; (8001ec8 <READ_DATA+0x408>)
 8001c3e:	f7fe ff17 	bl	8000a70 <__aeabi_dmul>
 8001c42:	0002      	movs	r2, r0
 8001c44:	000b      	movs	r3, r1
 8001c46:	0010      	movs	r0, r2
 8001c48:	0019      	movs	r1, r3
 8001c4a:	4aa0      	ldr	r2, [pc, #640]	; (8001ecc <READ_DATA+0x40c>)
 8001c4c:	4ba0      	ldr	r3, [pc, #640]	; (8001ed0 <READ_DATA+0x410>)
 8001c4e:	f7fe ff0f 	bl	8000a70 <__aeabi_dmul>
 8001c52:	0002      	movs	r2, r0
 8001c54:	000b      	movs	r3, r1
 8001c56:	0010      	movs	r0, r2
 8001c58:	0019      	movs	r1, r3
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	4b9d      	ldr	r3, [pc, #628]	; (8001ed4 <READ_DATA+0x414>)
 8001c5e:	f7fe fc19 	bl	8000494 <__aeabi_ddiv>
 8001c62:	0002      	movs	r2, r0
 8001c64:	000b      	movs	r3, r1
 8001c66:	0014      	movs	r4, r2
 8001c68:	001d      	movs	r5, r3
 8001c6a:	4b9f      	ldr	r3, [pc, #636]	; (8001ee8 <READ_DATA+0x428>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	1c18      	adds	r0, r3, #0
 8001c70:	f7ff fd72 	bl	8001758 <__aeabi_f2d>
 8001c74:	0002      	movs	r2, r0
 8001c76:	000b      	movs	r3, r1
 8001c78:	0020      	movs	r0, r4
 8001c7a:	0029      	movs	r1, r5
 8001c7c:	f7ff f9ba 	bl	8000ff4 <__aeabi_dsub>
 8001c80:	0002      	movs	r2, r0
 8001c82:	000b      	movs	r3, r1
 8001c84:	0010      	movs	r0, r2
 8001c86:	0019      	movs	r1, r3
 8001c88:	f7ff fdae 	bl	80017e8 <__aeabi_d2f>
 8001c8c:	1c03      	adds	r3, r0, #0
 8001c8e:	229b      	movs	r2, #155	; 0x9b
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	18ba      	adds	r2, r7, r2
 8001c94:	6013      	str	r3, [r2, #0]
		//Read Accelerometer Z
		uint8_t Acc_Z_L[1];
		HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTZ_L_XL_ADDRESS, 1, &Acc_Z_L[0], 1, 100);
 8001c96:	4b86      	ldr	r3, [pc, #536]	; (8001eb0 <READ_DATA+0x3f0>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	b299      	uxth	r1, r3
 8001c9c:	4884      	ldr	r0, [pc, #528]	; (8001eb0 <READ_DATA+0x3f0>)
 8001c9e:	2364      	movs	r3, #100	; 0x64
 8001ca0:	9302      	str	r3, [sp, #8]
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	2320      	movs	r3, #32
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2301      	movs	r3, #1
 8001cae:	222c      	movs	r2, #44	; 0x2c
 8001cb0:	f001 fa36 	bl	8003120 <HAL_I2C_Mem_Read>
		uint8_t Acc_Z_H[1];
		HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTZ_H_XL_ADDRESS, 1, &Acc_Z_H[0], 1, 100);
 8001cb4:	4b7e      	ldr	r3, [pc, #504]	; (8001eb0 <READ_DATA+0x3f0>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	b299      	uxth	r1, r3
 8001cba:	487d      	ldr	r0, [pc, #500]	; (8001eb0 <READ_DATA+0x3f0>)
 8001cbc:	2364      	movs	r3, #100	; 0x64
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	231c      	movs	r3, #28
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2301      	movs	r3, #1
 8001ccc:	222d      	movs	r2, #45	; 0x2d
 8001cce:	f001 fa27 	bl	8003120 <HAL_I2C_Mem_Read>
		uint16_t acc_z_raw = Acc_Z_L[0] | (Acc_Z_H[0] << 8);
 8001cd2:	4b86      	ldr	r3, [pc, #536]	; (8001eec <READ_DATA+0x42c>)
 8001cd4:	4978      	ldr	r1, [pc, #480]	; (8001eb8 <READ_DATA+0x3f8>)
 8001cd6:	185b      	adds	r3, r3, r1
 8001cd8:	19db      	adds	r3, r3, r7
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	b21a      	sxth	r2, r3
 8001cde:	4b84      	ldr	r3, [pc, #528]	; (8001ef0 <READ_DATA+0x430>)
 8001ce0:	185b      	adds	r3, r3, r1
 8001ce2:	19db      	adds	r3, r3, r7
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	4313      	orrs	r3, r2
 8001cec:	b21a      	sxth	r2, r3
 8001cee:	4981      	ldr	r1, [pc, #516]	; (8001ef4 <READ_DATA+0x434>)
 8001cf0:	187b      	adds	r3, r7, r1
 8001cf2:	801a      	strh	r2, [r3, #0]
	    if(acc_z_raw > 32768) {
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	881a      	ldrh	r2, [r3, #0]
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d904      	bls.n	8001d0a <READ_DATA+0x24a>
	    	acc_z_raw = (~acc_z_raw + 1);
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	187a      	adds	r2, r7, r1
 8001d04:	8812      	ldrh	r2, [r2, #0]
 8001d06:	4252      	negs	r2, r2
 8001d08:	801a      	strh	r2, [r3, #0]
	    }
		float acc_z = (9.8 * (acc_z_raw *ACC_SENS) / 1000) - acc_z_offset;
 8001d0a:	4b7a      	ldr	r3, [pc, #488]	; (8001ef4 <READ_DATA+0x434>)
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	0018      	movs	r0, r3
 8001d12:	f7ff fcf1 	bl	80016f8 <__aeabi_i2d>
 8001d16:	4a6b      	ldr	r2, [pc, #428]	; (8001ec4 <READ_DATA+0x404>)
 8001d18:	4b6b      	ldr	r3, [pc, #428]	; (8001ec8 <READ_DATA+0x408>)
 8001d1a:	f7fe fea9 	bl	8000a70 <__aeabi_dmul>
 8001d1e:	0002      	movs	r2, r0
 8001d20:	000b      	movs	r3, r1
 8001d22:	0010      	movs	r0, r2
 8001d24:	0019      	movs	r1, r3
 8001d26:	4a69      	ldr	r2, [pc, #420]	; (8001ecc <READ_DATA+0x40c>)
 8001d28:	4b69      	ldr	r3, [pc, #420]	; (8001ed0 <READ_DATA+0x410>)
 8001d2a:	f7fe fea1 	bl	8000a70 <__aeabi_dmul>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	000b      	movs	r3, r1
 8001d32:	0010      	movs	r0, r2
 8001d34:	0019      	movs	r1, r3
 8001d36:	2200      	movs	r2, #0
 8001d38:	4b66      	ldr	r3, [pc, #408]	; (8001ed4 <READ_DATA+0x414>)
 8001d3a:	f7fe fbab 	bl	8000494 <__aeabi_ddiv>
 8001d3e:	0002      	movs	r2, r0
 8001d40:	000b      	movs	r3, r1
 8001d42:	0014      	movs	r4, r2
 8001d44:	001d      	movs	r5, r3
 8001d46:	4b6c      	ldr	r3, [pc, #432]	; (8001ef8 <READ_DATA+0x438>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	1c18      	adds	r0, r3, #0
 8001d4c:	f7ff fd04 	bl	8001758 <__aeabi_f2d>
 8001d50:	0002      	movs	r2, r0
 8001d52:	000b      	movs	r3, r1
 8001d54:	0020      	movs	r0, r4
 8001d56:	0029      	movs	r1, r5
 8001d58:	f7ff f94c 	bl	8000ff4 <__aeabi_dsub>
 8001d5c:	0002      	movs	r2, r0
 8001d5e:	000b      	movs	r3, r1
 8001d60:	0010      	movs	r0, r2
 8001d62:	0019      	movs	r1, r3
 8001d64:	f7ff fd40 	bl	80017e8 <__aeabi_d2f>
 8001d68:	1c03      	adds	r3, r0, #0
 8001d6a:	4a64      	ldr	r2, [pc, #400]	; (8001efc <READ_DATA+0x43c>)
 8001d6c:	18ba      	adds	r2, r7, r2
 8001d6e:	6013      	str	r3, [r2, #0]

		//Read Gyroscope X
		uint8_t Gyro_X_L[1];
		HAL_StatusTypeDef  X = HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTX_L_G_ADDRESS, 1, &Gyro_X_L[0], 1, 100);
 8001d70:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <READ_DATA+0x3f0>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	b299      	uxth	r1, r3
 8001d76:	4b62      	ldr	r3, [pc, #392]	; (8001f00 <READ_DATA+0x440>)
 8001d78:	18fc      	adds	r4, r7, r3
 8001d7a:	484d      	ldr	r0, [pc, #308]	; (8001eb0 <READ_DATA+0x3f0>)
 8001d7c:	2364      	movs	r3, #100	; 0x64
 8001d7e:	9302      	str	r3, [sp, #8]
 8001d80:	2301      	movs	r3, #1
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	2318      	movs	r3, #24
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	2222      	movs	r2, #34	; 0x22
 8001d8e:	f001 f9c7 	bl	8003120 <HAL_I2C_Mem_Read>
 8001d92:	0003      	movs	r3, r0
 8001d94:	7023      	strb	r3, [r4, #0]
		uint8_t Gyro_X_H[1];
		HAL_StatusTypeDef X2 = HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTX_H_G_ADDRESS, 1, &Gyro_X_H[0], 1, 100);
 8001d96:	4b46      	ldr	r3, [pc, #280]	; (8001eb0 <READ_DATA+0x3f0>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	b299      	uxth	r1, r3
 8001d9c:	4b59      	ldr	r3, [pc, #356]	; (8001f04 <READ_DATA+0x444>)
 8001d9e:	18fc      	adds	r4, r7, r3
 8001da0:	4843      	ldr	r0, [pc, #268]	; (8001eb0 <READ_DATA+0x3f0>)
 8001da2:	2364      	movs	r3, #100	; 0x64
 8001da4:	9302      	str	r3, [sp, #8]
 8001da6:	2301      	movs	r3, #1
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	2314      	movs	r3, #20
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	2301      	movs	r3, #1
 8001db2:	2223      	movs	r2, #35	; 0x23
 8001db4:	f001 f9b4 	bl	8003120 <HAL_I2C_Mem_Read>
 8001db8:	0003      	movs	r3, r0
 8001dba:	7023      	strb	r3, [r4, #0]
		uint16_t gyro_x_raw = Gyro_X_L[0] | (Gyro_X_H[0] << 8);
 8001dbc:	4b52      	ldr	r3, [pc, #328]	; (8001f08 <READ_DATA+0x448>)
 8001dbe:	493e      	ldr	r1, [pc, #248]	; (8001eb8 <READ_DATA+0x3f8>)
 8001dc0:	185b      	adds	r3, r3, r1
 8001dc2:	19db      	adds	r3, r3, r7
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	b21a      	sxth	r2, r3
 8001dc8:	4b50      	ldr	r3, [pc, #320]	; (8001f0c <READ_DATA+0x44c>)
 8001dca:	185b      	adds	r3, r3, r1
 8001dcc:	19db      	adds	r3, r3, r7
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	b21b      	sxth	r3, r3
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	b21a      	sxth	r2, r3
 8001dd8:	494d      	ldr	r1, [pc, #308]	; (8001f10 <READ_DATA+0x450>)
 8001dda:	187b      	adds	r3, r7, r1
 8001ddc:	801a      	strh	r2, [r3, #0]
	    if(gyro_x_raw > 32768) {
 8001dde:	187b      	adds	r3, r7, r1
 8001de0:	881a      	ldrh	r2, [r3, #0]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d904      	bls.n	8001df4 <READ_DATA+0x334>
	    	gyro_x_raw = (~gyro_x_raw + 1);
 8001dea:	187b      	adds	r3, r7, r1
 8001dec:	187a      	adds	r2, r7, r1
 8001dee:	8812      	ldrh	r2, [r2, #0]
 8001df0:	4252      	negs	r2, r2
 8001df2:	801a      	strh	r2, [r3, #0]
	    }
		float gyro_x = (9.8 * (gyro_x_raw *GYRO_SENS/1000)) - gyro_x_offset;
 8001df4:	4b46      	ldr	r3, [pc, #280]	; (8001f10 <READ_DATA+0x450>)
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	2246      	movs	r2, #70	; 0x46
 8001dfc:	4353      	muls	r3, r2
 8001dfe:	22fa      	movs	r2, #250	; 0xfa
 8001e00:	0091      	lsls	r1, r2, #2
 8001e02:	0018      	movs	r0, r3
 8001e04:	f7fe fa08 	bl	8000218 <__divsi3>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f7ff fc74 	bl	80016f8 <__aeabi_i2d>
 8001e10:	4a2e      	ldr	r2, [pc, #184]	; (8001ecc <READ_DATA+0x40c>)
 8001e12:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <READ_DATA+0x410>)
 8001e14:	f7fe fe2c 	bl	8000a70 <__aeabi_dmul>
 8001e18:	0002      	movs	r2, r0
 8001e1a:	000b      	movs	r3, r1
 8001e1c:	0014      	movs	r4, r2
 8001e1e:	001d      	movs	r5, r3
 8001e20:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <READ_DATA+0x454>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	1c18      	adds	r0, r3, #0
 8001e26:	f7ff fc97 	bl	8001758 <__aeabi_f2d>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	000b      	movs	r3, r1
 8001e2e:	0020      	movs	r0, r4
 8001e30:	0029      	movs	r1, r5
 8001e32:	f7ff f8df 	bl	8000ff4 <__aeabi_dsub>
 8001e36:	0002      	movs	r2, r0
 8001e38:	000b      	movs	r3, r1
 8001e3a:	0010      	movs	r0, r2
 8001e3c:	0019      	movs	r1, r3
 8001e3e:	f7ff fcd3 	bl	80017e8 <__aeabi_d2f>
 8001e42:	1c03      	adds	r3, r0, #0
 8001e44:	4a34      	ldr	r2, [pc, #208]	; (8001f18 <READ_DATA+0x458>)
 8001e46:	18ba      	adds	r2, r7, r2
 8001e48:	6013      	str	r3, [r2, #0]
		//Read Gyroscope Y
		uint8_t Gyro_Y_L[1];
		HAL_StatusTypeDef Y = HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTY_L_G_ADDRESS, 1, &Gyro_Y_L[0], 1, 100);
 8001e4a:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <READ_DATA+0x3f0>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	b299      	uxth	r1, r3
 8001e50:	4b32      	ldr	r3, [pc, #200]	; (8001f1c <READ_DATA+0x45c>)
 8001e52:	18fc      	adds	r4, r7, r3
 8001e54:	4816      	ldr	r0, [pc, #88]	; (8001eb0 <READ_DATA+0x3f0>)
 8001e56:	2364      	movs	r3, #100	; 0x64
 8001e58:	9302      	str	r3, [sp, #8]
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	9301      	str	r3, [sp, #4]
 8001e5e:	2310      	movs	r3, #16
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2301      	movs	r3, #1
 8001e66:	2224      	movs	r2, #36	; 0x24
 8001e68:	f001 f95a 	bl	8003120 <HAL_I2C_Mem_Read>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	7023      	strb	r3, [r4, #0]
		uint8_t Gyro_Y_H[1];
		HAL_StatusTypeDef Y2 = HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTY_H_G_ADDRESS, 1, &Gyro_Y_H[0], 1, 100);
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <READ_DATA+0x3f0>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	b299      	uxth	r1, r3
 8001e76:	4b2a      	ldr	r3, [pc, #168]	; (8001f20 <READ_DATA+0x460>)
 8001e78:	18fc      	adds	r4, r7, r3
 8001e7a:	480d      	ldr	r0, [pc, #52]	; (8001eb0 <READ_DATA+0x3f0>)
 8001e7c:	2364      	movs	r3, #100	; 0x64
 8001e7e:	9302      	str	r3, [sp, #8]
 8001e80:	2301      	movs	r3, #1
 8001e82:	9301      	str	r3, [sp, #4]
 8001e84:	230c      	movs	r3, #12
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	2225      	movs	r2, #37	; 0x25
 8001e8e:	f001 f947 	bl	8003120 <HAL_I2C_Mem_Read>
 8001e92:	0003      	movs	r3, r0
 8001e94:	7023      	strb	r3, [r4, #0]
		uint16_t gyro_y_raw = Gyro_Y_L[0] | (Gyro_Y_H[0] << 8);
 8001e96:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <READ_DATA+0x464>)
 8001e98:	4907      	ldr	r1, [pc, #28]	; (8001eb8 <READ_DATA+0x3f8>)
 8001e9a:	185b      	adds	r3, r3, r1
 8001e9c:	19db      	adds	r3, r3, r7
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	b21a      	sxth	r2, r3
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <READ_DATA+0x468>)
 8001ea4:	185b      	adds	r3, r3, r1
 8001ea6:	19db      	adds	r3, r3, r7
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	e03e      	b.n	8001f2c <READ_DATA+0x46c>
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	20000040 	.word	0x20000040
 8001eb4:	fffff664 	.word	0xfffff664
 8001eb8:	000009c8 	.word	0x000009c8
 8001ebc:	fffff668 	.word	0xfffff668
 8001ec0:	000009c2 	.word	0x000009c2
 8001ec4:	5a1cac08 	.word	0x5a1cac08
 8001ec8:	3fdf3b64 	.word	0x3fdf3b64
 8001ecc:	9999999a 	.word	0x9999999a
 8001ed0:	40239999 	.word	0x40239999
 8001ed4:	408f4000 	.word	0x408f4000
 8001ed8:	20000028 	.word	0x20000028
 8001edc:	000009b4 	.word	0x000009b4
 8001ee0:	fffff660 	.word	0xfffff660
 8001ee4:	fffff65c 	.word	0xfffff65c
 8001ee8:	2000002c 	.word	0x2000002c
 8001eec:	fffff658 	.word	0xfffff658
 8001ef0:	fffff654 	.word	0xfffff654
 8001ef4:	000009be 	.word	0x000009be
 8001ef8:	20000030 	.word	0x20000030
 8001efc:	000009ac 	.word	0x000009ac
 8001f00:	000009ab 	.word	0x000009ab
 8001f04:	000009aa 	.word	0x000009aa
 8001f08:	fffff650 	.word	0xfffff650
 8001f0c:	fffff64c 	.word	0xfffff64c
 8001f10:	000009bc 	.word	0x000009bc
 8001f14:	20000034 	.word	0x20000034
 8001f18:	000009a4 	.word	0x000009a4
 8001f1c:	000009a3 	.word	0x000009a3
 8001f20:	000009a2 	.word	0x000009a2
 8001f24:	fffff648 	.word	0xfffff648
 8001f28:	fffff644 	.word	0xfffff644
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	b21a      	sxth	r2, r3
 8001f32:	497a      	ldr	r1, [pc, #488]	; (800211c <READ_DATA+0x65c>)
 8001f34:	187b      	adds	r3, r7, r1
 8001f36:	801a      	strh	r2, [r3, #0]
	    if(gyro_y_raw > 32768) {
 8001f38:	187b      	adds	r3, r7, r1
 8001f3a:	881a      	ldrh	r2, [r3, #0]
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d904      	bls.n	8001f4e <READ_DATA+0x48e>
	    	gyro_y_raw = (~gyro_y_raw + 1);
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	187a      	adds	r2, r7, r1
 8001f48:	8812      	ldrh	r2, [r2, #0]
 8001f4a:	4252      	negs	r2, r2
 8001f4c:	801a      	strh	r2, [r3, #0]
	    }
		float gyro_y = (9.8*(gyro_y_raw *GYRO_SENS/1000)) - gyro_y_offset;
 8001f4e:	4b73      	ldr	r3, [pc, #460]	; (800211c <READ_DATA+0x65c>)
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	2246      	movs	r2, #70	; 0x46
 8001f56:	4353      	muls	r3, r2
 8001f58:	22fa      	movs	r2, #250	; 0xfa
 8001f5a:	0091      	lsls	r1, r2, #2
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f7fe f95b 	bl	8000218 <__divsi3>
 8001f62:	0003      	movs	r3, r0
 8001f64:	0018      	movs	r0, r3
 8001f66:	f7ff fbc7 	bl	80016f8 <__aeabi_i2d>
 8001f6a:	4a6d      	ldr	r2, [pc, #436]	; (8002120 <READ_DATA+0x660>)
 8001f6c:	4b6d      	ldr	r3, [pc, #436]	; (8002124 <READ_DATA+0x664>)
 8001f6e:	f7fe fd7f 	bl	8000a70 <__aeabi_dmul>
 8001f72:	0002      	movs	r2, r0
 8001f74:	000b      	movs	r3, r1
 8001f76:	0014      	movs	r4, r2
 8001f78:	001d      	movs	r5, r3
 8001f7a:	4b6b      	ldr	r3, [pc, #428]	; (8002128 <READ_DATA+0x668>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	1c18      	adds	r0, r3, #0
 8001f80:	f7ff fbea 	bl	8001758 <__aeabi_f2d>
 8001f84:	0002      	movs	r2, r0
 8001f86:	000b      	movs	r3, r1
 8001f88:	0020      	movs	r0, r4
 8001f8a:	0029      	movs	r1, r5
 8001f8c:	f7ff f832 	bl	8000ff4 <__aeabi_dsub>
 8001f90:	0002      	movs	r2, r0
 8001f92:	000b      	movs	r3, r1
 8001f94:	0010      	movs	r0, r2
 8001f96:	0019      	movs	r1, r3
 8001f98:	f7ff fc26 	bl	80017e8 <__aeabi_d2f>
 8001f9c:	1c03      	adds	r3, r0, #0
 8001f9e:	4a63      	ldr	r2, [pc, #396]	; (800212c <READ_DATA+0x66c>)
 8001fa0:	18ba      	adds	r2, r7, r2
 8001fa2:	6013      	str	r3, [r2, #0]
		//Read Gyroscope Z
		uint8_t Gyro_Z_L[1];
		HAL_StatusTypeDef Z = HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTZ_L_G_ADDRESS, 1, &Gyro_Z_L[0], 1, 100);
 8001fa4:	4b62      	ldr	r3, [pc, #392]	; (8002130 <READ_DATA+0x670>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	b299      	uxth	r1, r3
 8001faa:	4b62      	ldr	r3, [pc, #392]	; (8002134 <READ_DATA+0x674>)
 8001fac:	18fc      	adds	r4, r7, r3
 8001fae:	4860      	ldr	r0, [pc, #384]	; (8002130 <READ_DATA+0x670>)
 8001fb0:	2364      	movs	r3, #100	; 0x64
 8001fb2:	9302      	str	r3, [sp, #8]
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	2308      	movs	r3, #8
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	2226      	movs	r2, #38	; 0x26
 8001fc2:	f001 f8ad 	bl	8003120 <HAL_I2C_Mem_Read>
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	7023      	strb	r3, [r4, #0]
		uint8_t Gyro_Z_H[1];
		HAL_StatusTypeDef Z2 = HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTZ_H_G_ADDRESS, 1, &Gyro_Z_H[0], 1, 100);
 8001fca:	4b59      	ldr	r3, [pc, #356]	; (8002130 <READ_DATA+0x670>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	b299      	uxth	r1, r3
 8001fd0:	4b59      	ldr	r3, [pc, #356]	; (8002138 <READ_DATA+0x678>)
 8001fd2:	18fc      	adds	r4, r7, r3
 8001fd4:	4856      	ldr	r0, [pc, #344]	; (8002130 <READ_DATA+0x670>)
 8001fd6:	2364      	movs	r3, #100	; 0x64
 8001fd8:	9302      	str	r3, [sp, #8]
 8001fda:	2301      	movs	r3, #1
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	2227      	movs	r2, #39	; 0x27
 8001fe6:	f001 f89b 	bl	8003120 <HAL_I2C_Mem_Read>
 8001fea:	0003      	movs	r3, r0
 8001fec:	7023      	strb	r3, [r4, #0]
		uint16_t gyro_z_raw = Gyro_Z_L[0] | (Gyro_Z_H[0] << 8);
 8001fee:	4b53      	ldr	r3, [pc, #332]	; (800213c <READ_DATA+0x67c>)
 8001ff0:	4953      	ldr	r1, [pc, #332]	; (8002140 <READ_DATA+0x680>)
 8001ff2:	185b      	adds	r3, r3, r1
 8001ff4:	19db      	adds	r3, r3, r7
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	b21a      	sxth	r2, r3
 8001ffa:	4b52      	ldr	r3, [pc, #328]	; (8002144 <READ_DATA+0x684>)
 8001ffc:	185b      	adds	r3, r3, r1
 8001ffe:	19db      	adds	r3, r3, r7
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	b21b      	sxth	r3, r3
 8002006:	4313      	orrs	r3, r2
 8002008:	b21a      	sxth	r2, r3
 800200a:	494f      	ldr	r1, [pc, #316]	; (8002148 <READ_DATA+0x688>)
 800200c:	187b      	adds	r3, r7, r1
 800200e:	801a      	strh	r2, [r3, #0]
	    if(gyro_z_raw > 32768) {
 8002010:	187b      	adds	r3, r7, r1
 8002012:	881a      	ldrh	r2, [r3, #0]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	429a      	cmp	r2, r3
 800201a:	d904      	bls.n	8002026 <READ_DATA+0x566>
	    	gyro_z_raw = (~gyro_z_raw + 1);
 800201c:	187b      	adds	r3, r7, r1
 800201e:	187a      	adds	r2, r7, r1
 8002020:	8812      	ldrh	r2, [r2, #0]
 8002022:	4252      	negs	r2, r2
 8002024:	801a      	strh	r2, [r3, #0]
	    }
		float gyro_z = (9.8*(gyro_z_raw *GYRO_SENS/1000)) - gyro_z_offset;
 8002026:	4b48      	ldr	r3, [pc, #288]	; (8002148 <READ_DATA+0x688>)
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	2246      	movs	r2, #70	; 0x46
 800202e:	4353      	muls	r3, r2
 8002030:	22fa      	movs	r2, #250	; 0xfa
 8002032:	0091      	lsls	r1, r2, #2
 8002034:	0018      	movs	r0, r3
 8002036:	f7fe f8ef 	bl	8000218 <__divsi3>
 800203a:	0003      	movs	r3, r0
 800203c:	0018      	movs	r0, r3
 800203e:	f7ff fb5b 	bl	80016f8 <__aeabi_i2d>
 8002042:	4a37      	ldr	r2, [pc, #220]	; (8002120 <READ_DATA+0x660>)
 8002044:	4b37      	ldr	r3, [pc, #220]	; (8002124 <READ_DATA+0x664>)
 8002046:	f7fe fd13 	bl	8000a70 <__aeabi_dmul>
 800204a:	0002      	movs	r2, r0
 800204c:	000b      	movs	r3, r1
 800204e:	0014      	movs	r4, r2
 8002050:	001d      	movs	r5, r3
 8002052:	4b3e      	ldr	r3, [pc, #248]	; (800214c <READ_DATA+0x68c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	1c18      	adds	r0, r3, #0
 8002058:	f7ff fb7e 	bl	8001758 <__aeabi_f2d>
 800205c:	0002      	movs	r2, r0
 800205e:	000b      	movs	r3, r1
 8002060:	0020      	movs	r0, r4
 8002062:	0029      	movs	r1, r5
 8002064:	f7fe ffc6 	bl	8000ff4 <__aeabi_dsub>
 8002068:	0002      	movs	r2, r0
 800206a:	000b      	movs	r3, r1
 800206c:	0010      	movs	r0, r2
 800206e:	0019      	movs	r1, r3
 8002070:	f7ff fbba 	bl	80017e8 <__aeabi_d2f>
 8002074:	1c03      	adds	r3, r0, #0
 8002076:	4d36      	ldr	r5, [pc, #216]	; (8002150 <READ_DATA+0x690>)
 8002078:	197a      	adds	r2, r7, r5
 800207a:	6013      	str	r3, [r2, #0]

	    // Store the data
	    acc_x_data[data_index] = acc_x;
 800207c:	4b35      	ldr	r3, [pc, #212]	; (8002154 <READ_DATA+0x694>)
 800207e:	4c30      	ldr	r4, [pc, #192]	; (8002140 <READ_DATA+0x680>)
 8002080:	191b      	adds	r3, r3, r4
 8002082:	19db      	adds	r3, r3, r7
 8002084:	4834      	ldr	r0, [pc, #208]	; (8002158 <READ_DATA+0x698>)
 8002086:	183a      	adds	r2, r7, r0
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	0092      	lsls	r2, r2, #2
 800208c:	4933      	ldr	r1, [pc, #204]	; (800215c <READ_DATA+0x69c>)
 800208e:	1879      	adds	r1, r7, r1
 8002090:	6809      	ldr	r1, [r1, #0]
 8002092:	50d1      	str	r1, [r2, r3]
	    acc_y_data[data_index] = acc_y;
 8002094:	4b32      	ldr	r3, [pc, #200]	; (8002160 <READ_DATA+0x6a0>)
 8002096:	191b      	adds	r3, r3, r4
 8002098:	19db      	adds	r3, r3, r7
 800209a:	183a      	adds	r2, r7, r0
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	0092      	lsls	r2, r2, #2
 80020a0:	219b      	movs	r1, #155	; 0x9b
 80020a2:	0109      	lsls	r1, r1, #4
 80020a4:	1879      	adds	r1, r7, r1
 80020a6:	6809      	ldr	r1, [r1, #0]
 80020a8:	50d1      	str	r1, [r2, r3]
	    acc_z_data[data_index] = acc_z;
 80020aa:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <READ_DATA+0x6a4>)
 80020ac:	191b      	adds	r3, r3, r4
 80020ae:	19db      	adds	r3, r3, r7
 80020b0:	183a      	adds	r2, r7, r0
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	0092      	lsls	r2, r2, #2
 80020b6:	492c      	ldr	r1, [pc, #176]	; (8002168 <READ_DATA+0x6a8>)
 80020b8:	1879      	adds	r1, r7, r1
 80020ba:	6809      	ldr	r1, [r1, #0]
 80020bc:	50d1      	str	r1, [r2, r3]
	    gyro_x_data[data_index] = gyro_x;
 80020be:	4b2b      	ldr	r3, [pc, #172]	; (800216c <READ_DATA+0x6ac>)
 80020c0:	191b      	adds	r3, r3, r4
 80020c2:	19db      	adds	r3, r3, r7
 80020c4:	183a      	adds	r2, r7, r0
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	0092      	lsls	r2, r2, #2
 80020ca:	4929      	ldr	r1, [pc, #164]	; (8002170 <READ_DATA+0x6b0>)
 80020cc:	1879      	adds	r1, r7, r1
 80020ce:	6809      	ldr	r1, [r1, #0]
 80020d0:	50d1      	str	r1, [r2, r3]
	    gyro_y_data[data_index] = gyro_y;
 80020d2:	4b28      	ldr	r3, [pc, #160]	; (8002174 <READ_DATA+0x6b4>)
 80020d4:	191b      	adds	r3, r3, r4
 80020d6:	19db      	adds	r3, r3, r7
 80020d8:	183a      	adds	r2, r7, r0
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	0092      	lsls	r2, r2, #2
 80020de:	4913      	ldr	r1, [pc, #76]	; (800212c <READ_DATA+0x66c>)
 80020e0:	1879      	adds	r1, r7, r1
 80020e2:	6809      	ldr	r1, [r1, #0]
 80020e4:	50d1      	str	r1, [r2, r3]
	    gyro_z_data[data_index] = gyro_z;
 80020e6:	4b24      	ldr	r3, [pc, #144]	; (8002178 <READ_DATA+0x6b8>)
 80020e8:	191b      	adds	r3, r3, r4
 80020ea:	19db      	adds	r3, r3, r7
 80020ec:	183a      	adds	r2, r7, r0
 80020ee:	6812      	ldr	r2, [r2, #0]
 80020f0:	0092      	lsls	r2, r2, #2
 80020f2:	1979      	adds	r1, r7, r5
 80020f4:	6809      	ldr	r1, [r1, #0]
 80020f6:	50d1      	str	r1, [r2, r3]

	    // Increment data_index (wrap around if it exceeds MAX_DATA_POINTS)
	    data_index = (data_index + 1);
 80020f8:	183b      	adds	r3, r7, r0
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	3301      	adds	r3, #1
 80020fe:	183a      	adds	r2, r7, r0
 8002100:	6013      	str	r3, [r2, #0]
	while(data_index != MAX_DATA_POINTS) {
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <READ_DATA+0x698>)
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b64      	cmp	r3, #100	; 0x64
 800210a:	d000      	beq.n	800210e <READ_DATA+0x64e>
 800210c:	e4e6      	b.n	8001adc <READ_DATA+0x1c>
	}

}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	46c0      	nop			; (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <READ_DATA+0x680>)
 8002116:	449d      	add	sp, r3
 8002118:	bdb0      	pop	{r4, r5, r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	000009ba 	.word	0x000009ba
 8002120:	9999999a 	.word	0x9999999a
 8002124:	40239999 	.word	0x40239999
 8002128:	20000038 	.word	0x20000038
 800212c:	0000099c 	.word	0x0000099c
 8002130:	20000040 	.word	0x20000040
 8002134:	0000099b 	.word	0x0000099b
 8002138:	0000099a 	.word	0x0000099a
 800213c:	fffff640 	.word	0xfffff640
 8002140:	000009c8 	.word	0x000009c8
 8002144:	fffff63c 	.word	0xfffff63c
 8002148:	000009b8 	.word	0x000009b8
 800214c:	2000003c 	.word	0x2000003c
 8002150:	00000994 	.word	0x00000994
 8002154:	fffffe3c 	.word	0xfffffe3c
 8002158:	000009c4 	.word	0x000009c4
 800215c:	000009b4 	.word	0x000009b4
 8002160:	fffffcac 	.word	0xfffffcac
 8002164:	fffffb1c 	.word	0xfffffb1c
 8002168:	000009ac 	.word	0x000009ac
 800216c:	fffff98c 	.word	0xfffff98c
 8002170:	000009a4 	.word	0x000009a4
 8002174:	fffff7fc 	.word	0xfffff7fc
 8002178:	fffff66c 	.word	0xfffff66c

0800217c <ReadAccelerometerAtRest>:

void ReadAccelerometerAtRest() {
 800217c:	b5b0      	push	{r4, r5, r7, lr}
 800217e:	b094      	sub	sp, #80	; 0x50
 8002180:	af04      	add	r7, sp, #16
    //Offset X
	uint8_t Acc_X_L[1];
    uint8_t Acc_X_H[1];
    uint16_t acc_x_raw;
    HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTX_L_XL_ADDRESS, 1, Acc_X_L, 1, 100);
 8002182:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <ReadAccelerometerAtRest+0x74>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	b299      	uxth	r1, r3
 8002188:	4819      	ldr	r0, [pc, #100]	; (80021f0 <ReadAccelerometerAtRest+0x74>)
 800218a:	2364      	movs	r3, #100	; 0x64
 800218c:	9302      	str	r3, [sp, #8]
 800218e:	2301      	movs	r3, #1
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	2430      	movs	r4, #48	; 0x30
 8002194:	193b      	adds	r3, r7, r4
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2301      	movs	r3, #1
 800219a:	2228      	movs	r2, #40	; 0x28
 800219c:	f000 ffc0 	bl	8003120 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTX_H_XL_ADDRESS, 1, Acc_X_H, 1, 100);
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <ReadAccelerometerAtRest+0x74>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	b299      	uxth	r1, r3
 80021a6:	4812      	ldr	r0, [pc, #72]	; (80021f0 <ReadAccelerometerAtRest+0x74>)
 80021a8:	2364      	movs	r3, #100	; 0x64
 80021aa:	9302      	str	r3, [sp, #8]
 80021ac:	2301      	movs	r3, #1
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	252c      	movs	r5, #44	; 0x2c
 80021b2:	197b      	adds	r3, r7, r5
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	2301      	movs	r3, #1
 80021b8:	2229      	movs	r2, #41	; 0x29
 80021ba:	f000 ffb1 	bl	8003120 <HAL_I2C_Mem_Read>
    acc_x_raw = Acc_X_L[0] | (Acc_X_H[0] << 8);
 80021be:	193b      	adds	r3, r7, r4
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b21a      	sxth	r2, r3
 80021c4:	197b      	adds	r3, r7, r5
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b21a      	sxth	r2, r3
 80021d0:	2132      	movs	r1, #50	; 0x32
 80021d2:	187b      	adds	r3, r7, r1
 80021d4:	801a      	strh	r2, [r3, #0]
    uint16_t raw_value;
    if(acc_x_raw > 32768) {
 80021d6:	187b      	adds	r3, r7, r1
 80021d8:	881a      	ldrh	r2, [r3, #0]
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	429a      	cmp	r2, r3
 80021e0:	d908      	bls.n	80021f4 <ReadAccelerometerAtRest+0x78>
    	raw_value = (~acc_x_raw + 1);
 80021e2:	233e      	movs	r3, #62	; 0x3e
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	187a      	adds	r2, r7, r1
 80021e8:	8812      	ldrh	r2, [r2, #0]
 80021ea:	4252      	negs	r2, r2
 80021ec:	801a      	strh	r2, [r3, #0]
 80021ee:	e007      	b.n	8002200 <ReadAccelerometerAtRest+0x84>
 80021f0:	20000040 	.word	0x20000040
    } else {
    	raw_value = acc_x_raw;
 80021f4:	233e      	movs	r3, #62	; 0x3e
 80021f6:	18fb      	adds	r3, r7, r3
 80021f8:	2232      	movs	r2, #50	; 0x32
 80021fa:	18ba      	adds	r2, r7, r2
 80021fc:	8812      	ldrh	r2, [r2, #0]
 80021fe:	801a      	strh	r2, [r3, #0]
    }
    acc_x_offset = (raw_value *ACC_SENS) / 1000;
 8002200:	233e      	movs	r3, #62	; 0x3e
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	0018      	movs	r0, r3
 8002208:	f7ff fa76 	bl	80016f8 <__aeabi_i2d>
 800220c:	4acf      	ldr	r2, [pc, #828]	; (800254c <ReadAccelerometerAtRest+0x3d0>)
 800220e:	4bd0      	ldr	r3, [pc, #832]	; (8002550 <ReadAccelerometerAtRest+0x3d4>)
 8002210:	f7fe fc2e 	bl	8000a70 <__aeabi_dmul>
 8002214:	0002      	movs	r2, r0
 8002216:	000b      	movs	r3, r1
 8002218:	0010      	movs	r0, r2
 800221a:	0019      	movs	r1, r3
 800221c:	2200      	movs	r2, #0
 800221e:	4bcd      	ldr	r3, [pc, #820]	; (8002554 <ReadAccelerometerAtRest+0x3d8>)
 8002220:	f7fe f938 	bl	8000494 <__aeabi_ddiv>
 8002224:	0002      	movs	r2, r0
 8002226:	000b      	movs	r3, r1
 8002228:	0010      	movs	r0, r2
 800222a:	0019      	movs	r1, r3
 800222c:	f7ff fadc 	bl	80017e8 <__aeabi_d2f>
 8002230:	1c02      	adds	r2, r0, #0
 8002232:	4bc9      	ldr	r3, [pc, #804]	; (8002558 <ReadAccelerometerAtRest+0x3dc>)
 8002234:	601a      	str	r2, [r3, #0]
    //Offset Y
    uint8_t Acc_Y_L[1];
    uint8_t Acc_Y_H[1];
    uint16_t acc_y_raw;
    HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTY_L_XL_ADDRESS, 1, Acc_Y_L, 1, 100);
 8002236:	4bc9      	ldr	r3, [pc, #804]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	b299      	uxth	r1, r3
 800223c:	48c7      	ldr	r0, [pc, #796]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 800223e:	2364      	movs	r3, #100	; 0x64
 8002240:	9302      	str	r3, [sp, #8]
 8002242:	2301      	movs	r3, #1
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	2428      	movs	r4, #40	; 0x28
 8002248:	193b      	adds	r3, r7, r4
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	2301      	movs	r3, #1
 800224e:	222a      	movs	r2, #42	; 0x2a
 8002250:	f000 ff66 	bl	8003120 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTY_H_XL_ADDRESS, 1, Acc_Y_H, 1, 100);
 8002254:	4bc1      	ldr	r3, [pc, #772]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	b299      	uxth	r1, r3
 800225a:	48c0      	ldr	r0, [pc, #768]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 800225c:	2364      	movs	r3, #100	; 0x64
 800225e:	9302      	str	r3, [sp, #8]
 8002260:	2301      	movs	r3, #1
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	2524      	movs	r5, #36	; 0x24
 8002266:	197b      	adds	r3, r7, r5
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2301      	movs	r3, #1
 800226c:	222b      	movs	r2, #43	; 0x2b
 800226e:	f000 ff57 	bl	8003120 <HAL_I2C_Mem_Read>
    acc_y_raw = Acc_Y_L[0] | (Acc_Y_H[0] << 8);
 8002272:	193b      	adds	r3, r7, r4
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	b21a      	sxth	r2, r3
 8002278:	197b      	adds	r3, r7, r5
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	b21b      	sxth	r3, r3
 8002280:	4313      	orrs	r3, r2
 8002282:	b21a      	sxth	r2, r3
 8002284:	213c      	movs	r1, #60	; 0x3c
 8002286:	187b      	adds	r3, r7, r1
 8002288:	801a      	strh	r2, [r3, #0]
    if(acc_y_raw > 32768) {
 800228a:	187b      	adds	r3, r7, r1
 800228c:	881a      	ldrh	r2, [r3, #0]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	429a      	cmp	r2, r3
 8002294:	d904      	bls.n	80022a0 <ReadAccelerometerAtRest+0x124>
    	acc_y_raw = (~acc_y_raw + 1);
 8002296:	187b      	adds	r3, r7, r1
 8002298:	187a      	adds	r2, r7, r1
 800229a:	8812      	ldrh	r2, [r2, #0]
 800229c:	4252      	negs	r2, r2
 800229e:	801a      	strh	r2, [r3, #0]
    }
    acc_y_offset = 9.8 * (acc_y_raw *ACC_SENS) / 1000;
 80022a0:	233c      	movs	r3, #60	; 0x3c
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	0018      	movs	r0, r3
 80022a8:	f7ff fa26 	bl	80016f8 <__aeabi_i2d>
 80022ac:	4aa7      	ldr	r2, [pc, #668]	; (800254c <ReadAccelerometerAtRest+0x3d0>)
 80022ae:	4ba8      	ldr	r3, [pc, #672]	; (8002550 <ReadAccelerometerAtRest+0x3d4>)
 80022b0:	f7fe fbde 	bl	8000a70 <__aeabi_dmul>
 80022b4:	0002      	movs	r2, r0
 80022b6:	000b      	movs	r3, r1
 80022b8:	0010      	movs	r0, r2
 80022ba:	0019      	movs	r1, r3
 80022bc:	4aa8      	ldr	r2, [pc, #672]	; (8002560 <ReadAccelerometerAtRest+0x3e4>)
 80022be:	4ba9      	ldr	r3, [pc, #676]	; (8002564 <ReadAccelerometerAtRest+0x3e8>)
 80022c0:	f7fe fbd6 	bl	8000a70 <__aeabi_dmul>
 80022c4:	0002      	movs	r2, r0
 80022c6:	000b      	movs	r3, r1
 80022c8:	0010      	movs	r0, r2
 80022ca:	0019      	movs	r1, r3
 80022cc:	2200      	movs	r2, #0
 80022ce:	4ba1      	ldr	r3, [pc, #644]	; (8002554 <ReadAccelerometerAtRest+0x3d8>)
 80022d0:	f7fe f8e0 	bl	8000494 <__aeabi_ddiv>
 80022d4:	0002      	movs	r2, r0
 80022d6:	000b      	movs	r3, r1
 80022d8:	0010      	movs	r0, r2
 80022da:	0019      	movs	r1, r3
 80022dc:	f7ff fa84 	bl	80017e8 <__aeabi_d2f>
 80022e0:	1c02      	adds	r2, r0, #0
 80022e2:	4ba1      	ldr	r3, [pc, #644]	; (8002568 <ReadAccelerometerAtRest+0x3ec>)
 80022e4:	601a      	str	r2, [r3, #0]

    //Offset Z
    uint8_t Acc_Z_L[1];
    uint8_t Acc_Z_H[1];
    uint16_t acc_z_raw;
    HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTZ_L_XL_ADDRESS, 1, Acc_Z_L, 1, 100);
 80022e6:	4b9d      	ldr	r3, [pc, #628]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	b299      	uxth	r1, r3
 80022ec:	489b      	ldr	r0, [pc, #620]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 80022ee:	2364      	movs	r3, #100	; 0x64
 80022f0:	9302      	str	r3, [sp, #8]
 80022f2:	2301      	movs	r3, #1
 80022f4:	9301      	str	r3, [sp, #4]
 80022f6:	2420      	movs	r4, #32
 80022f8:	193b      	adds	r3, r7, r4
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2301      	movs	r3, #1
 80022fe:	222c      	movs	r2, #44	; 0x2c
 8002300:	f000 ff0e 	bl	8003120 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTZ_H_XL_ADDRESS, 1, Acc_Z_H, 1, 100);
 8002304:	4b95      	ldr	r3, [pc, #596]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	b299      	uxth	r1, r3
 800230a:	4894      	ldr	r0, [pc, #592]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 800230c:	2364      	movs	r3, #100	; 0x64
 800230e:	9302      	str	r3, [sp, #8]
 8002310:	2301      	movs	r3, #1
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	251c      	movs	r5, #28
 8002316:	197b      	adds	r3, r7, r5
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	2301      	movs	r3, #1
 800231c:	222d      	movs	r2, #45	; 0x2d
 800231e:	f000 feff 	bl	8003120 <HAL_I2C_Mem_Read>
    acc_z_raw = Acc_Z_L[0] | (Acc_Z_H[0] << 8);
 8002322:	193b      	adds	r3, r7, r4
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	b21a      	sxth	r2, r3
 8002328:	197b      	adds	r3, r7, r5
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	021b      	lsls	r3, r3, #8
 800232e:	b21b      	sxth	r3, r3
 8002330:	4313      	orrs	r3, r2
 8002332:	b21a      	sxth	r2, r3
 8002334:	213a      	movs	r1, #58	; 0x3a
 8002336:	187b      	adds	r3, r7, r1
 8002338:	801a      	strh	r2, [r3, #0]
    if(acc_z_raw > 32768) {
 800233a:	187b      	adds	r3, r7, r1
 800233c:	881a      	ldrh	r2, [r3, #0]
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	021b      	lsls	r3, r3, #8
 8002342:	429a      	cmp	r2, r3
 8002344:	d904      	bls.n	8002350 <ReadAccelerometerAtRest+0x1d4>
    	acc_z_raw = (~acc_z_raw + 1);
 8002346:	187b      	adds	r3, r7, r1
 8002348:	187a      	adds	r2, r7, r1
 800234a:	8812      	ldrh	r2, [r2, #0]
 800234c:	4252      	negs	r2, r2
 800234e:	801a      	strh	r2, [r3, #0]
    }
    acc_z_offset = 9.8 * (acc_z_raw *ACC_SENS) / 1000;
 8002350:	233a      	movs	r3, #58	; 0x3a
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	0018      	movs	r0, r3
 8002358:	f7ff f9ce 	bl	80016f8 <__aeabi_i2d>
 800235c:	4a7b      	ldr	r2, [pc, #492]	; (800254c <ReadAccelerometerAtRest+0x3d0>)
 800235e:	4b7c      	ldr	r3, [pc, #496]	; (8002550 <ReadAccelerometerAtRest+0x3d4>)
 8002360:	f7fe fb86 	bl	8000a70 <__aeabi_dmul>
 8002364:	0002      	movs	r2, r0
 8002366:	000b      	movs	r3, r1
 8002368:	0010      	movs	r0, r2
 800236a:	0019      	movs	r1, r3
 800236c:	4a7c      	ldr	r2, [pc, #496]	; (8002560 <ReadAccelerometerAtRest+0x3e4>)
 800236e:	4b7d      	ldr	r3, [pc, #500]	; (8002564 <ReadAccelerometerAtRest+0x3e8>)
 8002370:	f7fe fb7e 	bl	8000a70 <__aeabi_dmul>
 8002374:	0002      	movs	r2, r0
 8002376:	000b      	movs	r3, r1
 8002378:	0010      	movs	r0, r2
 800237a:	0019      	movs	r1, r3
 800237c:	2200      	movs	r2, #0
 800237e:	4b75      	ldr	r3, [pc, #468]	; (8002554 <ReadAccelerometerAtRest+0x3d8>)
 8002380:	f7fe f888 	bl	8000494 <__aeabi_ddiv>
 8002384:	0002      	movs	r2, r0
 8002386:	000b      	movs	r3, r1
 8002388:	0010      	movs	r0, r2
 800238a:	0019      	movs	r1, r3
 800238c:	f7ff fa2c 	bl	80017e8 <__aeabi_d2f>
 8002390:	1c02      	adds	r2, r0, #0
 8002392:	4b76      	ldr	r3, [pc, #472]	; (800256c <ReadAccelerometerAtRest+0x3f0>)
 8002394:	601a      	str	r2, [r3, #0]
    //Gyroscope
    //Offset X
	uint8_t Gyro_X_L[1];
    uint8_t Gyro_X_H[1];
    uint16_t gyro_x_raw;
    HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTX_L_G_ADDRESS, 1, Acc_X_L, 1, 100);
 8002396:	4b71      	ldr	r3, [pc, #452]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	b299      	uxth	r1, r3
 800239c:	486f      	ldr	r0, [pc, #444]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 800239e:	2364      	movs	r3, #100	; 0x64
 80023a0:	9302      	str	r3, [sp, #8]
 80023a2:	2301      	movs	r3, #1
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	2330      	movs	r3, #48	; 0x30
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	2301      	movs	r3, #1
 80023ae:	2222      	movs	r2, #34	; 0x22
 80023b0:	f000 feb6 	bl	8003120 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTX_H_G_ADDRESS, 1, Acc_X_H, 1, 100);
 80023b4:	4b69      	ldr	r3, [pc, #420]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	b299      	uxth	r1, r3
 80023ba:	4868      	ldr	r0, [pc, #416]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 80023bc:	2364      	movs	r3, #100	; 0x64
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	2301      	movs	r3, #1
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	232c      	movs	r3, #44	; 0x2c
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	2301      	movs	r3, #1
 80023cc:	2223      	movs	r2, #35	; 0x23
 80023ce:	f000 fea7 	bl	8003120 <HAL_I2C_Mem_Read>
    gyro_x_raw = Gyro_X_L[0] | (Gyro_X_H[0] << 8);
 80023d2:	2318      	movs	r3, #24
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	b21a      	sxth	r2, r3
 80023da:	2314      	movs	r3, #20
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	021b      	lsls	r3, r3, #8
 80023e2:	b21b      	sxth	r3, r3
 80023e4:	4313      	orrs	r3, r2
 80023e6:	b21a      	sxth	r2, r3
 80023e8:	2138      	movs	r1, #56	; 0x38
 80023ea:	187b      	adds	r3, r7, r1
 80023ec:	801a      	strh	r2, [r3, #0]
    if(gyro_x_raw > 32768) {
 80023ee:	187b      	adds	r3, r7, r1
 80023f0:	881a      	ldrh	r2, [r3, #0]
 80023f2:	2380      	movs	r3, #128	; 0x80
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d904      	bls.n	8002404 <ReadAccelerometerAtRest+0x288>
    	gyro_x_raw = (~gyro_x_raw + 1);
 80023fa:	187b      	adds	r3, r7, r1
 80023fc:	187a      	adds	r2, r7, r1
 80023fe:	8812      	ldrh	r2, [r2, #0]
 8002400:	4252      	negs	r2, r2
 8002402:	801a      	strh	r2, [r3, #0]
    }
    gyro_x_offset = (gyro_x_raw *GYRO_SENS/1000);
 8002404:	2338      	movs	r3, #56	; 0x38
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	2246      	movs	r2, #70	; 0x46
 800240c:	4353      	muls	r3, r2
 800240e:	22fa      	movs	r2, #250	; 0xfa
 8002410:	0091      	lsls	r1, r2, #2
 8002412:	0018      	movs	r0, r3
 8002414:	f7fd ff00 	bl	8000218 <__divsi3>
 8002418:	0003      	movs	r3, r0
 800241a:	0018      	movs	r0, r3
 800241c:	f7fd ffe8 	bl	80003f0 <__aeabi_i2f>
 8002420:	1c02      	adds	r2, r0, #0
 8002422:	4b53      	ldr	r3, [pc, #332]	; (8002570 <ReadAccelerometerAtRest+0x3f4>)
 8002424:	601a      	str	r2, [r3, #0]

    //Offset Y
	uint8_t Gyro_Y_L[1];
    uint8_t Gyro_Y_H[1];
    uint16_t gyro_y_raw;
    HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTY_L_G_ADDRESS, 1, Acc_Y_L, 1, 100);
 8002426:	4b4d      	ldr	r3, [pc, #308]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	b299      	uxth	r1, r3
 800242c:	484b      	ldr	r0, [pc, #300]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 800242e:	2364      	movs	r3, #100	; 0x64
 8002430:	9302      	str	r3, [sp, #8]
 8002432:	2301      	movs	r3, #1
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	2328      	movs	r3, #40	; 0x28
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2301      	movs	r3, #1
 800243e:	2224      	movs	r2, #36	; 0x24
 8002440:	f000 fe6e 	bl	8003120 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTY_H_G_ADDRESS, 1, Acc_Y_H, 1, 100);
 8002444:	4b45      	ldr	r3, [pc, #276]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	b299      	uxth	r1, r3
 800244a:	4844      	ldr	r0, [pc, #272]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 800244c:	2364      	movs	r3, #100	; 0x64
 800244e:	9302      	str	r3, [sp, #8]
 8002450:	2301      	movs	r3, #1
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	2324      	movs	r3, #36	; 0x24
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2301      	movs	r3, #1
 800245c:	2225      	movs	r2, #37	; 0x25
 800245e:	f000 fe5f 	bl	8003120 <HAL_I2C_Mem_Read>
    gyro_y_raw = Gyro_Y_L[0] | (Gyro_Y_H[0] << 8);
 8002462:	2310      	movs	r3, #16
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	b21a      	sxth	r2, r3
 800246a:	230c      	movs	r3, #12
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	b21b      	sxth	r3, r3
 8002474:	4313      	orrs	r3, r2
 8002476:	b21a      	sxth	r2, r3
 8002478:	2136      	movs	r1, #54	; 0x36
 800247a:	187b      	adds	r3, r7, r1
 800247c:	801a      	strh	r2, [r3, #0]
    if(gyro_y_raw > 32768) {
 800247e:	187b      	adds	r3, r7, r1
 8002480:	881a      	ldrh	r2, [r3, #0]
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	429a      	cmp	r2, r3
 8002488:	d904      	bls.n	8002494 <ReadAccelerometerAtRest+0x318>
    	gyro_y_raw = (~gyro_y_raw + 1);
 800248a:	187b      	adds	r3, r7, r1
 800248c:	187a      	adds	r2, r7, r1
 800248e:	8812      	ldrh	r2, [r2, #0]
 8002490:	4252      	negs	r2, r2
 8002492:	801a      	strh	r2, [r3, #0]
    }
    gyro_y_offset = (gyro_y_raw *GYRO_SENS/1000);
 8002494:	2336      	movs	r3, #54	; 0x36
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	2246      	movs	r2, #70	; 0x46
 800249c:	4353      	muls	r3, r2
 800249e:	22fa      	movs	r2, #250	; 0xfa
 80024a0:	0091      	lsls	r1, r2, #2
 80024a2:	0018      	movs	r0, r3
 80024a4:	f7fd feb8 	bl	8000218 <__divsi3>
 80024a8:	0003      	movs	r3, r0
 80024aa:	0018      	movs	r0, r3
 80024ac:	f7fd ffa0 	bl	80003f0 <__aeabi_i2f>
 80024b0:	1c02      	adds	r2, r0, #0
 80024b2:	4b30      	ldr	r3, [pc, #192]	; (8002574 <ReadAccelerometerAtRest+0x3f8>)
 80024b4:	601a      	str	r2, [r3, #0]

    //Offset Z
	uint8_t Gyro_Z_L[1];
    uint8_t Gyro_Z_H[1];
    uint16_t gyro_z_raw;
    HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTZ_L_G_ADDRESS, 1, Acc_Z_L, 1, 100);
 80024b6:	4b29      	ldr	r3, [pc, #164]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	b299      	uxth	r1, r3
 80024bc:	4827      	ldr	r0, [pc, #156]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 80024be:	2364      	movs	r3, #100	; 0x64
 80024c0:	9302      	str	r3, [sp, #8]
 80024c2:	2301      	movs	r3, #1
 80024c4:	9301      	str	r3, [sp, #4]
 80024c6:	2320      	movs	r3, #32
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	2301      	movs	r3, #1
 80024ce:	2226      	movs	r2, #38	; 0x26
 80024d0:	f000 fe26 	bl	8003120 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, hi2c1.Init.OwnAddress1, OUTZ_H_G_ADDRESS, 1, Acc_Z_H, 1, 100);
 80024d4:	4b21      	ldr	r3, [pc, #132]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	b299      	uxth	r1, r3
 80024da:	4820      	ldr	r0, [pc, #128]	; (800255c <ReadAccelerometerAtRest+0x3e0>)
 80024dc:	2364      	movs	r3, #100	; 0x64
 80024de:	9302      	str	r3, [sp, #8]
 80024e0:	2301      	movs	r3, #1
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	231c      	movs	r3, #28
 80024e6:	18fb      	adds	r3, r7, r3
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	2301      	movs	r3, #1
 80024ec:	2227      	movs	r2, #39	; 0x27
 80024ee:	f000 fe17 	bl	8003120 <HAL_I2C_Mem_Read>
    gyro_z_raw = Gyro_Z_L[0] | (Gyro_Z_H[0] << 8);
 80024f2:	2308      	movs	r3, #8
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	b21a      	sxth	r2, r3
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	b21b      	sxth	r3, r3
 8002502:	4313      	orrs	r3, r2
 8002504:	b21a      	sxth	r2, r3
 8002506:	2134      	movs	r1, #52	; 0x34
 8002508:	187b      	adds	r3, r7, r1
 800250a:	801a      	strh	r2, [r3, #0]
    if(gyro_z_raw > 32768) {
 800250c:	187b      	adds	r3, r7, r1
 800250e:	881a      	ldrh	r2, [r3, #0]
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	429a      	cmp	r2, r3
 8002516:	d904      	bls.n	8002522 <ReadAccelerometerAtRest+0x3a6>
    	gyro_z_raw = (~gyro_z_raw + 1);
 8002518:	187b      	adds	r3, r7, r1
 800251a:	187a      	adds	r2, r7, r1
 800251c:	8812      	ldrh	r2, [r2, #0]
 800251e:	4252      	negs	r2, r2
 8002520:	801a      	strh	r2, [r3, #0]
    }
    gyro_z_offset = (gyro_z_raw *GYRO_SENS/1000);
 8002522:	2334      	movs	r3, #52	; 0x34
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	2246      	movs	r2, #70	; 0x46
 800252a:	4353      	muls	r3, r2
 800252c:	22fa      	movs	r2, #250	; 0xfa
 800252e:	0091      	lsls	r1, r2, #2
 8002530:	0018      	movs	r0, r3
 8002532:	f7fd fe71 	bl	8000218 <__divsi3>
 8002536:	0003      	movs	r3, r0
 8002538:	0018      	movs	r0, r3
 800253a:	f7fd ff59 	bl	80003f0 <__aeabi_i2f>
 800253e:	1c02      	adds	r2, r0, #0
 8002540:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <ReadAccelerometerAtRest+0x3fc>)
 8002542:	601a      	str	r2, [r3, #0]

    //HAL_Delay(5000);
}
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b010      	add	sp, #64	; 0x40
 800254a:	bdb0      	pop	{r4, r5, r7, pc}
 800254c:	5a1cac08 	.word	0x5a1cac08
 8002550:	3fdf3b64 	.word	0x3fdf3b64
 8002554:	408f4000 	.word	0x408f4000
 8002558:	20000028 	.word	0x20000028
 800255c:	20000040 	.word	0x20000040
 8002560:	9999999a 	.word	0x9999999a
 8002564:	40239999 	.word	0x40239999
 8002568:	2000002c 	.word	0x2000002c
 800256c:	20000030 	.word	0x20000030
 8002570:	20000034 	.word	0x20000034
 8002574:	20000038 	.word	0x20000038
 8002578:	2000003c 	.word	0x2000003c

0800257c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 \
 HAL_Init();
 8002580:	f000 f97a 	bl	8002878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002584:	f000 f80a 	bl	800259c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002588:	f000 f8a0 	bl	80026cc <MX_GPIO_Init>
  MX_I2C1_Init();
 800258c:	f000 f85e 	bl	800264c <MX_I2C1_Init>
  IMU_Init();
 8002590:	f7ff f9ce 	bl	8001930 <IMU_Init>
 8002594:	2300      	movs	r3, #0

  /* USER CODE END 3 */
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800259c:	b590      	push	{r4, r7, lr}
 800259e:	b099      	sub	sp, #100	; 0x64
 80025a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025a2:	242c      	movs	r4, #44	; 0x2c
 80025a4:	193b      	adds	r3, r7, r4
 80025a6:	0018      	movs	r0, r3
 80025a8:	2334      	movs	r3, #52	; 0x34
 80025aa:	001a      	movs	r2, r3
 80025ac:	2100      	movs	r1, #0
 80025ae:	f002 f969 	bl	8004884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025b2:	231c      	movs	r3, #28
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	0018      	movs	r0, r3
 80025b8:	2310      	movs	r3, #16
 80025ba:	001a      	movs	r2, r3
 80025bc:	2100      	movs	r1, #0
 80025be:	f002 f961 	bl	8004884 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025c2:	003b      	movs	r3, r7
 80025c4:	0018      	movs	r0, r3
 80025c6:	231c      	movs	r3, #28
 80025c8:	001a      	movs	r2, r3
 80025ca:	2100      	movs	r1, #0
 80025cc:	f002 f95a 	bl	8004884 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025d0:	0021      	movs	r1, r4
 80025d2:	187b      	adds	r3, r7, r1
 80025d4:	2202      	movs	r2, #2
 80025d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025d8:	187b      	adds	r3, r7, r1
 80025da:	2201      	movs	r2, #1
 80025dc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025de:	187b      	adds	r3, r7, r1
 80025e0:	2210      	movs	r2, #16
 80025e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80025e4:	187b      	adds	r3, r7, r1
 80025e6:	2200      	movs	r2, #0
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025ea:	187b      	adds	r3, r7, r1
 80025ec:	0018      	movs	r0, r3
 80025ee:	f001 fb77 	bl	8003ce0 <HAL_RCC_OscConfig>
 80025f2:	1e03      	subs	r3, r0, #0
 80025f4:	d001      	beq.n	80025fa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80025f6:	f000 f881 	bl	80026fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025fa:	211c      	movs	r1, #28
 80025fc:	187b      	adds	r3, r7, r1
 80025fe:	2207      	movs	r2, #7
 8002600:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002602:	187b      	adds	r3, r7, r1
 8002604:	2200      	movs	r2, #0
 8002606:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002608:	187b      	adds	r3, r7, r1
 800260a:	2200      	movs	r2, #0
 800260c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800260e:	187b      	adds	r3, r7, r1
 8002610:	2200      	movs	r2, #0
 8002612:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002614:	187b      	adds	r3, r7, r1
 8002616:	2100      	movs	r1, #0
 8002618:	0018      	movs	r0, r3
 800261a:	f001 fee7 	bl	80043ec <HAL_RCC_ClockConfig>
 800261e:	1e03      	subs	r3, r0, #0
 8002620:	d001      	beq.n	8002626 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002622:	f000 f86b 	bl	80026fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002626:	003b      	movs	r3, r7
 8002628:	2220      	movs	r2, #32
 800262a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800262c:	003b      	movs	r3, r7
 800262e:	2200      	movs	r2, #0
 8002630:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002632:	003b      	movs	r3, r7
 8002634:	0018      	movs	r0, r3
 8002636:	f002 f825 	bl	8004684 <HAL_RCCEx_PeriphCLKConfig>
 800263a:	1e03      	subs	r3, r0, #0
 800263c:	d001      	beq.n	8002642 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800263e:	f000 f85d 	bl	80026fc <Error_Handler>
  }
}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	46bd      	mov	sp, r7
 8002646:	b019      	add	sp, #100	; 0x64
 8002648:	bd90      	pop	{r4, r7, pc}
	...

0800264c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002650:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <MX_I2C1_Init+0x74>)
 8002652:	4a1c      	ldr	r2, [pc, #112]	; (80026c4 <MX_I2C1_Init+0x78>)
 8002654:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8002656:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <MX_I2C1_Init+0x74>)
 8002658:	4a1b      	ldr	r2, [pc, #108]	; (80026c8 <MX_I2C1_Init+0x7c>)
 800265a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 214;
 800265c:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <MX_I2C1_Init+0x74>)
 800265e:	22d6      	movs	r2, #214	; 0xd6
 8002660:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002662:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <MX_I2C1_Init+0x74>)
 8002664:	2201      	movs	r2, #1
 8002666:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002668:	4b15      	ldr	r3, [pc, #84]	; (80026c0 <MX_I2C1_Init+0x74>)
 800266a:	2200      	movs	r2, #0
 800266c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800266e:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <MX_I2C1_Init+0x74>)
 8002670:	2200      	movs	r2, #0
 8002672:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002674:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <MX_I2C1_Init+0x74>)
 8002676:	2200      	movs	r2, #0
 8002678:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <MX_I2C1_Init+0x74>)
 800267c:	2200      	movs	r2, #0
 800267e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <MX_I2C1_Init+0x74>)
 8002682:	2200      	movs	r2, #0
 8002684:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002686:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <MX_I2C1_Init+0x74>)
 8002688:	0018      	movs	r0, r3
 800268a:	f000 fb85 	bl	8002d98 <HAL_I2C_Init>
 800268e:	1e03      	subs	r3, r0, #0
 8002690:	d001      	beq.n	8002696 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002692:	f000 f833 	bl	80026fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <MX_I2C1_Init+0x74>)
 8002698:	2100      	movs	r1, #0
 800269a:	0018      	movs	r0, r3
 800269c:	f001 fa88 	bl	8003bb0 <HAL_I2CEx_ConfigAnalogFilter>
 80026a0:	1e03      	subs	r3, r0, #0
 80026a2:	d001      	beq.n	80026a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026a4:	f000 f82a 	bl	80026fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <MX_I2C1_Init+0x74>)
 80026aa:	2100      	movs	r1, #0
 80026ac:	0018      	movs	r0, r3
 80026ae:	f001 facb 	bl	8003c48 <HAL_I2CEx_ConfigDigitalFilter>
 80026b2:	1e03      	subs	r3, r0, #0
 80026b4:	d001      	beq.n	80026ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026b6:	f000 f821 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000040 	.word	0x20000040
 80026c4:	40005400 	.word	0x40005400
 80026c8:	0000020b 	.word	0x0000020b

080026cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <MX_GPIO_Init+0x2c>)
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <MX_GPIO_Init+0x2c>)
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	0289      	lsls	r1, r1, #10
 80026dc:	430a      	orrs	r2, r1
 80026de:	615a      	str	r2, [r3, #20]
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <MX_GPIO_Init+0x2c>)
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	029b      	lsls	r3, r3, #10
 80026e8:	4013      	ands	r3, r2
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b002      	add	sp, #8
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	40021000 	.word	0x40021000

080026fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002700:	b672      	cpsid	i
}
 8002702:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002704:	e7fe      	b.n	8002704 <Error_Handler+0x8>
	...

08002708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_MspInit+0x44>)
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <HAL_MspInit+0x44>)
 8002714:	2101      	movs	r1, #1
 8002716:	430a      	orrs	r2, r1
 8002718:	619a      	str	r2, [r3, #24]
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_MspInit+0x44>)
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2201      	movs	r2, #1
 8002720:	4013      	ands	r3, r2
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_MspInit+0x44>)
 8002728:	69da      	ldr	r2, [r3, #28]
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <HAL_MspInit+0x44>)
 800272c:	2180      	movs	r1, #128	; 0x80
 800272e:	0549      	lsls	r1, r1, #21
 8002730:	430a      	orrs	r2, r1
 8002732:	61da      	str	r2, [r3, #28]
 8002734:	4b05      	ldr	r3, [pc, #20]	; (800274c <HAL_MspInit+0x44>)
 8002736:	69da      	ldr	r2, [r3, #28]
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	055b      	lsls	r3, r3, #21
 800273c:	4013      	ands	r3, r2
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	46bd      	mov	sp, r7
 8002746:	b002      	add	sp, #8
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	40021000 	.word	0x40021000

08002750 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b08b      	sub	sp, #44	; 0x2c
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	2414      	movs	r4, #20
 800275a:	193b      	adds	r3, r7, r4
 800275c:	0018      	movs	r0, r3
 800275e:	2314      	movs	r3, #20
 8002760:	001a      	movs	r2, r3
 8002762:	2100      	movs	r1, #0
 8002764:	f002 f88e 	bl	8004884 <memset>
  if(hi2c->Instance==I2C1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a1d      	ldr	r2, [pc, #116]	; (80027e4 <HAL_I2C_MspInit+0x94>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d133      	bne.n	80027da <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002772:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <HAL_I2C_MspInit+0x98>)
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	4b1c      	ldr	r3, [pc, #112]	; (80027e8 <HAL_I2C_MspInit+0x98>)
 8002778:	2180      	movs	r1, #128	; 0x80
 800277a:	0289      	lsls	r1, r1, #10
 800277c:	430a      	orrs	r2, r1
 800277e:	615a      	str	r2, [r3, #20]
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <HAL_I2C_MspInit+0x98>)
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	029b      	lsls	r3, r3, #10
 8002788:	4013      	ands	r3, r2
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800278e:	193b      	adds	r3, r7, r4
 8002790:	22c0      	movs	r2, #192	; 0xc0
 8002792:	00d2      	lsls	r2, r2, #3
 8002794:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002796:	0021      	movs	r1, r4
 8002798:	187b      	adds	r3, r7, r1
 800279a:	2212      	movs	r2, #18
 800279c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800279e:	187b      	adds	r3, r7, r1
 80027a0:	2201      	movs	r2, #1
 80027a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027a4:	187b      	adds	r3, r7, r1
 80027a6:	2203      	movs	r2, #3
 80027a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027aa:	187b      	adds	r3, r7, r1
 80027ac:	2204      	movs	r2, #4
 80027ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b0:	187a      	adds	r2, r7, r1
 80027b2:	2390      	movs	r3, #144	; 0x90
 80027b4:	05db      	lsls	r3, r3, #23
 80027b6:	0011      	movs	r1, r2
 80027b8:	0018      	movs	r0, r3
 80027ba:	f000 f975 	bl	8002aa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <HAL_I2C_MspInit+0x98>)
 80027c0:	69da      	ldr	r2, [r3, #28]
 80027c2:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <HAL_I2C_MspInit+0x98>)
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	0389      	lsls	r1, r1, #14
 80027c8:	430a      	orrs	r2, r1
 80027ca:	61da      	str	r2, [r3, #28]
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_I2C_MspInit+0x98>)
 80027ce:	69da      	ldr	r2, [r3, #28]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	039b      	lsls	r3, r3, #14
 80027d4:	4013      	ands	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	46bd      	mov	sp, r7
 80027de:	b00b      	add	sp, #44	; 0x2c
 80027e0:	bd90      	pop	{r4, r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	40005400 	.word	0x40005400
 80027e8:	40021000 	.word	0x40021000

080027ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027f0:	e7fe      	b.n	80027f0 <NMI_Handler+0x4>

080027f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f6:	e7fe      	b.n	80027f6 <HardFault_Handler+0x4>

080027f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80027fc:	46c0      	nop			; (mov r8, r8)
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002810:	f000 f87a 	bl	8002908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002814:	46c0      	nop			; (mov r8, r8)
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002824:	480d      	ldr	r0, [pc, #52]	; (800285c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002826:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002828:	f7ff fff7 	bl	800281a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800282c:	480c      	ldr	r0, [pc, #48]	; (8002860 <LoopForever+0x6>)
  ldr r1, =_edata
 800282e:	490d      	ldr	r1, [pc, #52]	; (8002864 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002830:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <LoopForever+0xe>)
  movs r3, #0
 8002832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002834:	e002      	b.n	800283c <LoopCopyDataInit>

08002836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800283a:	3304      	adds	r3, #4

0800283c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800283c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800283e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002840:	d3f9      	bcc.n	8002836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002842:	4a0a      	ldr	r2, [pc, #40]	; (800286c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002844:	4c0a      	ldr	r4, [pc, #40]	; (8002870 <LoopForever+0x16>)
  movs r3, #0
 8002846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002848:	e001      	b.n	800284e <LoopFillZerobss>

0800284a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800284a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800284c:	3204      	adds	r2, #4

0800284e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800284e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002850:	d3fb      	bcc.n	800284a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002852:	f002 f81f 	bl	8004894 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002856:	f7ff fe91 	bl	800257c <main>

0800285a <LoopForever>:

LoopForever:
    b LoopForever
 800285a:	e7fe      	b.n	800285a <LoopForever>
  ldr   r0, =_estack
 800285c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002864:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002868:	0800496c 	.word	0x0800496c
  ldr r2, =_sbss
 800286c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002870:	20000098 	.word	0x20000098

08002874 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002874:	e7fe      	b.n	8002874 <ADC1_COMP_IRQHandler>
	...

08002878 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800287c:	4b07      	ldr	r3, [pc, #28]	; (800289c <HAL_Init+0x24>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_Init+0x24>)
 8002882:	2110      	movs	r1, #16
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002888:	2003      	movs	r0, #3
 800288a:	f000 f809 	bl	80028a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800288e:	f7ff ff3b 	bl	8002708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	46c0      	nop			; (mov r8, r8)
 800289c:	40022000 	.word	0x40022000

080028a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <HAL_InitTick+0x5c>)
 80028aa:	681c      	ldr	r4, [r3, #0]
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <HAL_InitTick+0x60>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	0019      	movs	r1, r3
 80028b2:	23fa      	movs	r3, #250	; 0xfa
 80028b4:	0098      	lsls	r0, r3, #2
 80028b6:	f7fd fc25 	bl	8000104 <__udivsi3>
 80028ba:	0003      	movs	r3, r0
 80028bc:	0019      	movs	r1, r3
 80028be:	0020      	movs	r0, r4
 80028c0:	f7fd fc20 	bl	8000104 <__udivsi3>
 80028c4:	0003      	movs	r3, r0
 80028c6:	0018      	movs	r0, r3
 80028c8:	f000 f8e1 	bl	8002a8e <HAL_SYSTICK_Config>
 80028cc:	1e03      	subs	r3, r0, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e00f      	b.n	80028f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d80b      	bhi.n	80028f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	2301      	movs	r3, #1
 80028de:	425b      	negs	r3, r3
 80028e0:	2200      	movs	r2, #0
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 f8be 	bl	8002a64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_InitTick+0x64>)
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	e000      	b.n	80028f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
}
 80028f4:	0018      	movs	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b003      	add	sp, #12
 80028fa:	bd90      	pop	{r4, r7, pc}
 80028fc:	20000000 	.word	0x20000000
 8002900:	20000008 	.word	0x20000008
 8002904:	20000004 	.word	0x20000004

08002908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_IncTick+0x1c>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	001a      	movs	r2, r3
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_IncTick+0x20>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	18d2      	adds	r2, r2, r3
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <HAL_IncTick+0x20>)
 800291a:	601a      	str	r2, [r3, #0]
}
 800291c:	46c0      	nop			; (mov r8, r8)
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	20000008 	.word	0x20000008
 8002928:	20000094 	.word	0x20000094

0800292c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  return uwTick;
 8002930:	4b02      	ldr	r3, [pc, #8]	; (800293c <HAL_GetTick+0x10>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	0018      	movs	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	20000094 	.word	0x20000094

08002940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002940:	b590      	push	{r4, r7, lr}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	0002      	movs	r2, r0
 8002948:	6039      	str	r1, [r7, #0]
 800294a:	1dfb      	adds	r3, r7, #7
 800294c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800294e:	1dfb      	adds	r3, r7, #7
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b7f      	cmp	r3, #127	; 0x7f
 8002954:	d828      	bhi.n	80029a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002956:	4a2f      	ldr	r2, [pc, #188]	; (8002a14 <__NVIC_SetPriority+0xd4>)
 8002958:	1dfb      	adds	r3, r7, #7
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	b25b      	sxtb	r3, r3
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	33c0      	adds	r3, #192	; 0xc0
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	589b      	ldr	r3, [r3, r2]
 8002966:	1dfa      	adds	r2, r7, #7
 8002968:	7812      	ldrb	r2, [r2, #0]
 800296a:	0011      	movs	r1, r2
 800296c:	2203      	movs	r2, #3
 800296e:	400a      	ands	r2, r1
 8002970:	00d2      	lsls	r2, r2, #3
 8002972:	21ff      	movs	r1, #255	; 0xff
 8002974:	4091      	lsls	r1, r2
 8002976:	000a      	movs	r2, r1
 8002978:	43d2      	mvns	r2, r2
 800297a:	401a      	ands	r2, r3
 800297c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	019b      	lsls	r3, r3, #6
 8002982:	22ff      	movs	r2, #255	; 0xff
 8002984:	401a      	ands	r2, r3
 8002986:	1dfb      	adds	r3, r7, #7
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	0018      	movs	r0, r3
 800298c:	2303      	movs	r3, #3
 800298e:	4003      	ands	r3, r0
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002994:	481f      	ldr	r0, [pc, #124]	; (8002a14 <__NVIC_SetPriority+0xd4>)
 8002996:	1dfb      	adds	r3, r7, #7
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	b25b      	sxtb	r3, r3
 800299c:	089b      	lsrs	r3, r3, #2
 800299e:	430a      	orrs	r2, r1
 80029a0:	33c0      	adds	r3, #192	; 0xc0
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80029a6:	e031      	b.n	8002a0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029a8:	4a1b      	ldr	r2, [pc, #108]	; (8002a18 <__NVIC_SetPriority+0xd8>)
 80029aa:	1dfb      	adds	r3, r7, #7
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	0019      	movs	r1, r3
 80029b0:	230f      	movs	r3, #15
 80029b2:	400b      	ands	r3, r1
 80029b4:	3b08      	subs	r3, #8
 80029b6:	089b      	lsrs	r3, r3, #2
 80029b8:	3306      	adds	r3, #6
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	18d3      	adds	r3, r2, r3
 80029be:	3304      	adds	r3, #4
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	1dfa      	adds	r2, r7, #7
 80029c4:	7812      	ldrb	r2, [r2, #0]
 80029c6:	0011      	movs	r1, r2
 80029c8:	2203      	movs	r2, #3
 80029ca:	400a      	ands	r2, r1
 80029cc:	00d2      	lsls	r2, r2, #3
 80029ce:	21ff      	movs	r1, #255	; 0xff
 80029d0:	4091      	lsls	r1, r2
 80029d2:	000a      	movs	r2, r1
 80029d4:	43d2      	mvns	r2, r2
 80029d6:	401a      	ands	r2, r3
 80029d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	019b      	lsls	r3, r3, #6
 80029de:	22ff      	movs	r2, #255	; 0xff
 80029e0:	401a      	ands	r2, r3
 80029e2:	1dfb      	adds	r3, r7, #7
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	0018      	movs	r0, r3
 80029e8:	2303      	movs	r3, #3
 80029ea:	4003      	ands	r3, r0
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029f0:	4809      	ldr	r0, [pc, #36]	; (8002a18 <__NVIC_SetPriority+0xd8>)
 80029f2:	1dfb      	adds	r3, r7, #7
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	001c      	movs	r4, r3
 80029f8:	230f      	movs	r3, #15
 80029fa:	4023      	ands	r3, r4
 80029fc:	3b08      	subs	r3, #8
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	430a      	orrs	r2, r1
 8002a02:	3306      	adds	r3, #6
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	18c3      	adds	r3, r0, r3
 8002a08:	3304      	adds	r3, #4
 8002a0a:	601a      	str	r2, [r3, #0]
}
 8002a0c:	46c0      	nop			; (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b003      	add	sp, #12
 8002a12:	bd90      	pop	{r4, r7, pc}
 8002a14:	e000e100 	.word	0xe000e100
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	1e5a      	subs	r2, r3, #1
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	045b      	lsls	r3, r3, #17
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d301      	bcc.n	8002a34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a30:	2301      	movs	r3, #1
 8002a32:	e010      	b.n	8002a56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a34:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <SysTick_Config+0x44>)
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	3a01      	subs	r2, #1
 8002a3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	425b      	negs	r3, r3
 8002a40:	2103      	movs	r1, #3
 8002a42:	0018      	movs	r0, r3
 8002a44:	f7ff ff7c 	bl	8002940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <SysTick_Config+0x44>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4e:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <SysTick_Config+0x44>)
 8002a50:	2207      	movs	r2, #7
 8002a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	0018      	movs	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b002      	add	sp, #8
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	e000e010 	.word	0xe000e010

08002a64 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	210f      	movs	r1, #15
 8002a70:	187b      	adds	r3, r7, r1
 8002a72:	1c02      	adds	r2, r0, #0
 8002a74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	187b      	adds	r3, r7, r1
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	b25b      	sxtb	r3, r3
 8002a7e:	0011      	movs	r1, r2
 8002a80:	0018      	movs	r0, r3
 8002a82:	f7ff ff5d 	bl	8002940 <__NVIC_SetPriority>
}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b004      	add	sp, #16
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f7ff ffbf 	bl	8002a1c <SysTick_Config>
 8002a9e:	0003      	movs	r3, r0
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b002      	add	sp, #8
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ab6:	e155      	b.n	8002d64 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2101      	movs	r1, #1
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4091      	lsls	r1, r2
 8002ac2:	000a      	movs	r2, r1
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d100      	bne.n	8002ad0 <HAL_GPIO_Init+0x28>
 8002ace:	e146      	b.n	8002d5e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d005      	beq.n	8002ae8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d130      	bne.n	8002b4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	2203      	movs	r2, #3
 8002af4:	409a      	lsls	r2, r3
 8002af6:	0013      	movs	r3, r2
 8002af8:	43da      	mvns	r2, r3
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	0013      	movs	r3, r2
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b1e:	2201      	movs	r2, #1
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	409a      	lsls	r2, r3
 8002b24:	0013      	movs	r3, r2
 8002b26:	43da      	mvns	r2, r3
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	2201      	movs	r2, #1
 8002b36:	401a      	ands	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	0013      	movs	r3, r2
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2203      	movs	r2, #3
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d017      	beq.n	8002b86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	2203      	movs	r2, #3
 8002b62:	409a      	lsls	r2, r3
 8002b64:	0013      	movs	r3, r2
 8002b66:	43da      	mvns	r2, r3
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	409a      	lsls	r2, r3
 8002b78:	0013      	movs	r3, r2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d123      	bne.n	8002bda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	08da      	lsrs	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3208      	adds	r2, #8
 8002b9a:	0092      	lsls	r2, r2, #2
 8002b9c:	58d3      	ldr	r3, [r2, r3]
 8002b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2207      	movs	r2, #7
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	220f      	movs	r2, #15
 8002baa:	409a      	lsls	r2, r3
 8002bac:	0013      	movs	r3, r2
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2107      	movs	r1, #7
 8002bbe:	400b      	ands	r3, r1
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	0013      	movs	r3, r2
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	08da      	lsrs	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3208      	adds	r2, #8
 8002bd4:	0092      	lsls	r2, r2, #2
 8002bd6:	6939      	ldr	r1, [r7, #16]
 8002bd8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	2203      	movs	r2, #3
 8002be6:	409a      	lsls	r2, r3
 8002be8:	0013      	movs	r3, r2
 8002bea:	43da      	mvns	r2, r3
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	401a      	ands	r2, r3
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	0013      	movs	r3, r2
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	23c0      	movs	r3, #192	; 0xc0
 8002c14:	029b      	lsls	r3, r3, #10
 8002c16:	4013      	ands	r3, r2
 8002c18:	d100      	bne.n	8002c1c <HAL_GPIO_Init+0x174>
 8002c1a:	e0a0      	b.n	8002d5e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1c:	4b57      	ldr	r3, [pc, #348]	; (8002d7c <HAL_GPIO_Init+0x2d4>)
 8002c1e:	699a      	ldr	r2, [r3, #24]
 8002c20:	4b56      	ldr	r3, [pc, #344]	; (8002d7c <HAL_GPIO_Init+0x2d4>)
 8002c22:	2101      	movs	r1, #1
 8002c24:	430a      	orrs	r2, r1
 8002c26:	619a      	str	r2, [r3, #24]
 8002c28:	4b54      	ldr	r3, [pc, #336]	; (8002d7c <HAL_GPIO_Init+0x2d4>)
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	4013      	ands	r3, r2
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c34:	4a52      	ldr	r2, [pc, #328]	; (8002d80 <HAL_GPIO_Init+0x2d8>)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	089b      	lsrs	r3, r3, #2
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	589b      	ldr	r3, [r3, r2]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2203      	movs	r2, #3
 8002c46:	4013      	ands	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	220f      	movs	r2, #15
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	0013      	movs	r3, r2
 8002c50:	43da      	mvns	r2, r3
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	2390      	movs	r3, #144	; 0x90
 8002c5c:	05db      	lsls	r3, r3, #23
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d019      	beq.n	8002c96 <HAL_GPIO_Init+0x1ee>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a47      	ldr	r2, [pc, #284]	; (8002d84 <HAL_GPIO_Init+0x2dc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_GPIO_Init+0x1ea>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a46      	ldr	r2, [pc, #280]	; (8002d88 <HAL_GPIO_Init+0x2e0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00d      	beq.n	8002c8e <HAL_GPIO_Init+0x1e6>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a45      	ldr	r2, [pc, #276]	; (8002d8c <HAL_GPIO_Init+0x2e4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d007      	beq.n	8002c8a <HAL_GPIO_Init+0x1e2>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a44      	ldr	r2, [pc, #272]	; (8002d90 <HAL_GPIO_Init+0x2e8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d101      	bne.n	8002c86 <HAL_GPIO_Init+0x1de>
 8002c82:	2304      	movs	r3, #4
 8002c84:	e008      	b.n	8002c98 <HAL_GPIO_Init+0x1f0>
 8002c86:	2305      	movs	r3, #5
 8002c88:	e006      	b.n	8002c98 <HAL_GPIO_Init+0x1f0>
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e004      	b.n	8002c98 <HAL_GPIO_Init+0x1f0>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e002      	b.n	8002c98 <HAL_GPIO_Init+0x1f0>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <HAL_GPIO_Init+0x1f0>
 8002c96:	2300      	movs	r3, #0
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	2103      	movs	r1, #3
 8002c9c:	400a      	ands	r2, r1
 8002c9e:	0092      	lsls	r2, r2, #2
 8002ca0:	4093      	lsls	r3, r2
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ca8:	4935      	ldr	r1, [pc, #212]	; (8002d80 <HAL_GPIO_Init+0x2d8>)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	089b      	lsrs	r3, r3, #2
 8002cae:	3302      	adds	r3, #2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cb6:	4b37      	ldr	r3, [pc, #220]	; (8002d94 <HAL_GPIO_Init+0x2ec>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	035b      	lsls	r3, r3, #13
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002cda:	4b2e      	ldr	r3, [pc, #184]	; (8002d94 <HAL_GPIO_Init+0x2ec>)
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002ce0:	4b2c      	ldr	r3, [pc, #176]	; (8002d94 <HAL_GPIO_Init+0x2ec>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	43da      	mvns	r2, r3
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	039b      	lsls	r3, r3, #14
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d003      	beq.n	8002d04 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d04:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <HAL_GPIO_Init+0x2ec>)
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002d0a:	4b22      	ldr	r3, [pc, #136]	; (8002d94 <HAL_GPIO_Init+0x2ec>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	43da      	mvns	r2, r3
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4013      	ands	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	029b      	lsls	r3, r3, #10
 8002d22:	4013      	ands	r3, r2
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d2e:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <HAL_GPIO_Init+0x2ec>)
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002d34:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <HAL_GPIO_Init+0x2ec>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	43da      	mvns	r2, r3
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	2380      	movs	r3, #128	; 0x80
 8002d4a:	025b      	lsls	r3, r3, #9
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d58:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <HAL_GPIO_Init+0x2ec>)
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	3301      	adds	r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	40da      	lsrs	r2, r3
 8002d6c:	1e13      	subs	r3, r2, #0
 8002d6e:	d000      	beq.n	8002d72 <HAL_GPIO_Init+0x2ca>
 8002d70:	e6a2      	b.n	8002ab8 <HAL_GPIO_Init+0x10>
  } 
}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	46c0      	nop			; (mov r8, r8)
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b006      	add	sp, #24
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40010000 	.word	0x40010000
 8002d84:	48000400 	.word	0x48000400
 8002d88:	48000800 	.word	0x48000800
 8002d8c:	48000c00 	.word	0x48000c00
 8002d90:	48001000 	.word	0x48001000
 8002d94:	40010400 	.word	0x40010400

08002d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e082      	b.n	8002eb0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2241      	movs	r2, #65	; 0x41
 8002dae:	5c9b      	ldrb	r3, [r3, r2]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d107      	bne.n	8002dc6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2240      	movs	r2, #64	; 0x40
 8002dba:	2100      	movs	r1, #0
 8002dbc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	f7ff fcc5 	bl	8002750 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2241      	movs	r2, #65	; 0x41
 8002dca:	2124      	movs	r1, #36	; 0x24
 8002dcc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2101      	movs	r1, #1
 8002dda:	438a      	bics	r2, r1
 8002ddc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4934      	ldr	r1, [pc, #208]	; (8002eb8 <HAL_I2C_Init+0x120>)
 8002de8:	400a      	ands	r2, r1
 8002dea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4931      	ldr	r1, [pc, #196]	; (8002ebc <HAL_I2C_Init+0x124>)
 8002df8:	400a      	ands	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d108      	bne.n	8002e16 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2180      	movs	r1, #128	; 0x80
 8002e0e:	0209      	lsls	r1, r1, #8
 8002e10:	430a      	orrs	r2, r1
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	e007      	b.n	8002e26 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2184      	movs	r1, #132	; 0x84
 8002e20:	0209      	lsls	r1, r1, #8
 8002e22:	430a      	orrs	r2, r1
 8002e24:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d104      	bne.n	8002e38 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2280      	movs	r2, #128	; 0x80
 8002e34:	0112      	lsls	r2, r2, #4
 8002e36:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	491f      	ldr	r1, [pc, #124]	; (8002ec0 <HAL_I2C_Init+0x128>)
 8002e44:	430a      	orrs	r2, r1
 8002e46:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	491a      	ldr	r1, [pc, #104]	; (8002ebc <HAL_I2C_Init+0x124>)
 8002e54:	400a      	ands	r2, r1
 8002e56:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69d9      	ldr	r1, [r3, #28]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1a      	ldr	r2, [r3, #32]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2241      	movs	r2, #65	; 0x41
 8002e9c:	2120      	movs	r1, #32
 8002e9e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2242      	movs	r2, #66	; 0x42
 8002eaa:	2100      	movs	r1, #0
 8002eac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b002      	add	sp, #8
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	f0ffffff 	.word	0xf0ffffff
 8002ebc:	ffff7fff 	.word	0xffff7fff
 8002ec0:	02008000 	.word	0x02008000

08002ec4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b089      	sub	sp, #36	; 0x24
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	000c      	movs	r4, r1
 8002ece:	0010      	movs	r0, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	230a      	movs	r3, #10
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	1c22      	adds	r2, r4, #0
 8002ed8:	801a      	strh	r2, [r3, #0]
 8002eda:	2308      	movs	r3, #8
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	1c02      	adds	r2, r0, #0
 8002ee0:	801a      	strh	r2, [r3, #0]
 8002ee2:	1dbb      	adds	r3, r7, #6
 8002ee4:	1c0a      	adds	r2, r1, #0
 8002ee6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2241      	movs	r2, #65	; 0x41
 8002eec:	5c9b      	ldrb	r3, [r3, r2]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d000      	beq.n	8002ef6 <HAL_I2C_Mem_Write+0x32>
 8002ef4:	e10c      	b.n	8003110 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d004      	beq.n	8002f06 <HAL_I2C_Mem_Write+0x42>
 8002efc:	232c      	movs	r3, #44	; 0x2c
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d105      	bne.n	8002f12 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2280      	movs	r2, #128	; 0x80
 8002f0a:	0092      	lsls	r2, r2, #2
 8002f0c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e0ff      	b.n	8003112 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2240      	movs	r2, #64	; 0x40
 8002f16:	5c9b      	ldrb	r3, [r3, r2]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_I2C_Mem_Write+0x5c>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e0f8      	b.n	8003112 <HAL_I2C_Mem_Write+0x24e>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2240      	movs	r2, #64	; 0x40
 8002f24:	2101      	movs	r1, #1
 8002f26:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f28:	f7ff fd00 	bl	800292c <HAL_GetTick>
 8002f2c:	0003      	movs	r3, r0
 8002f2e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	0219      	lsls	r1, r3, #8
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	2319      	movs	r3, #25
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f000 fc25 	bl	800378c <I2C_WaitOnFlagUntilTimeout>
 8002f42:	1e03      	subs	r3, r0, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0e3      	b.n	8003112 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2241      	movs	r2, #65	; 0x41
 8002f4e:	2121      	movs	r1, #33	; 0x21
 8002f50:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2242      	movs	r2, #66	; 0x42
 8002f56:	2140      	movs	r1, #64	; 0x40
 8002f58:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	222c      	movs	r2, #44	; 0x2c
 8002f6a:	18ba      	adds	r2, r7, r2
 8002f6c:	8812      	ldrh	r2, [r2, #0]
 8002f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f76:	1dbb      	adds	r3, r7, #6
 8002f78:	881c      	ldrh	r4, [r3, #0]
 8002f7a:	2308      	movs	r3, #8
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	881a      	ldrh	r2, [r3, #0]
 8002f80:	230a      	movs	r3, #10
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	8819      	ldrh	r1, [r3, #0]
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	9301      	str	r3, [sp, #4]
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	0023      	movs	r3, r4
 8002f92:	f000 fb13 	bl	80035bc <I2C_RequestMemoryWrite>
 8002f96:	1e03      	subs	r3, r0, #0
 8002f98:	d005      	beq.n	8002fa6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2240      	movs	r2, #64	; 0x40
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e0b5      	b.n	8003112 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2bff      	cmp	r3, #255	; 0xff
 8002fae:	d911      	bls.n	8002fd4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	22ff      	movs	r2, #255	; 0xff
 8002fb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	045c      	lsls	r4, r3, #17
 8002fc0:	230a      	movs	r3, #10
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	8819      	ldrh	r1, [r3, #0]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	0023      	movs	r3, r4
 8002fce:	f000 fdb5 	bl	8003b3c <I2C_TransferConfig>
 8002fd2:	e012      	b.n	8002ffa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	049c      	lsls	r4, r3, #18
 8002fe8:	230a      	movs	r3, #10
 8002fea:	18fb      	adds	r3, r7, r3
 8002fec:	8819      	ldrh	r1, [r3, #0]
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	0023      	movs	r3, r4
 8002ff6:	f000 fda1 	bl	8003b3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	0018      	movs	r0, r3
 8003002:	f000 fc11 	bl	8003828 <I2C_WaitOnTXISFlagUntilTimeout>
 8003006:	1e03      	subs	r3, r0, #0
 8003008:	d001      	beq.n	800300e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e081      	b.n	8003112 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	781a      	ldrb	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003042:	b29b      	uxth	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d03a      	beq.n	80030be <HAL_I2C_Mem_Write+0x1fa>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	d136      	bne.n	80030be <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	0013      	movs	r3, r2
 800305a:	2200      	movs	r2, #0
 800305c:	2180      	movs	r1, #128	; 0x80
 800305e:	f000 fb95 	bl	800378c <I2C_WaitOnFlagUntilTimeout>
 8003062:	1e03      	subs	r3, r0, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e053      	b.n	8003112 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	2bff      	cmp	r3, #255	; 0xff
 8003072:	d911      	bls.n	8003098 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	22ff      	movs	r2, #255	; 0xff
 8003078:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307e:	b2da      	uxtb	r2, r3
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	045c      	lsls	r4, r3, #17
 8003084:	230a      	movs	r3, #10
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	8819      	ldrh	r1, [r3, #0]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	2300      	movs	r3, #0
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	0023      	movs	r3, r4
 8003092:	f000 fd53 	bl	8003b3c <I2C_TransferConfig>
 8003096:	e012      	b.n	80030be <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	049c      	lsls	r4, r3, #18
 80030ac:	230a      	movs	r3, #10
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	8819      	ldrh	r1, [r3, #0]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	2300      	movs	r3, #0
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	0023      	movs	r3, r4
 80030ba:	f000 fd3f 	bl	8003b3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d198      	bne.n	8002ffa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 fbf0 	bl	80038b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030d4:	1e03      	subs	r3, r0, #0
 80030d6:	d001      	beq.n	80030dc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e01a      	b.n	8003112 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2220      	movs	r2, #32
 80030e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	490b      	ldr	r1, [pc, #44]	; (800311c <HAL_I2C_Mem_Write+0x258>)
 80030f0:	400a      	ands	r2, r1
 80030f2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2241      	movs	r2, #65	; 0x41
 80030f8:	2120      	movs	r1, #32
 80030fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2242      	movs	r2, #66	; 0x42
 8003100:	2100      	movs	r1, #0
 8003102:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2240      	movs	r2, #64	; 0x40
 8003108:	2100      	movs	r1, #0
 800310a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	e000      	b.n	8003112 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003110:	2302      	movs	r3, #2
  }
}
 8003112:	0018      	movs	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	b007      	add	sp, #28
 8003118:	bd90      	pop	{r4, r7, pc}
 800311a:	46c0      	nop			; (mov r8, r8)
 800311c:	fe00e800 	.word	0xfe00e800

08003120 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af02      	add	r7, sp, #8
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	000c      	movs	r4, r1
 800312a:	0010      	movs	r0, r2
 800312c:	0019      	movs	r1, r3
 800312e:	230a      	movs	r3, #10
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	1c22      	adds	r2, r4, #0
 8003134:	801a      	strh	r2, [r3, #0]
 8003136:	2308      	movs	r3, #8
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	1c02      	adds	r2, r0, #0
 800313c:	801a      	strh	r2, [r3, #0]
 800313e:	1dbb      	adds	r3, r7, #6
 8003140:	1c0a      	adds	r2, r1, #0
 8003142:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2241      	movs	r2, #65	; 0x41
 8003148:	5c9b      	ldrb	r3, [r3, r2]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b20      	cmp	r3, #32
 800314e:	d000      	beq.n	8003152 <HAL_I2C_Mem_Read+0x32>
 8003150:	e110      	b.n	8003374 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	d004      	beq.n	8003162 <HAL_I2C_Mem_Read+0x42>
 8003158:	232c      	movs	r3, #44	; 0x2c
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d105      	bne.n	800316e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2280      	movs	r2, #128	; 0x80
 8003166:	0092      	lsls	r2, r2, #2
 8003168:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e103      	b.n	8003376 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2240      	movs	r2, #64	; 0x40
 8003172:	5c9b      	ldrb	r3, [r3, r2]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_I2C_Mem_Read+0x5c>
 8003178:	2302      	movs	r3, #2
 800317a:	e0fc      	b.n	8003376 <HAL_I2C_Mem_Read+0x256>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2240      	movs	r2, #64	; 0x40
 8003180:	2101      	movs	r1, #1
 8003182:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003184:	f7ff fbd2 	bl	800292c <HAL_GetTick>
 8003188:	0003      	movs	r3, r0
 800318a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	0219      	lsls	r1, r3, #8
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	2319      	movs	r3, #25
 8003198:	2201      	movs	r2, #1
 800319a:	f000 faf7 	bl	800378c <I2C_WaitOnFlagUntilTimeout>
 800319e:	1e03      	subs	r3, r0, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e0e7      	b.n	8003376 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2241      	movs	r2, #65	; 0x41
 80031aa:	2122      	movs	r1, #34	; 0x22
 80031ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2242      	movs	r2, #66	; 0x42
 80031b2:	2140      	movs	r1, #64	; 0x40
 80031b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	222c      	movs	r2, #44	; 0x2c
 80031c6:	18ba      	adds	r2, r7, r2
 80031c8:	8812      	ldrh	r2, [r2, #0]
 80031ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031d2:	1dbb      	adds	r3, r7, #6
 80031d4:	881c      	ldrh	r4, [r3, #0]
 80031d6:	2308      	movs	r3, #8
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	881a      	ldrh	r2, [r3, #0]
 80031dc:	230a      	movs	r3, #10
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	8819      	ldrh	r1, [r3, #0]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	0023      	movs	r3, r4
 80031ee:	f000 fa49 	bl	8003684 <I2C_RequestMemoryRead>
 80031f2:	1e03      	subs	r3, r0, #0
 80031f4:	d005      	beq.n	8003202 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2240      	movs	r2, #64	; 0x40
 80031fa:	2100      	movs	r1, #0
 80031fc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e0b9      	b.n	8003376 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	2bff      	cmp	r3, #255	; 0xff
 800320a:	d911      	bls.n	8003230 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	22ff      	movs	r2, #255	; 0xff
 8003210:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003216:	b2da      	uxtb	r2, r3
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	045c      	lsls	r4, r3, #17
 800321c:	230a      	movs	r3, #10
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	8819      	ldrh	r1, [r3, #0]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	4b56      	ldr	r3, [pc, #344]	; (8003380 <HAL_I2C_Mem_Read+0x260>)
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	0023      	movs	r3, r4
 800322a:	f000 fc87 	bl	8003b3c <I2C_TransferConfig>
 800322e:	e012      	b.n	8003256 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	b2da      	uxtb	r2, r3
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	049c      	lsls	r4, r3, #18
 8003244:	230a      	movs	r3, #10
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	8819      	ldrh	r1, [r3, #0]
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	4b4c      	ldr	r3, [pc, #304]	; (8003380 <HAL_I2C_Mem_Read+0x260>)
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	0023      	movs	r3, r4
 8003252:	f000 fc73 	bl	8003b3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	0013      	movs	r3, r2
 8003260:	2200      	movs	r2, #0
 8003262:	2104      	movs	r1, #4
 8003264:	f000 fa92 	bl	800378c <I2C_WaitOnFlagUntilTimeout>
 8003268:	1e03      	subs	r3, r0, #0
 800326a:	d001      	beq.n	8003270 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e082      	b.n	8003376 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	1c5a      	adds	r2, r3, #1
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003298:	b29b      	uxth	r3, r3
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d03a      	beq.n	8003322 <HAL_I2C_Mem_Read+0x202>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d136      	bne.n	8003322 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	0013      	movs	r3, r2
 80032be:	2200      	movs	r2, #0
 80032c0:	2180      	movs	r1, #128	; 0x80
 80032c2:	f000 fa63 	bl	800378c <I2C_WaitOnFlagUntilTimeout>
 80032c6:	1e03      	subs	r3, r0, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e053      	b.n	8003376 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2bff      	cmp	r3, #255	; 0xff
 80032d6:	d911      	bls.n	80032fc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	22ff      	movs	r2, #255	; 0xff
 80032dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	045c      	lsls	r4, r3, #17
 80032e8:	230a      	movs	r3, #10
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	8819      	ldrh	r1, [r3, #0]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	2300      	movs	r3, #0
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	0023      	movs	r3, r4
 80032f6:	f000 fc21 	bl	8003b3c <I2C_TransferConfig>
 80032fa:	e012      	b.n	8003322 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330a:	b2da      	uxtb	r2, r3
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	049c      	lsls	r4, r3, #18
 8003310:	230a      	movs	r3, #10
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	8819      	ldrh	r1, [r3, #0]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	2300      	movs	r3, #0
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	0023      	movs	r3, r4
 800331e:	f000 fc0d 	bl	8003b3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003326:	b29b      	uxth	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d194      	bne.n	8003256 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	0018      	movs	r0, r3
 8003334:	f000 fabe 	bl	80038b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003338:	1e03      	subs	r3, r0, #0
 800333a:	d001      	beq.n	8003340 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e01a      	b.n	8003376 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2220      	movs	r2, #32
 8003346:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	490c      	ldr	r1, [pc, #48]	; (8003384 <HAL_I2C_Mem_Read+0x264>)
 8003354:	400a      	ands	r2, r1
 8003356:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2241      	movs	r2, #65	; 0x41
 800335c:	2120      	movs	r1, #32
 800335e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2242      	movs	r2, #66	; 0x42
 8003364:	2100      	movs	r1, #0
 8003366:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2240      	movs	r2, #64	; 0x40
 800336c:	2100      	movs	r1, #0
 800336e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003374:	2302      	movs	r3, #2
  }
}
 8003376:	0018      	movs	r0, r3
 8003378:	46bd      	mov	sp, r7
 800337a:	b007      	add	sp, #28
 800337c:	bd90      	pop	{r4, r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	80002400 	.word	0x80002400
 8003384:	fe00e800 	.word	0xfe00e800

08003388 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08a      	sub	sp, #40	; 0x28
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	230a      	movs	r3, #10
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	1c0a      	adds	r2, r1, #0
 800339a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2241      	movs	r2, #65	; 0x41
 80033a4:	5c9b      	ldrb	r3, [r3, r2]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d000      	beq.n	80033ae <HAL_I2C_IsDeviceReady+0x26>
 80033ac:	e0fd      	b.n	80035aa <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	021b      	lsls	r3, r3, #8
 80033b8:	401a      	ands	r2, r3
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	429a      	cmp	r2, r3
 80033c0:	d101      	bne.n	80033c6 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80033c2:	2302      	movs	r3, #2
 80033c4:	e0f2      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2240      	movs	r2, #64	; 0x40
 80033ca:	5c9b      	ldrb	r3, [r3, r2]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_I2C_IsDeviceReady+0x4c>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e0eb      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x224>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2240      	movs	r2, #64	; 0x40
 80033d8:	2101      	movs	r1, #1
 80033da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2241      	movs	r2, #65	; 0x41
 80033e0:	2124      	movs	r1, #36	; 0x24
 80033e2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d107      	bne.n	8003402 <HAL_I2C_IsDeviceReady+0x7a>
 80033f2:	230a      	movs	r3, #10
 80033f4:	18fb      	adds	r3, r7, r3
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	059b      	lsls	r3, r3, #22
 80033fa:	0d9b      	lsrs	r3, r3, #22
 80033fc:	4a6d      	ldr	r2, [pc, #436]	; (80035b4 <HAL_I2C_IsDeviceReady+0x22c>)
 80033fe:	431a      	orrs	r2, r3
 8003400:	e006      	b.n	8003410 <HAL_I2C_IsDeviceReady+0x88>
 8003402:	230a      	movs	r3, #10
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	059b      	lsls	r3, r3, #22
 800340a:	0d9b      	lsrs	r3, r3, #22
 800340c:	4a6a      	ldr	r2, [pc, #424]	; (80035b8 <HAL_I2C_IsDeviceReady+0x230>)
 800340e:	431a      	orrs	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003416:	f7ff fa89 	bl	800292c <HAL_GetTick>
 800341a:	0003      	movs	r3, r0
 800341c:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	2220      	movs	r2, #32
 8003426:	4013      	ands	r3, r2
 8003428:	3b20      	subs	r3, #32
 800342a:	425a      	negs	r2, r3
 800342c:	4153      	adcs	r3, r2
 800342e:	b2da      	uxtb	r2, r3
 8003430:	231f      	movs	r3, #31
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2210      	movs	r2, #16
 800343e:	4013      	ands	r3, r2
 8003440:	3b10      	subs	r3, #16
 8003442:	425a      	negs	r2, r3
 8003444:	4153      	adcs	r3, r2
 8003446:	b2da      	uxtb	r2, r3
 8003448:	231e      	movs	r3, #30
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800344e:	e035      	b.n	80034bc <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	3301      	adds	r3, #1
 8003454:	d01a      	beq.n	800348c <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003456:	f7ff fa69 	bl	800292c <HAL_GetTick>
 800345a:	0002      	movs	r2, r0
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d302      	bcc.n	800346c <HAL_I2C_IsDeviceReady+0xe4>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10f      	bne.n	800348c <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2241      	movs	r2, #65	; 0x41
 8003470:	2120      	movs	r1, #32
 8003472:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003478:	2220      	movs	r2, #32
 800347a:	431a      	orrs	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2240      	movs	r2, #64	; 0x40
 8003484:	2100      	movs	r1, #0
 8003486:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e08f      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2220      	movs	r2, #32
 8003494:	4013      	ands	r3, r2
 8003496:	3b20      	subs	r3, #32
 8003498:	425a      	negs	r2, r3
 800349a:	4153      	adcs	r3, r2
 800349c:	b2da      	uxtb	r2, r3
 800349e:	231f      	movs	r3, #31
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	2210      	movs	r2, #16
 80034ac:	4013      	ands	r3, r2
 80034ae:	3b10      	subs	r3, #16
 80034b0:	425a      	negs	r2, r3
 80034b2:	4153      	adcs	r3, r2
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	231e      	movs	r3, #30
 80034b8:	18fb      	adds	r3, r7, r3
 80034ba:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80034bc:	231f      	movs	r3, #31
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d104      	bne.n	80034d0 <HAL_I2C_IsDeviceReady+0x148>
 80034c6:	231e      	movs	r3, #30
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0bf      	beq.n	8003450 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	2210      	movs	r2, #16
 80034d8:	4013      	ands	r3, r2
 80034da:	2b10      	cmp	r3, #16
 80034dc:	d01a      	beq.n	8003514 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	0013      	movs	r3, r2
 80034e8:	2200      	movs	r2, #0
 80034ea:	2120      	movs	r1, #32
 80034ec:	f000 f94e 	bl	800378c <I2C_WaitOnFlagUntilTimeout>
 80034f0:	1e03      	subs	r3, r0, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e059      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2220      	movs	r2, #32
 80034fe:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2241      	movs	r2, #65	; 0x41
 8003504:	2120      	movs	r1, #32
 8003506:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2240      	movs	r2, #64	; 0x40
 800350c:	2100      	movs	r1, #0
 800350e:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	e04b      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	0013      	movs	r3, r2
 800351e:	2200      	movs	r2, #0
 8003520:	2120      	movs	r1, #32
 8003522:	f000 f933 	bl	800378c <I2C_WaitOnFlagUntilTimeout>
 8003526:	1e03      	subs	r3, r0, #0
 8003528:	d001      	beq.n	800352e <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e03e      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2210      	movs	r2, #16
 8003534:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2220      	movs	r2, #32
 800353c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	429a      	cmp	r2, r3
 8003544:	d119      	bne.n	800357a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2180      	movs	r1, #128	; 0x80
 8003552:	01c9      	lsls	r1, r1, #7
 8003554:	430a      	orrs	r2, r1
 8003556:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	0013      	movs	r3, r2
 8003562:	2200      	movs	r2, #0
 8003564:	2120      	movs	r1, #32
 8003566:	f000 f911 	bl	800378c <I2C_WaitOnFlagUntilTimeout>
 800356a:	1e03      	subs	r3, r0, #0
 800356c:	d001      	beq.n	8003572 <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e01c      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2220      	movs	r2, #32
 8003578:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	3301      	adds	r3, #1
 800357e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	429a      	cmp	r2, r3
 8003586:	d900      	bls.n	800358a <HAL_I2C_IsDeviceReady+0x202>
 8003588:	e72f      	b.n	80033ea <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2241      	movs	r2, #65	; 0x41
 800358e:	2120      	movs	r1, #32
 8003590:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	2220      	movs	r2, #32
 8003598:	431a      	orrs	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2240      	movs	r2, #64	; 0x40
 80035a2:	2100      	movs	r1, #0
 80035a4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 80035aa:	2302      	movs	r3, #2
  }
}
 80035ac:	0018      	movs	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b008      	add	sp, #32
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	02002000 	.word	0x02002000
 80035b8:	02002800 	.word	0x02002800

080035bc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80035bc:	b5b0      	push	{r4, r5, r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	000c      	movs	r4, r1
 80035c6:	0010      	movs	r0, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	250a      	movs	r5, #10
 80035cc:	197b      	adds	r3, r7, r5
 80035ce:	1c22      	adds	r2, r4, #0
 80035d0:	801a      	strh	r2, [r3, #0]
 80035d2:	2308      	movs	r3, #8
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	1c02      	adds	r2, r0, #0
 80035d8:	801a      	strh	r2, [r3, #0]
 80035da:	1dbb      	adds	r3, r7, #6
 80035dc:	1c0a      	adds	r2, r1, #0
 80035de:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80035e0:	1dbb      	adds	r3, r7, #6
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	045c      	lsls	r4, r3, #17
 80035ea:	197b      	adds	r3, r7, r5
 80035ec:	8819      	ldrh	r1, [r3, #0]
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	4b23      	ldr	r3, [pc, #140]	; (8003680 <I2C_RequestMemoryWrite+0xc4>)
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	0023      	movs	r3, r4
 80035f6:	f000 faa1 	bl	8003b3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fc:	6a39      	ldr	r1, [r7, #32]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	0018      	movs	r0, r3
 8003602:	f000 f911 	bl	8003828 <I2C_WaitOnTXISFlagUntilTimeout>
 8003606:	1e03      	subs	r3, r0, #0
 8003608:	d001      	beq.n	800360e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e033      	b.n	8003676 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800360e:	1dbb      	adds	r3, r7, #6
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d107      	bne.n	8003626 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003616:	2308      	movs	r3, #8
 8003618:	18fb      	adds	r3, r7, r3
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	b2da      	uxtb	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	629a      	str	r2, [r3, #40]	; 0x28
 8003624:	e019      	b.n	800365a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003626:	2308      	movs	r3, #8
 8003628:	18fb      	adds	r3, r7, r3
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	0a1b      	lsrs	r3, r3, #8
 800362e:	b29b      	uxth	r3, r3
 8003630:	b2da      	uxtb	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363a:	6a39      	ldr	r1, [r7, #32]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	0018      	movs	r0, r3
 8003640:	f000 f8f2 	bl	8003828 <I2C_WaitOnTXISFlagUntilTimeout>
 8003644:	1e03      	subs	r3, r0, #0
 8003646:	d001      	beq.n	800364c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e014      	b.n	8003676 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800364c:	2308      	movs	r3, #8
 800364e:	18fb      	adds	r3, r7, r3
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	b2da      	uxtb	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800365a:	6a3a      	ldr	r2, [r7, #32]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	9300      	str	r3, [sp, #0]
 8003662:	0013      	movs	r3, r2
 8003664:	2200      	movs	r2, #0
 8003666:	2180      	movs	r1, #128	; 0x80
 8003668:	f000 f890 	bl	800378c <I2C_WaitOnFlagUntilTimeout>
 800366c:	1e03      	subs	r3, r0, #0
 800366e:	d001      	beq.n	8003674 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e000      	b.n	8003676 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	0018      	movs	r0, r3
 8003678:	46bd      	mov	sp, r7
 800367a:	b004      	add	sp, #16
 800367c:	bdb0      	pop	{r4, r5, r7, pc}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	80002000 	.word	0x80002000

08003684 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003684:	b5b0      	push	{r4, r5, r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	000c      	movs	r4, r1
 800368e:	0010      	movs	r0, r2
 8003690:	0019      	movs	r1, r3
 8003692:	250a      	movs	r5, #10
 8003694:	197b      	adds	r3, r7, r5
 8003696:	1c22      	adds	r2, r4, #0
 8003698:	801a      	strh	r2, [r3, #0]
 800369a:	2308      	movs	r3, #8
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	1c02      	adds	r2, r0, #0
 80036a0:	801a      	strh	r2, [r3, #0]
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	1c0a      	adds	r2, r1, #0
 80036a6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036a8:	1dbb      	adds	r3, r7, #6
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	197b      	adds	r3, r7, r5
 80036b0:	8819      	ldrh	r1, [r3, #0]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	4b23      	ldr	r3, [pc, #140]	; (8003744 <I2C_RequestMemoryRead+0xc0>)
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	2300      	movs	r3, #0
 80036ba:	f000 fa3f 	bl	8003b3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036c0:	6a39      	ldr	r1, [r7, #32]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	0018      	movs	r0, r3
 80036c6:	f000 f8af 	bl	8003828 <I2C_WaitOnTXISFlagUntilTimeout>
 80036ca:	1e03      	subs	r3, r0, #0
 80036cc:	d001      	beq.n	80036d2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e033      	b.n	800373a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036d2:	1dbb      	adds	r3, r7, #6
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d107      	bne.n	80036ea <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036da:	2308      	movs	r3, #8
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	629a      	str	r2, [r3, #40]	; 0x28
 80036e8:	e019      	b.n	800371e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036ea:	2308      	movs	r3, #8
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	0a1b      	lsrs	r3, r3, #8
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fe:	6a39      	ldr	r1, [r7, #32]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	0018      	movs	r0, r3
 8003704:	f000 f890 	bl	8003828 <I2C_WaitOnTXISFlagUntilTimeout>
 8003708:	1e03      	subs	r3, r0, #0
 800370a:	d001      	beq.n	8003710 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e014      	b.n	800373a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003710:	2308      	movs	r3, #8
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	b2da      	uxtb	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800371e:	6a3a      	ldr	r2, [r7, #32]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	0013      	movs	r3, r2
 8003728:	2200      	movs	r2, #0
 800372a:	2140      	movs	r1, #64	; 0x40
 800372c:	f000 f82e 	bl	800378c <I2C_WaitOnFlagUntilTimeout>
 8003730:	1e03      	subs	r3, r0, #0
 8003732:	d001      	beq.n	8003738 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	0018      	movs	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	b004      	add	sp, #16
 8003740:	bdb0      	pop	{r4, r5, r7, pc}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	80002000 	.word	0x80002000

08003748 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2202      	movs	r2, #2
 8003758:	4013      	ands	r3, r2
 800375a:	2b02      	cmp	r3, #2
 800375c:	d103      	bne.n	8003766 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2200      	movs	r2, #0
 8003764:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	2201      	movs	r2, #1
 800376e:	4013      	ands	r3, r2
 8003770:	2b01      	cmp	r3, #1
 8003772:	d007      	beq.n	8003784 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699a      	ldr	r2, [r3, #24]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2101      	movs	r1, #1
 8003780:	430a      	orrs	r2, r1
 8003782:	619a      	str	r2, [r3, #24]
  }
}
 8003784:	46c0      	nop			; (mov r8, r8)
 8003786:	46bd      	mov	sp, r7
 8003788:	b002      	add	sp, #8
 800378a:	bd80      	pop	{r7, pc}

0800378c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	1dfb      	adds	r3, r7, #7
 800379a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800379c:	e030      	b.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	3301      	adds	r3, #1
 80037a2:	d02d      	beq.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a4:	f7ff f8c2 	bl	800292c <HAL_GetTick>
 80037a8:	0002      	movs	r2, r0
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d302      	bcc.n	80037ba <I2C_WaitOnFlagUntilTimeout+0x2e>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d122      	bne.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	4013      	ands	r3, r2
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	425a      	negs	r2, r3
 80037ca:	4153      	adcs	r3, r2
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	001a      	movs	r2, r3
 80037d0:	1dfb      	adds	r3, r7, #7
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d113      	bne.n	8003800 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037dc:	2220      	movs	r2, #32
 80037de:	431a      	orrs	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2241      	movs	r2, #65	; 0x41
 80037e8:	2120      	movs	r1, #32
 80037ea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2242      	movs	r2, #66	; 0x42
 80037f0:	2100      	movs	r1, #0
 80037f2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2240      	movs	r2, #64	; 0x40
 80037f8:	2100      	movs	r1, #0
 80037fa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e00f      	b.n	8003820 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	4013      	ands	r3, r2
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	425a      	negs	r2, r3
 8003810:	4153      	adcs	r3, r2
 8003812:	b2db      	uxtb	r3, r3
 8003814:	001a      	movs	r2, r3
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d0bf      	beq.n	800379e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	0018      	movs	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	b004      	add	sp, #16
 8003826:	bd80      	pop	{r7, pc}

08003828 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003834:	e032      	b.n	800389c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	0018      	movs	r0, r3
 800383e:	f000 f87d 	bl	800393c <I2C_IsErrorOccurred>
 8003842:	1e03      	subs	r3, r0, #0
 8003844:	d001      	beq.n	800384a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e030      	b.n	80038ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	3301      	adds	r3, #1
 800384e:	d025      	beq.n	800389c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003850:	f7ff f86c 	bl	800292c <HAL_GetTick>
 8003854:	0002      	movs	r2, r0
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	429a      	cmp	r2, r3
 800385e:	d302      	bcc.n	8003866 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d11a      	bne.n	800389c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2202      	movs	r2, #2
 800386e:	4013      	ands	r3, r2
 8003870:	2b02      	cmp	r3, #2
 8003872:	d013      	beq.n	800389c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003878:	2220      	movs	r2, #32
 800387a:	431a      	orrs	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2241      	movs	r2, #65	; 0x41
 8003884:	2120      	movs	r1, #32
 8003886:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2242      	movs	r2, #66	; 0x42
 800388c:	2100      	movs	r1, #0
 800388e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2240      	movs	r2, #64	; 0x40
 8003894:	2100      	movs	r1, #0
 8003896:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e007      	b.n	80038ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2202      	movs	r2, #2
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d1c5      	bne.n	8003836 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	0018      	movs	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b004      	add	sp, #16
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038c0:	e02f      	b.n	8003922 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	0018      	movs	r0, r3
 80038ca:	f000 f837 	bl	800393c <I2C_IsErrorOccurred>
 80038ce:	1e03      	subs	r3, r0, #0
 80038d0:	d001      	beq.n	80038d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e02d      	b.n	8003932 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d6:	f7ff f829 	bl	800292c <HAL_GetTick>
 80038da:	0002      	movs	r2, r0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d302      	bcc.n	80038ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d11a      	bne.n	8003922 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2220      	movs	r2, #32
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b20      	cmp	r3, #32
 80038f8:	d013      	beq.n	8003922 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	2220      	movs	r2, #32
 8003900:	431a      	orrs	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2241      	movs	r2, #65	; 0x41
 800390a:	2120      	movs	r1, #32
 800390c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2242      	movs	r2, #66	; 0x42
 8003912:	2100      	movs	r1, #0
 8003914:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2240      	movs	r2, #64	; 0x40
 800391a:	2100      	movs	r1, #0
 800391c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e007      	b.n	8003932 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2220      	movs	r2, #32
 800392a:	4013      	ands	r3, r2
 800392c:	2b20      	cmp	r3, #32
 800392e:	d1c8      	bne.n	80038c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	0018      	movs	r0, r3
 8003934:	46bd      	mov	sp, r7
 8003936:	b004      	add	sp, #16
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b08b      	sub	sp, #44	; 0x2c
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003948:	2327      	movs	r3, #39	; 0x27
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	2210      	movs	r2, #16
 8003964:	4013      	ands	r3, r2
 8003966:	d100      	bne.n	800396a <I2C_IsErrorOccurred+0x2e>
 8003968:	e082      	b.n	8003a70 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2210      	movs	r2, #16
 8003970:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003972:	e060      	b.n	8003a36 <I2C_IsErrorOccurred+0xfa>
 8003974:	2427      	movs	r4, #39	; 0x27
 8003976:	193b      	adds	r3, r7, r4
 8003978:	193a      	adds	r2, r7, r4
 800397a:	7812      	ldrb	r2, [r2, #0]
 800397c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	3301      	adds	r3, #1
 8003982:	d058      	beq.n	8003a36 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003984:	f7fe ffd2 	bl	800292c <HAL_GetTick>
 8003988:	0002      	movs	r2, r0
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	429a      	cmp	r2, r3
 8003992:	d306      	bcc.n	80039a2 <I2C_IsErrorOccurred+0x66>
 8003994:	193b      	adds	r3, r7, r4
 8003996:	193a      	adds	r2, r7, r4
 8003998:	7812      	ldrb	r2, [r2, #0]
 800399a:	701a      	strb	r2, [r3, #0]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d149      	bne.n	8003a36 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	01db      	lsls	r3, r3, #7
 80039ac:	4013      	ands	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039b0:	2013      	movs	r0, #19
 80039b2:	183b      	adds	r3, r7, r0
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	2142      	movs	r1, #66	; 0x42
 80039b8:	5c52      	ldrb	r2, [r2, r1]
 80039ba:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699a      	ldr	r2, [r3, #24]
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	401a      	ands	r2, r3
 80039c8:	2380      	movs	r3, #128	; 0x80
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d126      	bne.n	8003a1e <I2C_IsErrorOccurred+0xe2>
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	01db      	lsls	r3, r3, #7
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d021      	beq.n	8003a1e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80039da:	183b      	adds	r3, r7, r0
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d01d      	beq.n	8003a1e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2180      	movs	r1, #128	; 0x80
 80039ee:	01c9      	lsls	r1, r1, #7
 80039f0:	430a      	orrs	r2, r1
 80039f2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80039f4:	f7fe ff9a 	bl	800292c <HAL_GetTick>
 80039f8:	0003      	movs	r3, r0
 80039fa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039fc:	e00f      	b.n	8003a1e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039fe:	f7fe ff95 	bl	800292c <HAL_GetTick>
 8003a02:	0002      	movs	r2, r0
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b19      	cmp	r3, #25
 8003a0a:	d908      	bls.n	8003a1e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	4313      	orrs	r3, r2
 8003a12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a14:	2327      	movs	r3, #39	; 0x27
 8003a16:	18fb      	adds	r3, r7, r3
 8003a18:	2201      	movs	r2, #1
 8003a1a:	701a      	strb	r2, [r3, #0]

              break;
 8003a1c:	e00b      	b.n	8003a36 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2220      	movs	r2, #32
 8003a26:	4013      	ands	r3, r2
 8003a28:	2127      	movs	r1, #39	; 0x27
 8003a2a:	187a      	adds	r2, r7, r1
 8003a2c:	1879      	adds	r1, r7, r1
 8003a2e:	7809      	ldrb	r1, [r1, #0]
 8003a30:	7011      	strb	r1, [r2, #0]
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d1e3      	bne.n	80039fe <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d004      	beq.n	8003a4e <I2C_IsErrorOccurred+0x112>
 8003a44:	2327      	movs	r3, #39	; 0x27
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d092      	beq.n	8003974 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a4e:	2327      	movs	r3, #39	; 0x27
 8003a50:	18fb      	adds	r3, r7, r3
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d103      	bne.n	8003a60 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	2204      	movs	r2, #4
 8003a64:	4313      	orrs	r3, r2
 8003a66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a68:	2327      	movs	r3, #39	; 0x27
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d00c      	beq.n	8003a9c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	2201      	movs	r2, #1
 8003a86:	4313      	orrs	r3, r2
 8003a88:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2280      	movs	r2, #128	; 0x80
 8003a90:	0052      	lsls	r2, r2, #1
 8003a92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a94:	2327      	movs	r3, #39	; 0x27
 8003a96:	18fb      	adds	r3, r7, r3
 8003a98:	2201      	movs	r2, #1
 8003a9a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	2380      	movs	r3, #128	; 0x80
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d00c      	beq.n	8003ac0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003aa6:	6a3b      	ldr	r3, [r7, #32]
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2280      	movs	r2, #128	; 0x80
 8003ab4:	00d2      	lsls	r2, r2, #3
 8003ab6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ab8:	2327      	movs	r3, #39	; 0x27
 8003aba:	18fb      	adds	r3, r7, r3
 8003abc:	2201      	movs	r2, #1
 8003abe:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	2380      	movs	r3, #128	; 0x80
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d00c      	beq.n	8003ae4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	2202      	movs	r2, #2
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2280      	movs	r2, #128	; 0x80
 8003ad8:	0092      	lsls	r2, r2, #2
 8003ada:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003adc:	2327      	movs	r3, #39	; 0x27
 8003ade:	18fb      	adds	r3, r7, r3
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003ae4:	2327      	movs	r3, #39	; 0x27
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d01d      	beq.n	8003b2a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	0018      	movs	r0, r3
 8003af2:	f7ff fe29 	bl	8003748 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	490d      	ldr	r1, [pc, #52]	; (8003b38 <I2C_IsErrorOccurred+0x1fc>)
 8003b02:	400a      	ands	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2241      	movs	r2, #65	; 0x41
 8003b16:	2120      	movs	r1, #32
 8003b18:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2242      	movs	r2, #66	; 0x42
 8003b1e:	2100      	movs	r1, #0
 8003b20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2240      	movs	r2, #64	; 0x40
 8003b26:	2100      	movs	r1, #0
 8003b28:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003b2a:	2327      	movs	r3, #39	; 0x27
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	781b      	ldrb	r3, [r3, #0]
}
 8003b30:	0018      	movs	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b00b      	add	sp, #44	; 0x2c
 8003b36:	bd90      	pop	{r4, r7, pc}
 8003b38:	fe00e800 	.word	0xfe00e800

08003b3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b3c:	b590      	push	{r4, r7, lr}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	0008      	movs	r0, r1
 8003b46:	0011      	movs	r1, r2
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	240a      	movs	r4, #10
 8003b4c:	193b      	adds	r3, r7, r4
 8003b4e:	1c02      	adds	r2, r0, #0
 8003b50:	801a      	strh	r2, [r3, #0]
 8003b52:	2009      	movs	r0, #9
 8003b54:	183b      	adds	r3, r7, r0
 8003b56:	1c0a      	adds	r2, r1, #0
 8003b58:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b5a:	193b      	adds	r3, r7, r4
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	059b      	lsls	r3, r3, #22
 8003b60:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b62:	183b      	adds	r3, r7, r0
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	0419      	lsls	r1, r3, #16
 8003b68:	23ff      	movs	r3, #255	; 0xff
 8003b6a:	041b      	lsls	r3, r3, #16
 8003b6c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b6e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	4313      	orrs	r3, r2
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b86:	0d51      	lsrs	r1, r2, #21
 8003b88:	2280      	movs	r2, #128	; 0x80
 8003b8a:	00d2      	lsls	r2, r2, #3
 8003b8c:	400a      	ands	r2, r1
 8003b8e:	4907      	ldr	r1, [pc, #28]	; (8003bac <I2C_TransferConfig+0x70>)
 8003b90:	430a      	orrs	r2, r1
 8003b92:	43d2      	mvns	r2, r2
 8003b94:	401a      	ands	r2, r3
 8003b96:	0011      	movs	r1, r2
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	b007      	add	sp, #28
 8003ba8:	bd90      	pop	{r4, r7, pc}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	03ff63ff 	.word	0x03ff63ff

08003bb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2241      	movs	r2, #65	; 0x41
 8003bbe:	5c9b      	ldrb	r3, [r3, r2]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b20      	cmp	r3, #32
 8003bc4:	d138      	bne.n	8003c38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2240      	movs	r2, #64	; 0x40
 8003bca:	5c9b      	ldrb	r3, [r3, r2]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e032      	b.n	8003c3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2240      	movs	r2, #64	; 0x40
 8003bd8:	2101      	movs	r1, #1
 8003bda:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2241      	movs	r2, #65	; 0x41
 8003be0:	2124      	movs	r1, #36	; 0x24
 8003be2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2101      	movs	r1, #1
 8003bf0:	438a      	bics	r2, r1
 8003bf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4911      	ldr	r1, [pc, #68]	; (8003c44 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003c00:	400a      	ands	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6819      	ldr	r1, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2101      	movs	r1, #1
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2241      	movs	r2, #65	; 0x41
 8003c28:	2120      	movs	r1, #32
 8003c2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2240      	movs	r2, #64	; 0x40
 8003c30:	2100      	movs	r1, #0
 8003c32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	e000      	b.n	8003c3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c38:	2302      	movs	r3, #2
  }
}
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b002      	add	sp, #8
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	ffffefff 	.word	0xffffefff

08003c48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2241      	movs	r2, #65	; 0x41
 8003c56:	5c9b      	ldrb	r3, [r3, r2]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	d139      	bne.n	8003cd2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2240      	movs	r2, #64	; 0x40
 8003c62:	5c9b      	ldrb	r3, [r3, r2]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e033      	b.n	8003cd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2240      	movs	r2, #64	; 0x40
 8003c70:	2101      	movs	r1, #1
 8003c72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2241      	movs	r2, #65	; 0x41
 8003c78:	2124      	movs	r1, #36	; 0x24
 8003c7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2101      	movs	r1, #1
 8003c88:	438a      	bics	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a11      	ldr	r2, [pc, #68]	; (8003cdc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	021b      	lsls	r3, r3, #8
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2241      	movs	r2, #65	; 0x41
 8003cc2:	2120      	movs	r1, #32
 8003cc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2240      	movs	r2, #64	; 0x40
 8003cca:	2100      	movs	r1, #0
 8003ccc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	e000      	b.n	8003cd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cd2:	2302      	movs	r3, #2
  }
}
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b004      	add	sp, #16
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	fffff0ff 	.word	0xfffff0ff

08003ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d102      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f000 fb76 	bl	80043e0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d100      	bne.n	8003d00 <HAL_RCC_OscConfig+0x20>
 8003cfe:	e08e      	b.n	8003e1e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003d00:	4bc5      	ldr	r3, [pc, #788]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	220c      	movs	r2, #12
 8003d06:	4013      	ands	r3, r2
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d00e      	beq.n	8003d2a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d0c:	4bc2      	ldr	r3, [pc, #776]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	220c      	movs	r2, #12
 8003d12:	4013      	ands	r3, r2
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d117      	bne.n	8003d48 <HAL_RCC_OscConfig+0x68>
 8003d18:	4bbf      	ldr	r3, [pc, #764]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	23c0      	movs	r3, #192	; 0xc0
 8003d1e:	025b      	lsls	r3, r3, #9
 8003d20:	401a      	ands	r2, r3
 8003d22:	2380      	movs	r3, #128	; 0x80
 8003d24:	025b      	lsls	r3, r3, #9
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d10e      	bne.n	8003d48 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2a:	4bbb      	ldr	r3, [pc, #748]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	2380      	movs	r3, #128	; 0x80
 8003d30:	029b      	lsls	r3, r3, #10
 8003d32:	4013      	ands	r3, r2
 8003d34:	d100      	bne.n	8003d38 <HAL_RCC_OscConfig+0x58>
 8003d36:	e071      	b.n	8003e1c <HAL_RCC_OscConfig+0x13c>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d000      	beq.n	8003d42 <HAL_RCC_OscConfig+0x62>
 8003d40:	e06c      	b.n	8003e1c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	f000 fb4c 	bl	80043e0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d107      	bne.n	8003d60 <HAL_RCC_OscConfig+0x80>
 8003d50:	4bb1      	ldr	r3, [pc, #708]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	4bb0      	ldr	r3, [pc, #704]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003d56:	2180      	movs	r1, #128	; 0x80
 8003d58:	0249      	lsls	r1, r1, #9
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	e02f      	b.n	8003dc0 <HAL_RCC_OscConfig+0xe0>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10c      	bne.n	8003d82 <HAL_RCC_OscConfig+0xa2>
 8003d68:	4bab      	ldr	r3, [pc, #684]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	4baa      	ldr	r3, [pc, #680]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003d6e:	49ab      	ldr	r1, [pc, #684]	; (800401c <HAL_RCC_OscConfig+0x33c>)
 8003d70:	400a      	ands	r2, r1
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	4ba8      	ldr	r3, [pc, #672]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	4ba7      	ldr	r3, [pc, #668]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003d7a:	49a9      	ldr	r1, [pc, #676]	; (8004020 <HAL_RCC_OscConfig+0x340>)
 8003d7c:	400a      	ands	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	e01e      	b.n	8003dc0 <HAL_RCC_OscConfig+0xe0>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b05      	cmp	r3, #5
 8003d88:	d10e      	bne.n	8003da8 <HAL_RCC_OscConfig+0xc8>
 8003d8a:	4ba3      	ldr	r3, [pc, #652]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4ba2      	ldr	r3, [pc, #648]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003d90:	2180      	movs	r1, #128	; 0x80
 8003d92:	02c9      	lsls	r1, r1, #11
 8003d94:	430a      	orrs	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	4b9f      	ldr	r3, [pc, #636]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b9e      	ldr	r3, [pc, #632]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003d9e:	2180      	movs	r1, #128	; 0x80
 8003da0:	0249      	lsls	r1, r1, #9
 8003da2:	430a      	orrs	r2, r1
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	e00b      	b.n	8003dc0 <HAL_RCC_OscConfig+0xe0>
 8003da8:	4b9b      	ldr	r3, [pc, #620]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4b9a      	ldr	r3, [pc, #616]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003dae:	499b      	ldr	r1, [pc, #620]	; (800401c <HAL_RCC_OscConfig+0x33c>)
 8003db0:	400a      	ands	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	4b98      	ldr	r3, [pc, #608]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4b97      	ldr	r3, [pc, #604]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003dba:	4999      	ldr	r1, [pc, #612]	; (8004020 <HAL_RCC_OscConfig+0x340>)
 8003dbc:	400a      	ands	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d014      	beq.n	8003df2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc8:	f7fe fdb0 	bl	800292c <HAL_GetTick>
 8003dcc:	0003      	movs	r3, r0
 8003dce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dd2:	f7fe fdab 	bl	800292c <HAL_GetTick>
 8003dd6:	0002      	movs	r2, r0
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b64      	cmp	r3, #100	; 0x64
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e2fd      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de4:	4b8c      	ldr	r3, [pc, #560]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	029b      	lsls	r3, r3, #10
 8003dec:	4013      	ands	r3, r2
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0xf2>
 8003df0:	e015      	b.n	8003e1e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df2:	f7fe fd9b 	bl	800292c <HAL_GetTick>
 8003df6:	0003      	movs	r3, r0
 8003df8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dfc:	f7fe fd96 	bl	800292c <HAL_GetTick>
 8003e00:	0002      	movs	r2, r0
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	; 0x64
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e2e8      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0e:	4b82      	ldr	r3, [pc, #520]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	2380      	movs	r3, #128	; 0x80
 8003e14:	029b      	lsls	r3, r3, #10
 8003e16:	4013      	ands	r3, r2
 8003e18:	d1f0      	bne.n	8003dfc <HAL_RCC_OscConfig+0x11c>
 8003e1a:	e000      	b.n	8003e1e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e1c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2202      	movs	r2, #2
 8003e24:	4013      	ands	r3, r2
 8003e26:	d100      	bne.n	8003e2a <HAL_RCC_OscConfig+0x14a>
 8003e28:	e06c      	b.n	8003f04 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e2a:	4b7b      	ldr	r3, [pc, #492]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	220c      	movs	r2, #12
 8003e30:	4013      	ands	r3, r2
 8003e32:	d00e      	beq.n	8003e52 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e34:	4b78      	ldr	r3, [pc, #480]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	220c      	movs	r2, #12
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d11f      	bne.n	8003e80 <HAL_RCC_OscConfig+0x1a0>
 8003e40:	4b75      	ldr	r3, [pc, #468]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	23c0      	movs	r3, #192	; 0xc0
 8003e46:	025b      	lsls	r3, r3, #9
 8003e48:	401a      	ands	r2, r3
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	021b      	lsls	r3, r3, #8
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d116      	bne.n	8003e80 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e52:	4b71      	ldr	r3, [pc, #452]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2202      	movs	r2, #2
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d005      	beq.n	8003e68 <HAL_RCC_OscConfig+0x188>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e2bb      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e68:	4b6b      	ldr	r3, [pc, #428]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	22f8      	movs	r2, #248	; 0xf8
 8003e6e:	4393      	bics	r3, r2
 8003e70:	0019      	movs	r1, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	00da      	lsls	r2, r3, #3
 8003e78:	4b67      	ldr	r3, [pc, #412]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e7e:	e041      	b.n	8003f04 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d024      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e88:	4b63      	ldr	r3, [pc, #396]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4b62      	ldr	r3, [pc, #392]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003e8e:	2101      	movs	r1, #1
 8003e90:	430a      	orrs	r2, r1
 8003e92:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e94:	f7fe fd4a 	bl	800292c <HAL_GetTick>
 8003e98:	0003      	movs	r3, r0
 8003e9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e9e:	f7fe fd45 	bl	800292c <HAL_GetTick>
 8003ea2:	0002      	movs	r2, r0
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e297      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb0:	4b59      	ldr	r3, [pc, #356]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d0f1      	beq.n	8003e9e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eba:	4b57      	ldr	r3, [pc, #348]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	22f8      	movs	r2, #248	; 0xf8
 8003ec0:	4393      	bics	r3, r2
 8003ec2:	0019      	movs	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	00da      	lsls	r2, r3, #3
 8003eca:	4b53      	ldr	r3, [pc, #332]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	e018      	b.n	8003f04 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ed2:	4b51      	ldr	r3, [pc, #324]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	4b50      	ldr	r3, [pc, #320]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003ed8:	2101      	movs	r1, #1
 8003eda:	438a      	bics	r2, r1
 8003edc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ede:	f7fe fd25 	bl	800292c <HAL_GetTick>
 8003ee2:	0003      	movs	r3, r0
 8003ee4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ee8:	f7fe fd20 	bl	800292c <HAL_GetTick>
 8003eec:	0002      	movs	r2, r0
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e272      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efa:	4b47      	ldr	r3, [pc, #284]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2202      	movs	r2, #2
 8003f00:	4013      	ands	r3, r2
 8003f02:	d1f1      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2208      	movs	r2, #8
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d036      	beq.n	8003f7c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d019      	beq.n	8003f4a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f16:	4b40      	ldr	r3, [pc, #256]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f1a:	4b3f      	ldr	r3, [pc, #252]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f22:	f7fe fd03 	bl	800292c <HAL_GetTick>
 8003f26:	0003      	movs	r3, r0
 8003f28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f2c:	f7fe fcfe 	bl	800292c <HAL_GetTick>
 8003f30:	0002      	movs	r2, r0
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e250      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3e:	4b36      	ldr	r3, [pc, #216]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	2202      	movs	r2, #2
 8003f44:	4013      	ands	r3, r2
 8003f46:	d0f1      	beq.n	8003f2c <HAL_RCC_OscConfig+0x24c>
 8003f48:	e018      	b.n	8003f7c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f4a:	4b33      	ldr	r3, [pc, #204]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f4e:	4b32      	ldr	r3, [pc, #200]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003f50:	2101      	movs	r1, #1
 8003f52:	438a      	bics	r2, r1
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f56:	f7fe fce9 	bl	800292c <HAL_GetTick>
 8003f5a:	0003      	movs	r3, r0
 8003f5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f60:	f7fe fce4 	bl	800292c <HAL_GetTick>
 8003f64:	0002      	movs	r2, r0
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e236      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f72:	4b29      	ldr	r3, [pc, #164]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	2202      	movs	r2, #2
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d1f1      	bne.n	8003f60 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2204      	movs	r2, #4
 8003f82:	4013      	ands	r3, r2
 8003f84:	d100      	bne.n	8003f88 <HAL_RCC_OscConfig+0x2a8>
 8003f86:	e0b5      	b.n	80040f4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f88:	201f      	movs	r0, #31
 8003f8a:	183b      	adds	r3, r7, r0
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f90:	4b21      	ldr	r3, [pc, #132]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003f92:	69da      	ldr	r2, [r3, #28]
 8003f94:	2380      	movs	r3, #128	; 0x80
 8003f96:	055b      	lsls	r3, r3, #21
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d110      	bne.n	8003fbe <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f9c:	4b1e      	ldr	r3, [pc, #120]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	4b1d      	ldr	r3, [pc, #116]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003fa2:	2180      	movs	r1, #128	; 0x80
 8003fa4:	0549      	lsls	r1, r1, #21
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	61da      	str	r2, [r3, #28]
 8003faa:	4b1b      	ldr	r3, [pc, #108]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 8003fac:	69da      	ldr	r2, [r3, #28]
 8003fae:	2380      	movs	r3, #128	; 0x80
 8003fb0:	055b      	lsls	r3, r3, #21
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fb8:	183b      	adds	r3, r7, r0
 8003fba:	2201      	movs	r2, #1
 8003fbc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbe:	4b19      	ldr	r3, [pc, #100]	; (8004024 <HAL_RCC_OscConfig+0x344>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	2380      	movs	r3, #128	; 0x80
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d11a      	bne.n	8004000 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fca:	4b16      	ldr	r3, [pc, #88]	; (8004024 <HAL_RCC_OscConfig+0x344>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4b15      	ldr	r3, [pc, #84]	; (8004024 <HAL_RCC_OscConfig+0x344>)
 8003fd0:	2180      	movs	r1, #128	; 0x80
 8003fd2:	0049      	lsls	r1, r1, #1
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd8:	f7fe fca8 	bl	800292c <HAL_GetTick>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe2:	f7fe fca3 	bl	800292c <HAL_GetTick>
 8003fe6:	0002      	movs	r2, r0
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b64      	cmp	r3, #100	; 0x64
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e1f5      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_OscConfig+0x344>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	2380      	movs	r3, #128	; 0x80
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d0f0      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d10f      	bne.n	8004028 <HAL_RCC_OscConfig+0x348>
 8004008:	4b03      	ldr	r3, [pc, #12]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 800400a:	6a1a      	ldr	r2, [r3, #32]
 800400c:	4b02      	ldr	r3, [pc, #8]	; (8004018 <HAL_RCC_OscConfig+0x338>)
 800400e:	2101      	movs	r1, #1
 8004010:	430a      	orrs	r2, r1
 8004012:	621a      	str	r2, [r3, #32]
 8004014:	e036      	b.n	8004084 <HAL_RCC_OscConfig+0x3a4>
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	40021000 	.word	0x40021000
 800401c:	fffeffff 	.word	0xfffeffff
 8004020:	fffbffff 	.word	0xfffbffff
 8004024:	40007000 	.word	0x40007000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10c      	bne.n	800404a <HAL_RCC_OscConfig+0x36a>
 8004030:	4bca      	ldr	r3, [pc, #808]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004032:	6a1a      	ldr	r2, [r3, #32]
 8004034:	4bc9      	ldr	r3, [pc, #804]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004036:	2101      	movs	r1, #1
 8004038:	438a      	bics	r2, r1
 800403a:	621a      	str	r2, [r3, #32]
 800403c:	4bc7      	ldr	r3, [pc, #796]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 800403e:	6a1a      	ldr	r2, [r3, #32]
 8004040:	4bc6      	ldr	r3, [pc, #792]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004042:	2104      	movs	r1, #4
 8004044:	438a      	bics	r2, r1
 8004046:	621a      	str	r2, [r3, #32]
 8004048:	e01c      	b.n	8004084 <HAL_RCC_OscConfig+0x3a4>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b05      	cmp	r3, #5
 8004050:	d10c      	bne.n	800406c <HAL_RCC_OscConfig+0x38c>
 8004052:	4bc2      	ldr	r3, [pc, #776]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004054:	6a1a      	ldr	r2, [r3, #32]
 8004056:	4bc1      	ldr	r3, [pc, #772]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004058:	2104      	movs	r1, #4
 800405a:	430a      	orrs	r2, r1
 800405c:	621a      	str	r2, [r3, #32]
 800405e:	4bbf      	ldr	r3, [pc, #764]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004060:	6a1a      	ldr	r2, [r3, #32]
 8004062:	4bbe      	ldr	r3, [pc, #760]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004064:	2101      	movs	r1, #1
 8004066:	430a      	orrs	r2, r1
 8004068:	621a      	str	r2, [r3, #32]
 800406a:	e00b      	b.n	8004084 <HAL_RCC_OscConfig+0x3a4>
 800406c:	4bbb      	ldr	r3, [pc, #748]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 800406e:	6a1a      	ldr	r2, [r3, #32]
 8004070:	4bba      	ldr	r3, [pc, #744]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004072:	2101      	movs	r1, #1
 8004074:	438a      	bics	r2, r1
 8004076:	621a      	str	r2, [r3, #32]
 8004078:	4bb8      	ldr	r3, [pc, #736]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 800407a:	6a1a      	ldr	r2, [r3, #32]
 800407c:	4bb7      	ldr	r3, [pc, #732]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 800407e:	2104      	movs	r1, #4
 8004080:	438a      	bics	r2, r1
 8004082:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d014      	beq.n	80040b6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408c:	f7fe fc4e 	bl	800292c <HAL_GetTick>
 8004090:	0003      	movs	r3, r0
 8004092:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004094:	e009      	b.n	80040aa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004096:	f7fe fc49 	bl	800292c <HAL_GetTick>
 800409a:	0002      	movs	r2, r0
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	4aaf      	ldr	r2, [pc, #700]	; (8004360 <HAL_RCC_OscConfig+0x680>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e19a      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040aa:	4bac      	ldr	r3, [pc, #688]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	2202      	movs	r2, #2
 80040b0:	4013      	ands	r3, r2
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCC_OscConfig+0x3b6>
 80040b4:	e013      	b.n	80040de <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b6:	f7fe fc39 	bl	800292c <HAL_GetTick>
 80040ba:	0003      	movs	r3, r0
 80040bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040be:	e009      	b.n	80040d4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c0:	f7fe fc34 	bl	800292c <HAL_GetTick>
 80040c4:	0002      	movs	r2, r0
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	4aa5      	ldr	r2, [pc, #660]	; (8004360 <HAL_RCC_OscConfig+0x680>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e185      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d4:	4ba1      	ldr	r3, [pc, #644]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	2202      	movs	r2, #2
 80040da:	4013      	ands	r3, r2
 80040dc:	d1f0      	bne.n	80040c0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040de:	231f      	movs	r3, #31
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d105      	bne.n	80040f4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e8:	4b9c      	ldr	r3, [pc, #624]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 80040ea:	69da      	ldr	r2, [r3, #28]
 80040ec:	4b9b      	ldr	r3, [pc, #620]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 80040ee:	499d      	ldr	r1, [pc, #628]	; (8004364 <HAL_RCC_OscConfig+0x684>)
 80040f0:	400a      	ands	r2, r1
 80040f2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2210      	movs	r2, #16
 80040fa:	4013      	ands	r3, r2
 80040fc:	d063      	beq.n	80041c6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d12a      	bne.n	800415c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004106:	4b95      	ldr	r3, [pc, #596]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800410a:	4b94      	ldr	r3, [pc, #592]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 800410c:	2104      	movs	r1, #4
 800410e:	430a      	orrs	r2, r1
 8004110:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004112:	4b92      	ldr	r3, [pc, #584]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004116:	4b91      	ldr	r3, [pc, #580]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004118:	2101      	movs	r1, #1
 800411a:	430a      	orrs	r2, r1
 800411c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800411e:	f7fe fc05 	bl	800292c <HAL_GetTick>
 8004122:	0003      	movs	r3, r0
 8004124:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004128:	f7fe fc00 	bl	800292c <HAL_GetTick>
 800412c:	0002      	movs	r2, r0
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e152      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800413a:	4b88      	ldr	r3, [pc, #544]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 800413c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413e:	2202      	movs	r2, #2
 8004140:	4013      	ands	r3, r2
 8004142:	d0f1      	beq.n	8004128 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004144:	4b85      	ldr	r3, [pc, #532]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004148:	22f8      	movs	r2, #248	; 0xf8
 800414a:	4393      	bics	r3, r2
 800414c:	0019      	movs	r1, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	00da      	lsls	r2, r3, #3
 8004154:	4b81      	ldr	r3, [pc, #516]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004156:	430a      	orrs	r2, r1
 8004158:	635a      	str	r2, [r3, #52]	; 0x34
 800415a:	e034      	b.n	80041c6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	3305      	adds	r3, #5
 8004162:	d111      	bne.n	8004188 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004164:	4b7d      	ldr	r3, [pc, #500]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004168:	4b7c      	ldr	r3, [pc, #496]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 800416a:	2104      	movs	r1, #4
 800416c:	438a      	bics	r2, r1
 800416e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004170:	4b7a      	ldr	r3, [pc, #488]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004174:	22f8      	movs	r2, #248	; 0xf8
 8004176:	4393      	bics	r3, r2
 8004178:	0019      	movs	r1, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	00da      	lsls	r2, r3, #3
 8004180:	4b76      	ldr	r3, [pc, #472]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004182:	430a      	orrs	r2, r1
 8004184:	635a      	str	r2, [r3, #52]	; 0x34
 8004186:	e01e      	b.n	80041c6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004188:	4b74      	ldr	r3, [pc, #464]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 800418a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800418c:	4b73      	ldr	r3, [pc, #460]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 800418e:	2104      	movs	r1, #4
 8004190:	430a      	orrs	r2, r1
 8004192:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004194:	4b71      	ldr	r3, [pc, #452]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004198:	4b70      	ldr	r3, [pc, #448]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 800419a:	2101      	movs	r1, #1
 800419c:	438a      	bics	r2, r1
 800419e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a0:	f7fe fbc4 	bl	800292c <HAL_GetTick>
 80041a4:	0003      	movs	r3, r0
 80041a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80041aa:	f7fe fbbf 	bl	800292c <HAL_GetTick>
 80041ae:	0002      	movs	r2, r0
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e111      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80041bc:	4b67      	ldr	r3, [pc, #412]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 80041be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c0:	2202      	movs	r2, #2
 80041c2:	4013      	ands	r3, r2
 80041c4:	d1f1      	bne.n	80041aa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2220      	movs	r2, #32
 80041cc:	4013      	ands	r3, r2
 80041ce:	d05c      	beq.n	800428a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80041d0:	4b62      	ldr	r3, [pc, #392]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	220c      	movs	r2, #12
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b0c      	cmp	r3, #12
 80041da:	d00e      	beq.n	80041fa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80041dc:	4b5f      	ldr	r3, [pc, #380]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	220c      	movs	r2, #12
 80041e2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80041e4:	2b08      	cmp	r3, #8
 80041e6:	d114      	bne.n	8004212 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80041e8:	4b5c      	ldr	r3, [pc, #368]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	23c0      	movs	r3, #192	; 0xc0
 80041ee:	025b      	lsls	r3, r3, #9
 80041f0:	401a      	ands	r2, r3
 80041f2:	23c0      	movs	r3, #192	; 0xc0
 80041f4:	025b      	lsls	r3, r3, #9
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d10b      	bne.n	8004212 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80041fa:	4b58      	ldr	r3, [pc, #352]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 80041fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	029b      	lsls	r3, r3, #10
 8004202:	4013      	ands	r3, r2
 8004204:	d040      	beq.n	8004288 <HAL_RCC_OscConfig+0x5a8>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d03c      	beq.n	8004288 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e0e6      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d01b      	beq.n	8004252 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800421a:	4b50      	ldr	r3, [pc, #320]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 800421c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800421e:	4b4f      	ldr	r3, [pc, #316]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004220:	2180      	movs	r1, #128	; 0x80
 8004222:	0249      	lsls	r1, r1, #9
 8004224:	430a      	orrs	r2, r1
 8004226:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004228:	f7fe fb80 	bl	800292c <HAL_GetTick>
 800422c:	0003      	movs	r3, r0
 800422e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004232:	f7fe fb7b 	bl	800292c <HAL_GetTick>
 8004236:	0002      	movs	r2, r0
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e0cd      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004244:	4b45      	ldr	r3, [pc, #276]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	029b      	lsls	r3, r3, #10
 800424c:	4013      	ands	r3, r2
 800424e:	d0f0      	beq.n	8004232 <HAL_RCC_OscConfig+0x552>
 8004250:	e01b      	b.n	800428a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004252:	4b42      	ldr	r3, [pc, #264]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004256:	4b41      	ldr	r3, [pc, #260]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004258:	4943      	ldr	r1, [pc, #268]	; (8004368 <HAL_RCC_OscConfig+0x688>)
 800425a:	400a      	ands	r2, r1
 800425c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425e:	f7fe fb65 	bl	800292c <HAL_GetTick>
 8004262:	0003      	movs	r3, r0
 8004264:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004268:	f7fe fb60 	bl	800292c <HAL_GetTick>
 800426c:	0002      	movs	r2, r0
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e0b2      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800427a:	4b38      	ldr	r3, [pc, #224]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 800427c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800427e:	2380      	movs	r3, #128	; 0x80
 8004280:	029b      	lsls	r3, r3, #10
 8004282:	4013      	ands	r3, r2
 8004284:	d1f0      	bne.n	8004268 <HAL_RCC_OscConfig+0x588>
 8004286:	e000      	b.n	800428a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004288:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	2b00      	cmp	r3, #0
 8004290:	d100      	bne.n	8004294 <HAL_RCC_OscConfig+0x5b4>
 8004292:	e0a4      	b.n	80043de <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004294:	4b31      	ldr	r3, [pc, #196]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	220c      	movs	r2, #12
 800429a:	4013      	ands	r3, r2
 800429c:	2b08      	cmp	r3, #8
 800429e:	d100      	bne.n	80042a2 <HAL_RCC_OscConfig+0x5c2>
 80042a0:	e078      	b.n	8004394 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d14c      	bne.n	8004344 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042aa:	4b2c      	ldr	r3, [pc, #176]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4b2b      	ldr	r3, [pc, #172]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 80042b0:	492e      	ldr	r1, [pc, #184]	; (800436c <HAL_RCC_OscConfig+0x68c>)
 80042b2:	400a      	ands	r2, r1
 80042b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b6:	f7fe fb39 	bl	800292c <HAL_GetTick>
 80042ba:	0003      	movs	r3, r0
 80042bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c0:	f7fe fb34 	bl	800292c <HAL_GetTick>
 80042c4:	0002      	movs	r2, r0
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e086      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d2:	4b22      	ldr	r3, [pc, #136]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	049b      	lsls	r3, r3, #18
 80042da:	4013      	ands	r3, r2
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042de:	4b1f      	ldr	r3, [pc, #124]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	220f      	movs	r2, #15
 80042e4:	4393      	bics	r3, r2
 80042e6:	0019      	movs	r1, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ec:	4b1b      	ldr	r3, [pc, #108]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 80042ee:	430a      	orrs	r2, r1
 80042f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80042f2:	4b1a      	ldr	r3, [pc, #104]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4a1e      	ldr	r2, [pc, #120]	; (8004370 <HAL_RCC_OscConfig+0x690>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	0019      	movs	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	431a      	orrs	r2, r3
 8004306:	4b15      	ldr	r3, [pc, #84]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004308:	430a      	orrs	r2, r1
 800430a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800430c:	4b13      	ldr	r3, [pc, #76]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4b12      	ldr	r3, [pc, #72]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004312:	2180      	movs	r1, #128	; 0x80
 8004314:	0449      	lsls	r1, r1, #17
 8004316:	430a      	orrs	r2, r1
 8004318:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431a:	f7fe fb07 	bl	800292c <HAL_GetTick>
 800431e:	0003      	movs	r3, r0
 8004320:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004324:	f7fe fb02 	bl	800292c <HAL_GetTick>
 8004328:	0002      	movs	r2, r0
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e054      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	2380      	movs	r3, #128	; 0x80
 800433c:	049b      	lsls	r3, r3, #18
 800433e:	4013      	ands	r3, r2
 8004340:	d0f0      	beq.n	8004324 <HAL_RCC_OscConfig+0x644>
 8004342:	e04c      	b.n	80043de <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	4b04      	ldr	r3, [pc, #16]	; (800435c <HAL_RCC_OscConfig+0x67c>)
 800434a:	4908      	ldr	r1, [pc, #32]	; (800436c <HAL_RCC_OscConfig+0x68c>)
 800434c:	400a      	ands	r2, r1
 800434e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004350:	f7fe faec 	bl	800292c <HAL_GetTick>
 8004354:	0003      	movs	r3, r0
 8004356:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004358:	e015      	b.n	8004386 <HAL_RCC_OscConfig+0x6a6>
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	40021000 	.word	0x40021000
 8004360:	00001388 	.word	0x00001388
 8004364:	efffffff 	.word	0xefffffff
 8004368:	fffeffff 	.word	0xfffeffff
 800436c:	feffffff 	.word	0xfeffffff
 8004370:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004374:	f7fe fada 	bl	800292c <HAL_GetTick>
 8004378:	0002      	movs	r2, r0
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e02c      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004386:	4b18      	ldr	r3, [pc, #96]	; (80043e8 <HAL_RCC_OscConfig+0x708>)
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	2380      	movs	r3, #128	; 0x80
 800438c:	049b      	lsls	r3, r3, #18
 800438e:	4013      	ands	r3, r2
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x694>
 8004392:	e024      	b.n	80043de <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e01f      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80043a0:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <HAL_RCC_OscConfig+0x708>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80043a6:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <HAL_RCC_OscConfig+0x708>)
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	23c0      	movs	r3, #192	; 0xc0
 80043b0:	025b      	lsls	r3, r3, #9
 80043b2:	401a      	ands	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d10e      	bne.n	80043da <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	220f      	movs	r2, #15
 80043c0:	401a      	ands	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d107      	bne.n	80043da <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	23f0      	movs	r3, #240	; 0xf0
 80043ce:	039b      	lsls	r3, r3, #14
 80043d0:	401a      	ands	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d001      	beq.n	80043de <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	0018      	movs	r0, r3
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b008      	add	sp, #32
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40021000 	.word	0x40021000

080043ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0bf      	b.n	8004580 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004400:	4b61      	ldr	r3, [pc, #388]	; (8004588 <HAL_RCC_ClockConfig+0x19c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2201      	movs	r2, #1
 8004406:	4013      	ands	r3, r2
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d911      	bls.n	8004432 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440e:	4b5e      	ldr	r3, [pc, #376]	; (8004588 <HAL_RCC_ClockConfig+0x19c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2201      	movs	r2, #1
 8004414:	4393      	bics	r3, r2
 8004416:	0019      	movs	r1, r3
 8004418:	4b5b      	ldr	r3, [pc, #364]	; (8004588 <HAL_RCC_ClockConfig+0x19c>)
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004420:	4b59      	ldr	r3, [pc, #356]	; (8004588 <HAL_RCC_ClockConfig+0x19c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2201      	movs	r2, #1
 8004426:	4013      	ands	r3, r2
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d001      	beq.n	8004432 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e0a6      	b.n	8004580 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2202      	movs	r2, #2
 8004438:	4013      	ands	r3, r2
 800443a:	d015      	beq.n	8004468 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2204      	movs	r2, #4
 8004442:	4013      	ands	r3, r2
 8004444:	d006      	beq.n	8004454 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004446:	4b51      	ldr	r3, [pc, #324]	; (800458c <HAL_RCC_ClockConfig+0x1a0>)
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	4b50      	ldr	r3, [pc, #320]	; (800458c <HAL_RCC_ClockConfig+0x1a0>)
 800444c:	21e0      	movs	r1, #224	; 0xe0
 800444e:	00c9      	lsls	r1, r1, #3
 8004450:	430a      	orrs	r2, r1
 8004452:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004454:	4b4d      	ldr	r3, [pc, #308]	; (800458c <HAL_RCC_ClockConfig+0x1a0>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	22f0      	movs	r2, #240	; 0xf0
 800445a:	4393      	bics	r3, r2
 800445c:	0019      	movs	r1, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	4b4a      	ldr	r3, [pc, #296]	; (800458c <HAL_RCC_ClockConfig+0x1a0>)
 8004464:	430a      	orrs	r2, r1
 8004466:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2201      	movs	r2, #1
 800446e:	4013      	ands	r3, r2
 8004470:	d04c      	beq.n	800450c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d107      	bne.n	800448a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447a:	4b44      	ldr	r3, [pc, #272]	; (800458c <HAL_RCC_ClockConfig+0x1a0>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	2380      	movs	r3, #128	; 0x80
 8004480:	029b      	lsls	r3, r3, #10
 8004482:	4013      	ands	r3, r2
 8004484:	d120      	bne.n	80044c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e07a      	b.n	8004580 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b02      	cmp	r3, #2
 8004490:	d107      	bne.n	80044a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004492:	4b3e      	ldr	r3, [pc, #248]	; (800458c <HAL_RCC_ClockConfig+0x1a0>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	2380      	movs	r3, #128	; 0x80
 8004498:	049b      	lsls	r3, r3, #18
 800449a:	4013      	ands	r3, r2
 800449c:	d114      	bne.n	80044c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e06e      	b.n	8004580 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d107      	bne.n	80044ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80044aa:	4b38      	ldr	r3, [pc, #224]	; (800458c <HAL_RCC_ClockConfig+0x1a0>)
 80044ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044ae:	2380      	movs	r3, #128	; 0x80
 80044b0:	029b      	lsls	r3, r3, #10
 80044b2:	4013      	ands	r3, r2
 80044b4:	d108      	bne.n	80044c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e062      	b.n	8004580 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ba:	4b34      	ldr	r3, [pc, #208]	; (800458c <HAL_RCC_ClockConfig+0x1a0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2202      	movs	r2, #2
 80044c0:	4013      	ands	r3, r2
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e05b      	b.n	8004580 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044c8:	4b30      	ldr	r3, [pc, #192]	; (800458c <HAL_RCC_ClockConfig+0x1a0>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2203      	movs	r2, #3
 80044ce:	4393      	bics	r3, r2
 80044d0:	0019      	movs	r1, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	4b2d      	ldr	r3, [pc, #180]	; (800458c <HAL_RCC_ClockConfig+0x1a0>)
 80044d8:	430a      	orrs	r2, r1
 80044da:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044dc:	f7fe fa26 	bl	800292c <HAL_GetTick>
 80044e0:	0003      	movs	r3, r0
 80044e2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e4:	e009      	b.n	80044fa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e6:	f7fe fa21 	bl	800292c <HAL_GetTick>
 80044ea:	0002      	movs	r2, r0
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	4a27      	ldr	r2, [pc, #156]	; (8004590 <HAL_RCC_ClockConfig+0x1a4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e042      	b.n	8004580 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fa:	4b24      	ldr	r3, [pc, #144]	; (800458c <HAL_RCC_ClockConfig+0x1a0>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	220c      	movs	r2, #12
 8004500:	401a      	ands	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	429a      	cmp	r2, r3
 800450a:	d1ec      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800450c:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <HAL_RCC_ClockConfig+0x19c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2201      	movs	r2, #1
 8004512:	4013      	ands	r3, r2
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d211      	bcs.n	800453e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <HAL_RCC_ClockConfig+0x19c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2201      	movs	r2, #1
 8004520:	4393      	bics	r3, r2
 8004522:	0019      	movs	r1, r3
 8004524:	4b18      	ldr	r3, [pc, #96]	; (8004588 <HAL_RCC_ClockConfig+0x19c>)
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452c:	4b16      	ldr	r3, [pc, #88]	; (8004588 <HAL_RCC_ClockConfig+0x19c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2201      	movs	r2, #1
 8004532:	4013      	ands	r3, r2
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d001      	beq.n	800453e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e020      	b.n	8004580 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2204      	movs	r2, #4
 8004544:	4013      	ands	r3, r2
 8004546:	d009      	beq.n	800455c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004548:	4b10      	ldr	r3, [pc, #64]	; (800458c <HAL_RCC_ClockConfig+0x1a0>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	4a11      	ldr	r2, [pc, #68]	; (8004594 <HAL_RCC_ClockConfig+0x1a8>)
 800454e:	4013      	ands	r3, r2
 8004550:	0019      	movs	r1, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	4b0d      	ldr	r3, [pc, #52]	; (800458c <HAL_RCC_ClockConfig+0x1a0>)
 8004558:	430a      	orrs	r2, r1
 800455a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800455c:	f000 f820 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 8004560:	0001      	movs	r1, r0
 8004562:	4b0a      	ldr	r3, [pc, #40]	; (800458c <HAL_RCC_ClockConfig+0x1a0>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	091b      	lsrs	r3, r3, #4
 8004568:	220f      	movs	r2, #15
 800456a:	4013      	ands	r3, r2
 800456c:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <HAL_RCC_ClockConfig+0x1ac>)
 800456e:	5cd3      	ldrb	r3, [r2, r3]
 8004570:	000a      	movs	r2, r1
 8004572:	40da      	lsrs	r2, r3
 8004574:	4b09      	ldr	r3, [pc, #36]	; (800459c <HAL_RCC_ClockConfig+0x1b0>)
 8004576:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004578:	2003      	movs	r0, #3
 800457a:	f7fe f991 	bl	80028a0 <HAL_InitTick>
  
  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	0018      	movs	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	b004      	add	sp, #16
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40022000 	.word	0x40022000
 800458c:	40021000 	.word	0x40021000
 8004590:	00001388 	.word	0x00001388
 8004594:	fffff8ff 	.word	0xfffff8ff
 8004598:	08004934 	.word	0x08004934
 800459c:	20000000 	.word	0x20000000

080045a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	2300      	movs	r3, #0
 80045b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80045ba:	4b2d      	ldr	r3, [pc, #180]	; (8004670 <HAL_RCC_GetSysClockFreq+0xd0>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	220c      	movs	r2, #12
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b0c      	cmp	r3, #12
 80045c8:	d046      	beq.n	8004658 <HAL_RCC_GetSysClockFreq+0xb8>
 80045ca:	d848      	bhi.n	800465e <HAL_RCC_GetSysClockFreq+0xbe>
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d002      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0x36>
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	d003      	beq.n	80045dc <HAL_RCC_GetSysClockFreq+0x3c>
 80045d4:	e043      	b.n	800465e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045d6:	4b27      	ldr	r3, [pc, #156]	; (8004674 <HAL_RCC_GetSysClockFreq+0xd4>)
 80045d8:	613b      	str	r3, [r7, #16]
      break;
 80045da:	e043      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	0c9b      	lsrs	r3, r3, #18
 80045e0:	220f      	movs	r2, #15
 80045e2:	4013      	ands	r3, r2
 80045e4:	4a24      	ldr	r2, [pc, #144]	; (8004678 <HAL_RCC_GetSysClockFreq+0xd8>)
 80045e6:	5cd3      	ldrb	r3, [r2, r3]
 80045e8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80045ea:	4b21      	ldr	r3, [pc, #132]	; (8004670 <HAL_RCC_GetSysClockFreq+0xd0>)
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	220f      	movs	r2, #15
 80045f0:	4013      	ands	r3, r2
 80045f2:	4a22      	ldr	r2, [pc, #136]	; (800467c <HAL_RCC_GetSysClockFreq+0xdc>)
 80045f4:	5cd3      	ldrb	r3, [r2, r3]
 80045f6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	23c0      	movs	r3, #192	; 0xc0
 80045fc:	025b      	lsls	r3, r3, #9
 80045fe:	401a      	ands	r2, r3
 8004600:	2380      	movs	r3, #128	; 0x80
 8004602:	025b      	lsls	r3, r3, #9
 8004604:	429a      	cmp	r2, r3
 8004606:	d109      	bne.n	800461c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	481a      	ldr	r0, [pc, #104]	; (8004674 <HAL_RCC_GetSysClockFreq+0xd4>)
 800460c:	f7fb fd7a 	bl	8000104 <__udivsi3>
 8004610:	0003      	movs	r3, r0
 8004612:	001a      	movs	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4353      	muls	r3, r2
 8004618:	617b      	str	r3, [r7, #20]
 800461a:	e01a      	b.n	8004652 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	23c0      	movs	r3, #192	; 0xc0
 8004620:	025b      	lsls	r3, r3, #9
 8004622:	401a      	ands	r2, r3
 8004624:	23c0      	movs	r3, #192	; 0xc0
 8004626:	025b      	lsls	r3, r3, #9
 8004628:	429a      	cmp	r2, r3
 800462a:	d109      	bne.n	8004640 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800462c:	68b9      	ldr	r1, [r7, #8]
 800462e:	4814      	ldr	r0, [pc, #80]	; (8004680 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004630:	f7fb fd68 	bl	8000104 <__udivsi3>
 8004634:	0003      	movs	r3, r0
 8004636:	001a      	movs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4353      	muls	r3, r2
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	e008      	b.n	8004652 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004640:	68b9      	ldr	r1, [r7, #8]
 8004642:	480c      	ldr	r0, [pc, #48]	; (8004674 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004644:	f7fb fd5e 	bl	8000104 <__udivsi3>
 8004648:	0003      	movs	r3, r0
 800464a:	001a      	movs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4353      	muls	r3, r2
 8004650:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	613b      	str	r3, [r7, #16]
      break;
 8004656:	e005      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <HAL_RCC_GetSysClockFreq+0xe0>)
 800465a:	613b      	str	r3, [r7, #16]
      break;
 800465c:	e002      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800465e:	4b05      	ldr	r3, [pc, #20]	; (8004674 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004660:	613b      	str	r3, [r7, #16]
      break;
 8004662:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004664:	693b      	ldr	r3, [r7, #16]
}
 8004666:	0018      	movs	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	b006      	add	sp, #24
 800466c:	bd80      	pop	{r7, pc}
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	40021000 	.word	0x40021000
 8004674:	007a1200 	.word	0x007a1200
 8004678:	08004944 	.word	0x08004944
 800467c:	08004954 	.word	0x08004954
 8004680:	02dc6c00 	.word	0x02dc6c00

08004684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	2380      	movs	r3, #128	; 0x80
 800469a:	025b      	lsls	r3, r3, #9
 800469c:	4013      	ands	r3, r2
 800469e:	d100      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80046a0:	e08e      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80046a2:	2017      	movs	r0, #23
 80046a4:	183b      	adds	r3, r7, r0
 80046a6:	2200      	movs	r2, #0
 80046a8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046aa:	4b6e      	ldr	r3, [pc, #440]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80046ac:	69da      	ldr	r2, [r3, #28]
 80046ae:	2380      	movs	r3, #128	; 0x80
 80046b0:	055b      	lsls	r3, r3, #21
 80046b2:	4013      	ands	r3, r2
 80046b4:	d110      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046b6:	4b6b      	ldr	r3, [pc, #428]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80046b8:	69da      	ldr	r2, [r3, #28]
 80046ba:	4b6a      	ldr	r3, [pc, #424]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80046bc:	2180      	movs	r1, #128	; 0x80
 80046be:	0549      	lsls	r1, r1, #21
 80046c0:	430a      	orrs	r2, r1
 80046c2:	61da      	str	r2, [r3, #28]
 80046c4:	4b67      	ldr	r3, [pc, #412]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	2380      	movs	r3, #128	; 0x80
 80046ca:	055b      	lsls	r3, r3, #21
 80046cc:	4013      	ands	r3, r2
 80046ce:	60bb      	str	r3, [r7, #8]
 80046d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d2:	183b      	adds	r3, r7, r0
 80046d4:	2201      	movs	r2, #1
 80046d6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d8:	4b63      	ldr	r3, [pc, #396]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	2380      	movs	r3, #128	; 0x80
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	4013      	ands	r3, r2
 80046e2:	d11a      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046e4:	4b60      	ldr	r3, [pc, #384]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	4b5f      	ldr	r3, [pc, #380]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80046ea:	2180      	movs	r1, #128	; 0x80
 80046ec:	0049      	lsls	r1, r1, #1
 80046ee:	430a      	orrs	r2, r1
 80046f0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046f2:	f7fe f91b 	bl	800292c <HAL_GetTick>
 80046f6:	0003      	movs	r3, r0
 80046f8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fa:	e008      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046fc:	f7fe f916 	bl	800292c <HAL_GetTick>
 8004700:	0002      	movs	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b64      	cmp	r3, #100	; 0x64
 8004708:	d901      	bls.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e0a6      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470e:	4b56      	ldr	r3, [pc, #344]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	2380      	movs	r3, #128	; 0x80
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	4013      	ands	r3, r2
 8004718:	d0f0      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800471a:	4b52      	ldr	r3, [pc, #328]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800471c:	6a1a      	ldr	r2, [r3, #32]
 800471e:	23c0      	movs	r3, #192	; 0xc0
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4013      	ands	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d034      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	23c0      	movs	r3, #192	; 0xc0
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4013      	ands	r3, r2
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	429a      	cmp	r2, r3
 800473a:	d02c      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800473c:	4b49      	ldr	r3, [pc, #292]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	4a4a      	ldr	r2, [pc, #296]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004742:	4013      	ands	r3, r2
 8004744:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004746:	4b47      	ldr	r3, [pc, #284]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004748:	6a1a      	ldr	r2, [r3, #32]
 800474a:	4b46      	ldr	r3, [pc, #280]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800474c:	2180      	movs	r1, #128	; 0x80
 800474e:	0249      	lsls	r1, r1, #9
 8004750:	430a      	orrs	r2, r1
 8004752:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004754:	4b43      	ldr	r3, [pc, #268]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004756:	6a1a      	ldr	r2, [r3, #32]
 8004758:	4b42      	ldr	r3, [pc, #264]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800475a:	4945      	ldr	r1, [pc, #276]	; (8004870 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800475c:	400a      	ands	r2, r1
 800475e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004760:	4b40      	ldr	r3, [pc, #256]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	4013      	ands	r3, r2
 800476c:	d013      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476e:	f7fe f8dd 	bl	800292c <HAL_GetTick>
 8004772:	0003      	movs	r3, r0
 8004774:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004776:	e009      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004778:	f7fe f8d8 	bl	800292c <HAL_GetTick>
 800477c:	0002      	movs	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	4a3c      	ldr	r2, [pc, #240]	; (8004874 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d901      	bls.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e067      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478c:	4b35      	ldr	r3, [pc, #212]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	2202      	movs	r2, #2
 8004792:	4013      	ands	r3, r2
 8004794:	d0f0      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004796:	4b33      	ldr	r3, [pc, #204]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	4a34      	ldr	r2, [pc, #208]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800479c:	4013      	ands	r3, r2
 800479e:	0019      	movs	r1, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	4b2f      	ldr	r3, [pc, #188]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047a6:	430a      	orrs	r2, r1
 80047a8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047aa:	2317      	movs	r3, #23
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d105      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047b4:	4b2b      	ldr	r3, [pc, #172]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	4b2a      	ldr	r3, [pc, #168]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047ba:	492f      	ldr	r1, [pc, #188]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80047bc:	400a      	ands	r2, r1
 80047be:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2201      	movs	r2, #1
 80047c6:	4013      	ands	r3, r2
 80047c8:	d009      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047ca:	4b26      	ldr	r3, [pc, #152]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	2203      	movs	r2, #3
 80047d0:	4393      	bics	r3, r2
 80047d2:	0019      	movs	r1, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	4b22      	ldr	r3, [pc, #136]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047da:	430a      	orrs	r2, r1
 80047dc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2202      	movs	r2, #2
 80047e4:	4013      	ands	r3, r2
 80047e6:	d009      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047e8:	4b1e      	ldr	r3, [pc, #120]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	4a23      	ldr	r2, [pc, #140]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	0019      	movs	r1, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80047f8:	430a      	orrs	r2, r1
 80047fa:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	2380      	movs	r3, #128	; 0x80
 8004802:	02db      	lsls	r3, r3, #11
 8004804:	4013      	ands	r3, r2
 8004806:	d009      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004808:	4b16      	ldr	r3, [pc, #88]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	4a1c      	ldr	r2, [pc, #112]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800480e:	4013      	ands	r3, r2
 8004810:	0019      	movs	r1, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	4b13      	ldr	r3, [pc, #76]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004818:	430a      	orrs	r2, r1
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2220      	movs	r2, #32
 8004822:	4013      	ands	r3, r2
 8004824:	d009      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004826:	4b0f      	ldr	r3, [pc, #60]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	2210      	movs	r2, #16
 800482c:	4393      	bics	r3, r2
 800482e:	0019      	movs	r1, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	695a      	ldr	r2, [r3, #20]
 8004834:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004836:	430a      	orrs	r2, r1
 8004838:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	2380      	movs	r3, #128	; 0x80
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4013      	ands	r3, r2
 8004844:	d009      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004846:	4b07      	ldr	r3, [pc, #28]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	2240      	movs	r2, #64	; 0x40
 800484c:	4393      	bics	r3, r2
 800484e:	0019      	movs	r1, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699a      	ldr	r2, [r3, #24]
 8004854:	4b03      	ldr	r3, [pc, #12]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004856:	430a      	orrs	r2, r1
 8004858:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	0018      	movs	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	b006      	add	sp, #24
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40021000 	.word	0x40021000
 8004868:	40007000 	.word	0x40007000
 800486c:	fffffcff 	.word	0xfffffcff
 8004870:	fffeffff 	.word	0xfffeffff
 8004874:	00001388 	.word	0x00001388
 8004878:	efffffff 	.word	0xefffffff
 800487c:	fffcffff 	.word	0xfffcffff
 8004880:	fff3ffff 	.word	0xfff3ffff

08004884 <memset>:
 8004884:	0003      	movs	r3, r0
 8004886:	1882      	adds	r2, r0, r2
 8004888:	4293      	cmp	r3, r2
 800488a:	d100      	bne.n	800488e <memset+0xa>
 800488c:	4770      	bx	lr
 800488e:	7019      	strb	r1, [r3, #0]
 8004890:	3301      	adds	r3, #1
 8004892:	e7f9      	b.n	8004888 <memset+0x4>

08004894 <__libc_init_array>:
 8004894:	b570      	push	{r4, r5, r6, lr}
 8004896:	2600      	movs	r6, #0
 8004898:	4c0c      	ldr	r4, [pc, #48]	; (80048cc <__libc_init_array+0x38>)
 800489a:	4d0d      	ldr	r5, [pc, #52]	; (80048d0 <__libc_init_array+0x3c>)
 800489c:	1b64      	subs	r4, r4, r5
 800489e:	10a4      	asrs	r4, r4, #2
 80048a0:	42a6      	cmp	r6, r4
 80048a2:	d109      	bne.n	80048b8 <__libc_init_array+0x24>
 80048a4:	2600      	movs	r6, #0
 80048a6:	f000 f819 	bl	80048dc <_init>
 80048aa:	4c0a      	ldr	r4, [pc, #40]	; (80048d4 <__libc_init_array+0x40>)
 80048ac:	4d0a      	ldr	r5, [pc, #40]	; (80048d8 <__libc_init_array+0x44>)
 80048ae:	1b64      	subs	r4, r4, r5
 80048b0:	10a4      	asrs	r4, r4, #2
 80048b2:	42a6      	cmp	r6, r4
 80048b4:	d105      	bne.n	80048c2 <__libc_init_array+0x2e>
 80048b6:	bd70      	pop	{r4, r5, r6, pc}
 80048b8:	00b3      	lsls	r3, r6, #2
 80048ba:	58eb      	ldr	r3, [r5, r3]
 80048bc:	4798      	blx	r3
 80048be:	3601      	adds	r6, #1
 80048c0:	e7ee      	b.n	80048a0 <__libc_init_array+0xc>
 80048c2:	00b3      	lsls	r3, r6, #2
 80048c4:	58eb      	ldr	r3, [r5, r3]
 80048c6:	4798      	blx	r3
 80048c8:	3601      	adds	r6, #1
 80048ca:	e7f2      	b.n	80048b2 <__libc_init_array+0x1e>
 80048cc:	08004964 	.word	0x08004964
 80048d0:	08004964 	.word	0x08004964
 80048d4:	08004968 	.word	0x08004968
 80048d8:	08004964 	.word	0x08004964

080048dc <_init>:
 80048dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e2:	bc08      	pop	{r3}
 80048e4:	469e      	mov	lr, r3
 80048e6:	4770      	bx	lr

080048e8 <_fini>:
 80048e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ee:	bc08      	pop	{r3}
 80048f0:	469e      	mov	lr, r3
 80048f2:	4770      	bx	lr
